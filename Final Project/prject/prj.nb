(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2049306,      36914]
NotebookOptionsPosition[   2029695,      36601]
NotebookOutlinePosition[   2030033,      36616]
CellTagsIndexPosition[   2029990,      36613]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7715416066695538`*^9, 
  3.7715416118344193`*^9}},ExpressionUUID->"76d4be34-63d6-4aa2-983d-\
e52a6411252a"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.7715229228854*^9},ExpressionUUID->"333c99f8-eff1-40c5-9986-12c90ba8ba9c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771289596238297*^9, 3.771289604104618*^9}, {
  3.77128964600518*^9, 3.771289646714778*^9}, {3.7712897532026978`*^9, 
  3.771289848402429*^9}, {3.771289954996866*^9, 3.771289968939539*^9}, {
  3.771290120122158*^9, 3.7712901365274973`*^9}, {3.771290181328824*^9, 
  3.771290190040472*^9}, {3.771290234661467*^9, 3.77129029275525*^9}, {
  3.771315793365416*^9, 
  3.7713157945438538`*^9}},ExpressionUUID->"abfd504e-e8d5-4d97-a414-\
b21d0ec357b7"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"f1", "[", "x_", "]"}], " ", "=", " ", "x"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.771324582322111*^9, 
  3.771324595936274*^9}},ExpressionUUID->"bfcb3dd0-0f00-40ab-9c50-\
8c6e417bbd90"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7713157722945223`*^9, 3.771315774074315*^9}, {
   3.771315904882574*^9, 3.7713159356544943`*^9}, 3.7713159801062403`*^9, {
   3.771320373600913*^9, 3.771320377880721*^9}, 3.77132425254737*^9, {
   3.7713243156173887`*^9, 3.771324449299204*^9}, {3.771324482173538*^9, 
   3.771324562636162*^9}, {3.771324600458992*^9, 3.771324613871747*^9}, {
   3.771324685659854*^9, 3.7713247357157907`*^9}, {3.7713248335055532`*^9, 
   3.771324843692788*^9}, {3.771325023305458*^9, 3.771325117799653*^9}, {
   3.7713251778475447`*^9, 3.771325178307433*^9}, 3.771325209106513*^9},
 NumberMarks->False,ExpressionUUID->"642da788-2f4d-4704-942a-ff8da40589d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionPeriod", "[", 
  RowBox[{"fn", ",", "Reals"}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"8b774887-d267-4e82-a729-bd1b11bc6dc3"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.771326577712489*^9, 3.7713612515099792`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"b243ab96-3e20-4254-b038-944ced36fd23"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771429954660173*^9, 
  3.771429958991375*^9}},ExpressionUUID->"ee861be6-75ab-4e57-9b2d-\
306f7e70de86"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fn", "=", 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"Sin", "[", "x", "]"}], "]"}], "+", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fn1", "[", "x_", "]"}], " ", ":=", 
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{"Sin", "[", "x", "]"}], "]"}], "+", "1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"fn", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.771316073401917*^9, 3.771316086946508*^9}, {
   3.771316295691311*^9, 3.771316298653054*^9}, {3.771322002267791*^9, 
   3.771322032682067*^9}, {3.77132252836273*^9, 3.7713225473368063`*^9}, {
   3.7713265460996313`*^9, 3.771326574349519*^9}, {3.7714152521558867`*^9, 
   3.771415263497295*^9}, {3.77141532748174*^9, 3.771415331950911*^9}, {
   3.771415548262292*^9, 3.771415577184947*^9}, {3.771429890506325*^9, 
   3.771429923998035*^9}, {3.7714299618288393`*^9, 3.7714299640229387`*^9}, {
   3.771432439496628*^9, 3.7714324676384287`*^9}, {3.771432804456152*^9, 
   3.7714328303321753`*^9}, {3.7714357719137573`*^9, 3.7714357905082397`*^9}, 
   3.7714361591508293`*^9, {3.7715107404856043`*^9, 3.771510744146708*^9}, {
   3.771511034784206*^9, 3.771511036767305*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"00285b61-aabc-4268-8629-4b8f38acf214"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
g/7/+6c/7rpVFcL0TPbdZ4fJ+rlC3p4JXcL0ifoihx6yPwetwKdHmcL0Z3EH
qp+S/T+Gs/2rpEXoDi2rzP9/vzPhellTzkSEfiF+sFuH5G9tUNz+n+tF6Abj
vlb9JL+3Y5MflR0QofsIzemdIvkfepbWezNMhF7s6HTBnZzPipoXqocSROhj
1ap8mqXkPPpe77HMF6GfocIP0Ml5dnOrkuc3iNDvMw5UlZDzNlNs7OwbFqFH
6ZUfu0XuQ7NDv2uMqihdwlrJ7Ri5Lzo+IwnuK0TpD8uYHwPJfQq5xGxbtF2U
fqksZOAHuW8Ly8RcuqJF6X4hP0rFib89DBdv+6+mM4+H6gv/OLKUlH3fx84Y
ZiyJOE8iKqWQJVskyb5kS4UoypI2W9pUtFuylCRJKiKpZE0kkeWLyMxg7u/4
/V6/P5/XzD3nPMu9n/dz5547lH9rYbWd4vpePhy/regChyAfFJ3ZOHZqEV9n
vLd96tTig/2OvhcqML88zHW3jffig1OUQoOHmFfmuE7vaP/AB/EFwUfDIlko
6UfnlvBb60ButjFr+s0y+v5sR1BM7TooFx9R21m6jIwv1mef+LoOQpdfX47O
X0bTlvfHzvKsh0Kt2esWwcvI48Hxc7cC1gO961Caqgj+fpRy7xc9fgg9VbHW
3G0JZdvmcfba8EOq77b3+pZLaEZ9PWXwID8Mhfg26uB+627vQsJkDj/QwxXi
bdiWkNjmFlXuJX5Y1/ExP/HOImJwbXwm7S0A+j3eq+v/YZ0I/9t6LVgA/omJ
G73HOuEw8GhIMU4A7LhzI9e3MlHpUxKf+iUBKDJSjXK+zUS+AXye+k0CELXq
rdgGRyYS6WqKqO4QgHCzhLygLfj6Z5GYajwgAMO5C7HzukwkK/evDOgCsLR6
fpxjHRN9aR/g3KkpCCfY2mMd3jPQSdN8yXZDQfjid9DQ8RnmlfsOFPstgvDH
knOx5h4DpSW9d3JxE4ToiIN7KtMYyGg6KbDPTxAEyE45u44z0IibWaJnpCCA
X9FOuxAGMjd8cv9gpiDsulPdfN2BgaYLg16O5gvCA92q5gkrBrrGr/4loFgQ
bIQyH93H/TZjtGA5rF4QSHk2v04o4/58r5PQ/AdBaFK/Rc+RZCCHBkG1mG5B
6LldF6DGz0ClV07vPjErCIoKQlsfL2J+ED79m59NCKak3oT9maGjkbRTJ26u
E4JkUoh5NeYCds5TonrSQvCwzW1BFPOOzLHkh43qQnD0C7OGB/POhrmkLY6G
QnDkwM/CDKyvdoFJPb+3CME+z/GSu1h/g4ZPhsXuEYJpG502F6zPqW4nV6/1
FIK7zfJfb76go1tfEq8XBArBfGhGSuJTOqqzSTSkHBWCH/QnFxlPMA81JuDm
UAj2nrW4yFtKR3ObEnz2XBaCKrGQtZUP6Yi/Mn5xqFAIoPhPIAPzjqZ2/IUj
pULAeXZJuGvl96w7JzS464TAbscJ6z2Yd/bLnqjPaRGC4sAh04OYX+IuH3fS
6BaC/NYNwiLYzl53fKpmRAi21ml9dsd22aljp2zmhMCiiveIOT7+w3KczHd2
YQh6/PLbKzz+78i4JyH8wvBHrqOlF8/PMXV0O7usMOQVea/JwuuT9T06eEFT
GFoPqBp8L6Ejo++xMcpGwrCe12vgDfbP3jGWv8pSGI687k/aiv0PbospsrIX
hjv/jZzxxPE5szXGtHu/MGR/3WQhgON3uy76i3+wMGzfv3bGCcf3pWF0wFKc
MEyzDzwzwPHveRzFkXlGGKp6c5/c/UZHAtcjdctuC4M95w2V7TifWuKRb83L
hcG2c9gzCud767kjHl9eCoOx/fAuPVwPx+Ij0hd6hEEs02DMRYCBchbClc6M
CoN6sHRJPebC8pDwGql/2B/vFo9yNQYa9QwbNRUUgQS25+90NjPQqq7Q+I9y
IlAxcmeuehcDye0OFfMiiwDl+Y3J1264HiHEItlKBPie5oHnUQaqVwi60Xxc
BN60V+X6Pmeg3tzADW5pIiDobz7d/gFzqEBg22SuCHQHSf14+J2ByOwBSwIV
IlAdKNf3eBUT5Q76OTv9EYG736cW0+yYKKTQR2DYURR2v2O/PMmG+5/YvILM
A6JQwmmZFCe2iB7vblPfGCoK+U2h0YiM+yfWhs2ZZ0Rh6/jaz27OiyjQdW24
Ua0oBBsxt14oX0T+IuWf0xXFQKRH8vmfgCV0dnzEcwNFDHTVOa9vTVpC9xuk
JwaNxUAmNFHuZv4SGgs9xbnBQQzmD1+YMX+/hPxanQ0GT4tB7dhF+keVZeR7
msg2mBCDXs1HFU+7MM+46yv9oIuB6fzx94ZTy6hI/3DJWS5xkInTr4paxUK/
hjreDsiJwwfLi4ba2izkg4roZ/aIg0LPPa/1x1koWaw3Wd9DHOZs/K/rZ7HQ
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

       "]]},
     Annotation[#, "Charting`Private`Tag$347906#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 1.5403023482038862`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{679.08203125, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-20, 20}, {1.5403023482038862`, 1.9999999994425324`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7713220043483963`*^9, 3.771322032939699*^9}, 
   3.771322547671906*^9, 3.771326561325128*^9, 3.771361253545663*^9, 
   3.7714144842652893`*^9, 3.771414554888431*^9, {3.7714152650382757`*^9, 
   3.771415268473893*^9}, {3.771415333157024*^9, 3.771415334970818*^9}, {
   3.771415546071616*^9, 3.771415577715699*^9}, {3.7714298939212933`*^9, 
   3.771429924448621*^9}, {3.77142996525974*^9, 3.771429966837079*^9}, {
   3.771432440442328*^9, 3.771432479426935*^9}, {3.771432808649617*^9, 
   3.771432830843902*^9}, {3.771435774200438*^9, 3.771435790816717*^9}, 
   3.771436160596427*^9, {3.7714367721263723`*^9, 3.77143677383893*^9}, 
   3.7714376479678183`*^9, 3.77149373064003*^9, {3.771510746733787*^9, 
   3.771510748872959*^9}, 3.771511037321589*^9},
 CellLabel->
  "Out[303]=",ExpressionUUID->"effd950e-b01b-4db0-b4b3-4ba434353588"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771321770248012*^9, 3.7713217710385723`*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"28fa633e-6c38-4c1e-a45b-e569b1154c71"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionPeriod", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{
      RowBox[{"Sqrt", "[", "2", "]"}], " ", "x"}], "]"}], "+", 
    RowBox[{"Sin", "[", "x", "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.771435612679371*^9, 3.771435661083488*^9}, {
  3.77143569702908*^9, 3.7714357177017736`*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"47e3cf3a-0582-4268-8fb0-8e65e56f7748"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7714356615292597`*^9, 3.771435702745023*^9, 
  3.771435768137712*^9, 3.7714367764258003`*^9, 3.7715107524689903`*^9},
 CellLabel->
  "Out[274]=",ExpressionUUID->"9ba8e01f-aa31-4c2d-984b-2077742bc9bd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"max", " ", "=", " ", 
    RowBox[{
     RowBox[{"x", "/.", " ", 
      RowBox[{"N", "[", 
       RowBox[{"List", "[", 
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "20"}], "\[LessEqual]", "x", "\[LessEqual]", "20"}],
             ",", " ", 
            RowBox[{
             RowBox[{"D", "[", 
              RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{
              SubscriptBox["\[PartialD]", 
               RowBox[{"{", 
                RowBox[{"x", ",", "2"}], "}"}]], "fn"}], "\[LessEqual]", 
             "0"}]}], "}"}], ",", "x"}], "]"}], "]"}], "]"}]}], "//", 
     "Flatten"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7713160926424093`*^9, 3.771316273527573*^9}, {
   3.7713163087995443`*^9, 3.771316350635251*^9}, {3.7713164031097307`*^9, 
   3.771316466290225*^9}, {3.771316526181037*^9, 3.771316619856745*^9}, {
   3.771320321199191*^9, 3.771320322154327*^9}, {3.771320553071444*^9, 
   3.771320584834959*^9}, 3.771320723135289*^9, {3.77132085619672*^9, 
   3.7713208619209223`*^9}, {3.771320938178136*^9, 3.771320944470983*^9}, {
   3.771321064799158*^9, 3.7713210792438307`*^9}, 3.771321151767745*^9, {
   3.771321769931107*^9, 3.771321779927092*^9}, {3.7713220393874407`*^9, 
   3.77132204839889*^9}, 3.771322089385949*^9, {3.7713222179904137`*^9, 
   3.771322228698851*^9}, 3.771322261430482*^9, {3.771415358928598*^9, 
   3.771415378533599*^9}, {3.7714328353512583`*^9, 3.771432835516444*^9}, {
   3.771511041281603*^9, 3.771511043606184*^9}},
 CellLabel->
  "In[311]:=",ExpressionUUID->"c604dfb9-3b85-48f2-8b7b-b2c24802ba1b"],

Cell[CellGroupData[{

Cell[BoxData["%311"], "Input",
 NumberMarks->False,
 CellLabel->
  "In[312]:=",ExpressionUUID->"e6e7070d-4ada-4d61-9510-c6cc5a299a7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", "3.141592653589793`", ",", 
   "6.283185307179586`", ",", "9.42477796076938`", ",", "12.566370614359172`",
    ",", "15.707963267948966`", ",", "18.84955592153876`"}], "}"}]], "Output",\

 CellChangeTimes->{3.771511106060961*^9},
 CellLabel->
  "Out[312]=",ExpressionUUID->"a6d858e3-35e5-421a-95e5-19d93c31b12a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["%304"], "Input",
 NumberMarks->False,
 CellLabel->
  "In[305]:=",ExpressionUUID->"a3b01c4f-7996-4c9d-a6c9-c29efe2ec399"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", "3.141592653589793`", ",", 
   "6.283185307179586`", ",", "9.42477796076938`", ",", "12.566370614359172`",
    ",", "15.707963267948966`", ",", "18.84955592153876`"}], "}"}]], "Output",\

 CellChangeTimes->{3.771511054825718*^9},
 CellLabel->
  "Out[305]=",ExpressionUUID->"68fa6532-5c1e-49ff-a127-345e3dd37164"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "3.141592653589793`", ",", "6.283185307179586`", ",", 
   "9.42477796076938`", ",", "12.566370614359172`", ",", 
   "15.707963267948966`", ",", "18.84955592153876`"}], "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[276]:=",ExpressionUUID->"46861d84-285f-4bb3-ae48-1cde90fcd59c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "3.141592653589793`", ",", "6.283185307179586`", ",", 
   "9.42477796076938`", ",", "12.566370614359172`", ",", 
   "15.707963267948966`", ",", "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{3.771510756513105*^9},
 CellLabel->
  "Out[276]=",ExpressionUUID->"a7bf298f-9bf1-4b7c-acbf-86fed8507b53"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.2632578174604474`", ",", "6.096824059773608`", ",", "9.441221836175046`",
    ",", "14.338864904855477`", ",", "19.35419340478191`"}], "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[465]:=",ExpressionUUID->"c7ef3c82-c3e8-4afb-9095-8ef6c884029d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.2632578174604474`", ",", "6.096824059773608`", ",", "9.441221836175046`",
    ",", "14.338864904855477`", ",", "19.35419340478191`"}], "}"}]], "Output",\

 CellChangeTimes->{3.771437708401471*^9},
 CellLabel->
  "Out[465]=",ExpressionUUID->"17b7bd2f-3eef-4bb6-b9b1-272ef7f5b2e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"min", "=", " ", 
   RowBox[{
    RowBox[{"x", "/.", "  ", 
     RowBox[{"N", "[", 
      RowBox[{"List", "[", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "20"}], "\[LessEqual]", "x", "\[LessEqual]", "20"}], 
           ",", " ", 
           RowBox[{
            RowBox[{"D", "[", 
             RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["\[PartialD]", 
              RowBox[{"{", 
               RowBox[{"x", ",", "2"}], "}"}]], "fn"}], "\[GreaterEqual]", 
            " ", "0"}]}], "}"}], ",", "x"}], "]"}], "]"}], "]"}]}], " ", "//",
     " ", "Flatten"}]}]}]], "Input",
 CellChangeTimes->{{3.771322281373695*^9, 3.7713223394412403`*^9}, {
  3.771432841904085*^9, 3.771432843708317*^9}, {3.771436179791877*^9, 
  3.771436179963653*^9}, {3.771511114244852*^9, 3.7715111153300953`*^9}},
 CellLabel->
  "In[313]:=",ExpressionUUID->"fbd155e3-6f39-432a-a452-088f56692638"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "1.5707963267948966`", ",", 
   "4.71238898038469`", ",", "7.853981633974483`", ",", "10.995574287564276`",
    ",", "14.137166941154069`", ",", "17.27875959474386`"}], "}"}]], "Output",\

 CellChangeTimes->{{3.7713223147330723`*^9, 3.7713223399071093`*^9}, 
   3.771361271043706*^9, 3.771361314250285*^9, 3.771414502690497*^9, 
   3.7714145659241247`*^9, 3.771415279612996*^9, 3.771415556865316*^9, 
   3.771429977248242*^9, 3.771432491330428*^9, 3.771432844219892*^9, 
   3.771436180460063*^9, 3.771436786231126*^9, 3.771437583458282*^9, 
   3.7714377222462997`*^9, 3.7714378348774548`*^9, 3.7714381251812572`*^9, 
   3.771510764776376*^9, 3.771511076547495*^9, 3.771511117208102*^9},
 CellLabel->
  "Out[313]=",ExpressionUUID->"bf032f98-e0d7-459a-ab19-fa189fa0d4f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"max1", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
        "max", "\[LeftDoubleBracket]", "x3", "\[RightDoubleBracket]"}], ",", 
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"fn", "/.", " ", 
           RowBox[{"x", "\[Rule]", " ", 
            RowBox[{
            "max", "\[LeftDoubleBracket]", "x3", 
             "\[RightDoubleBracket]"}]}]}], ",", "0.0001"}], "]"}]}], "}"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x3", ",", "1", ",", 
       RowBox[{"Length", "[", "max", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"max1", "=", "  ", 
  RowBox[{"N", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"max1", ",", "1"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{
  3.771322413458679*^9, {3.771322457985661*^9, 3.771322461772315*^9}, 
   3.771322556235607*^9, {3.771322701601544*^9, 3.771322709013381*^9}, {
   3.771322783103154*^9, 3.771322805759797*^9}, {3.7713232966893053`*^9, 
   3.771323298173336*^9}, {3.771323471381851*^9, 3.771323507192971*^9}, {
   3.771415606115098*^9, 3.771415608568225*^9}, {3.771433968523809*^9, 
   3.77143399091994*^9}, 3.7714365686868134`*^9, {3.771436734238426*^9, 
   3.771436742971807*^9}, {3.771436868648903*^9, 3.771436919584127*^9}, {
   3.771437492188673*^9, 3.771437557679865*^9}, {3.771437600266433*^9, 
   3.771437602277164*^9}, {3.77143774951572*^9, 3.771437763623962*^9}, {
   3.7714379986587152`*^9, 3.7714380102790127`*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"b4bc26fc-dbe9-4cd6-9170-438d731be264"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "18.84955592153876`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "15.707963267948966`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "12.566370614359172`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.42477796076938`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.283185307179586`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.141592653589793`"}], ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.141592653589793`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.283185307179586`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.42477796076938`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12.566370614359172`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15.707963267948966`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18.84955592153876`", ",", "2.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771437603019019*^9, {3.771437724601417*^9, 3.7714377651530724`*^9}, {
   3.77143800201716*^9, 3.771438010726462*^9}, 3.771510767673311*^9, 
   3.77151107927983*^9, 3.771511123885192*^9},
 CellLabel->
  "Out[315]=",ExpressionUUID->"e9bf1dc4-1540-42b6-a39b-b6319c89f439"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{
   RowBox[{"fn", " ", "/.", 
    RowBox[{"{", " ", 
     RowBox[{"x", "\[Rule]", " ", "1"}], "}"}]}], ",", "0.01"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771436800961174*^9, 3.771436854765066*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"65efd0e6-2942-4e1b-856e-22c350667967"],

Cell[BoxData["1.67`"], "Output",
 CellChangeTimes->{{3.771436811331573*^9, 3.771436818544311*^9}, 
   3.771436855257654*^9, 3.771437570422956*^9, 3.77143801619239*^9, 
   3.771510774647044*^9, 3.771511092653531*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"645362d9-d9fd-49e9-b8c8-0139278104eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "10", ",", ".1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{3.771437290240518*^9},
 CellLabel->
  "In[281]:=",ExpressionUUID->"4440b039-2997-46ae-90ac-2cbf59dc0dba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "0.`", "]"}], ",", 
   RowBox[{"f", "[", "0.1`", "]"}], ",", 
   RowBox[{"f", "[", "0.2`", "]"}], ",", 
   RowBox[{"f", "[", "0.30000000000000004`", "]"}], ",", 
   RowBox[{"f", "[", "0.4`", "]"}], ",", 
   RowBox[{"f", "[", "0.5`", "]"}], ",", 
   RowBox[{"f", "[", "0.6000000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "0.7000000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "0.8`", "]"}], ",", 
   RowBox[{"f", "[", "0.9`", "]"}], ",", 
   RowBox[{"f", "[", "1.`", "]"}], ",", 
   RowBox[{"f", "[", "1.1`", "]"}], ",", 
   RowBox[{"f", "[", "1.2000000000000002`", "]"}], ",", 
   RowBox[{"f", "[", "1.3`", "]"}], ",", 
   RowBox[{"f", "[", "1.4000000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "1.5`", "]"}], ",", 
   RowBox[{"f", "[", "1.6`", "]"}], ",", 
   RowBox[{"f", "[", "1.7000000000000002`", "]"}], ",", 
   RowBox[{"f", "[", "1.8`", "]"}], ",", 
   RowBox[{"f", "[", "1.9000000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "2.`", "]"}], ",", 
   RowBox[{"f", "[", "2.1`", "]"}], ",", 
   RowBox[{"f", "[", "2.2`", "]"}], ",", 
   RowBox[{"f", "[", "2.3000000000000003`", "]"}], ",", 
   RowBox[{"f", "[", "2.4000000000000004`", "]"}], ",", 
   RowBox[{"f", "[", "2.5`", "]"}], ",", 
   RowBox[{"f", "[", "2.6`", "]"}], ",", 
   RowBox[{"f", "[", "2.7`", "]"}], ",", 
   RowBox[{"f", "[", "2.8000000000000003`", "]"}], ",", 
   RowBox[{"f", "[", "2.9000000000000004`", "]"}], ",", 
   RowBox[{"f", "[", "3.`", "]"}], ",", 
   RowBox[{"f", "[", "3.1`", "]"}], ",", 
   RowBox[{"f", "[", "3.2`", "]"}], ",", 
   RowBox[{"f", "[", "3.3000000000000003`", "]"}], ",", 
   RowBox[{"f", "[", "3.4000000000000004`", "]"}], ",", 
   RowBox[{"f", "[", "3.5`", "]"}], ",", 
   RowBox[{"f", "[", "3.6`", "]"}], ",", 
   RowBox[{"f", "[", "3.7`", "]"}], ",", 
   RowBox[{"f", "[", "3.8000000000000003`", "]"}], ",", 
   RowBox[{"f", "[", "3.9000000000000004`", "]"}], ",", 
   RowBox[{"f", "[", "4.`", "]"}], ",", 
   RowBox[{"f", "[", "4.1000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "4.2`", "]"}], ",", 
   RowBox[{"f", "[", "4.3`", "]"}], ",", 
   RowBox[{"f", "[", "4.4`", "]"}], ",", 
   RowBox[{"f", "[", "4.5`", "]"}], ",", 
   RowBox[{"f", "[", "4.6000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "4.7`", "]"}], ",", 
   RowBox[{"f", "[", "4.800000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "4.9`", "]"}], ",", 
   RowBox[{"f", "[", "5.`", "]"}], ",", 
   RowBox[{"f", "[", "5.1000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "5.2`", "]"}], ",", 
   RowBox[{"f", "[", "5.300000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "5.4`", "]"}], ",", 
   RowBox[{"f", "[", "5.5`", "]"}], ",", 
   RowBox[{"f", "[", "5.6000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "5.7`", "]"}], ",", 
   RowBox[{"f", "[", "5.800000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "5.9`", "]"}], ",", 
   RowBox[{"f", "[", "6.`", "]"}], ",", 
   RowBox[{"f", "[", "6.1000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "6.2`", "]"}], ",", 
   RowBox[{"f", "[", "6.300000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "6.4`", "]"}], ",", 
   RowBox[{"f", "[", "6.5`", "]"}], ",", 
   RowBox[{"f", "[", "6.6000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "6.7`", "]"}], ",", 
   RowBox[{"f", "[", "6.800000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "6.9`", "]"}], ",", 
   RowBox[{"f", "[", "7.`", "]"}], ",", 
   RowBox[{"f", "[", "7.1000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "7.2`", "]"}], ",", 
   RowBox[{"f", "[", "7.300000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "7.4`", "]"}], ",", 
   RowBox[{"f", "[", "7.5`", "]"}], ",", 
   RowBox[{"f", "[", "7.6000000000000005`", "]"}], ",", 
   RowBox[{"f", "[", "7.7`", "]"}], ",", 
   RowBox[{"f", "[", "7.800000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "7.9`", "]"}], ",", 
   RowBox[{"f", "[", "8.`", "]"}], ",", 
   RowBox[{"f", "[", "8.1`", "]"}], ",", 
   RowBox[{"f", "[", "8.200000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "8.3`", "]"}], ",", 
   RowBox[{"f", "[", "8.4`", "]"}], ",", 
   RowBox[{"f", "[", "8.5`", "]"}], ",", 
   RowBox[{"f", "[", "8.6`", "]"}], ",", 
   RowBox[{"f", "[", "8.700000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "8.8`", "]"}], ",", 
   RowBox[{"f", "[", "8.9`", "]"}], ",", 
   RowBox[{"f", "[", "9.`", "]"}], ",", 
   RowBox[{"f", "[", "9.1`", "]"}], ",", 
   RowBox[{"f", "[", "9.200000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "9.3`", "]"}], ",", 
   RowBox[{"f", "[", "9.4`", "]"}], ",", 
   RowBox[{"f", "[", "9.5`", "]"}], ",", 
   RowBox[{"f", "[", "9.600000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "9.700000000000001`", "]"}], ",", 
   RowBox[{"f", "[", "9.8`", "]"}], ",", 
   RowBox[{"f", "[", "9.9`", "]"}], ",", 
   RowBox[{"f", "[", "10.`", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771510776704608*^9},
 CellLabel->
  "Out[281]=",ExpressionUUID->"5ac95765-09fc-4fe2-aa41-a828fc3a0fe7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"x", "\[Rule]", "#1"}], ")"}], "}"}], "&"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "10", ",", ".1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771437247734173*^9, 3.771437255138956*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"837db2c0-914d-433e-a300-a46f87d1ca13"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.30000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.6000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.7000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.2000000000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.4000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.7000000000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.9000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.3000000000000003`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.4000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.8000000000000003`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2.9000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.3000000000000003`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.4000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.8000000000000003`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.9000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.1000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.6000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.800000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "4.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.1000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.300000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.6000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.800000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "5.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.1000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.300000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.6000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.800000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "6.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.1000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.300000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.6000000000000005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.800000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.200000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.700000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "8.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.200000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.600000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.700000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "10.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771510779539131*^9, 3.7715110985662193`*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"3a232556-1135-4c36-a331-16213372ba69"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "3"}], "+", 
    RowBox[{"x", "^", "2"}], "+", "x", "+", "1"}], "/.", 
   RowBox[{"{", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"(", 
         RowBox[{"x", "\[Rule]", "#"}], ")"}], "}"}], "&"}], ",", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "10", ",", ".1"}], "]"}]}], "]"}], "}"}]}], 
  ")"}]], "Input",
 CellLabel->
  "In[448]:=",ExpressionUUID->"614174f7-b0b0-46a6-a6e6-681be5efbc85"],

Cell[BoxData[
 RowBox[{"Transpose", "@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "10", ",", ".1"}], "]"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "^", "3"}], "+", 
        RowBox[{"x", "^", "2"}], "+", "x", "+", "1"}], "/.", 
       RowBox[{"{", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"(", 
             RowBox[{"x", "\[Rule]", "#"}], ")"}], "}"}], "&"}], ",", 
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", "10", ",", ".1"}], "]"}]}], "]"}], "}"}]}], 
      ")"}], "//", "Flatten"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771437015322369*^9, 3.771437111992313*^9}, {
   3.771437150826071*^9, 3.771437196877061*^9}, {3.7714373752612867`*^9, 
   3.771437397656673*^9}, 3.771437428759347*^9},
 CellLabel->"",ExpressionUUID->"580c3f36-f4f7-43b6-ad55-70354f63dcef"],

Cell[BoxData[
 RowBox[{"fn", " ", "/.", " ", 
  RowBox[{"x", "\[Rule]", " "}]}]], "Input",
 CellChangeTimes->{{3.771436992951209*^9, 
  3.77143699798944*^9}},ExpressionUUID->"fdd88d17-3cd2-4962-8d3c-\
c31b7958aeba"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "min1", "]"}]], "Input",
 CellChangeTimes->{{3.771438105621694*^9, 3.771438111221031*^9}},
 CellLabel->
  "In[488]:=",ExpressionUUID->"6db4d06a-d5e9-466f-ab82-a963a917febf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"min1", " ", "=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "min", "\[LeftDoubleBracket]", "x3", "\[RightDoubleBracket]"}], 
           ",", 
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{"fn", "/.", 
              RowBox[{"x", "\[Rule]", " ", 
               RowBox[{
               "min", "\[LeftDoubleBracket]", "x3", 
                "\[RightDoubleBracket]"}]}]}], ",", "0.0001"}], "]"}]}], 
          "}"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x3", ",", "1", ",", 
          RowBox[{"Length", "[", "min", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
     "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.77132286249518*^9, 3.771322900983354*^9}, {
  3.7713232588733063`*^9, 3.771323302573295*^9}, {3.771415437080791*^9, 
  3.771415483876937*^9}, {3.771438066435165*^9, 3.771438100228901*^9}, {
  3.771438138197279*^9, 3.771438143609046*^9}},
 CellLabel->
  "In[316]:=",ExpressionUUID->"70ae7224-783f-4835-b6b8-aa558b8f3f7d"],

Cell[CellGroupData[{

Cell[BoxData["%316"], "Input",
 NumberMarks->False,
 CellLabel->
  "In[317]:=",ExpressionUUID->"7d8ffba1-b6f3-41d9-8732-959767c720f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "17.27875959474386`"}], ",", "1.5403`", ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", "1.5403`", ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", "1.5403`", ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", "1.5403`", ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", "1.5403`", ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "1.5403`", ",", 
   "1.5707963267948966`", ",", "1.5403`", ",", "4.71238898038469`", ",", 
   "1.5403`", ",", "7.853981633974483`", ",", "1.5403`", ",", 
   "10.995574287564276`", ",", "1.5403`", ",", "14.137166941154069`", ",", 
   "1.5403`", ",", "17.27875959474386`", ",", "1.5403`"}], "}"}]], "Output",
 CellChangeTimes->{3.771511132986981*^9},
 CellLabel->
  "Out[317]=",ExpressionUUID->"21303c8b-69a9-40dc-962c-0eac44dddeae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.5707963267948966`", ",", "1.5403`", ",", "4.71238898038469`", ",", 
   "1.5403`", ",", "7.853981633974483`", ",", "1.5403`", ",", 
   "10.995574287564276`", ",", "1.5403`", ",", "14.137166941154069`", ",", 
   "1.5403`", ",", "17.27875959474386`", ",", "1.5403`"}], "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[284]:=",ExpressionUUID->"5712c1e0-d1dc-476b-8767-64def2943c99"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.5707963267948966`", ",", "1.5403`", ",", "4.71238898038469`", ",", 
   "1.5403`", ",", "7.853981633974483`", ",", "1.5403`", ",", 
   "10.995574287564276`", ",", "1.5403`", ",", "14.137166941154069`", ",", 
   "1.5403`", ",", "17.27875959474386`", ",", "1.5403`"}], "}"}]], "Output",
 CellChangeTimes->{3.771510788569713*^9},
 CellLabel->
  "Out[284]=",ExpressionUUID->"1e2e4855-ca28-473c-af19-b44882543fe0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.7646737849311918`", ",", 
   RowBox[{"-", "1.4022000000000001`"}], ",", "7.696435933454272`", ",", 
   RowBox[{"-", "0.006200000000000001`"}], ",", "11.82857319404955`", ",", 
   RowBox[{"-", "1.5249000000000001`"}], ",", "16.864762940718006`", ",", 
   RowBox[{"-", "1.8742`"}]}], "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[493]:=",ExpressionUUID->"e3472f9d-4892-4c3c-ba7f-162fb6f590ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.7646737849311918`", ",", 
   RowBox[{"-", "1.4022000000000001`"}], ",", "7.696435933454272`", ",", 
   RowBox[{"-", "0.006200000000000001`"}], ",", "11.82857319404955`", ",", 
   RowBox[{"-", "1.5249000000000001`"}], ",", "16.864762940718006`", ",", 
   RowBox[{"-", "1.8742`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771438146409836*^9},
 CellLabel->
  "Out[493]=",ExpressionUUID->"22b8d296-f1ce-4867-a31c-db2aa48e358d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[490]:=",ExpressionUUID->"48c8499c-5c8b-443b-b57c-6db561b53df0"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.771438115617955*^9},
 CellLabel->
  "Out[490]=",ExpressionUUID->"60f595c3-fa95-4e4a-9a9c-e6e7b25bdaed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[487]:=",ExpressionUUID->"b3360980-264b-40df-924d-4d00dd41ba98"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.77143809520196*^9},
 CellLabel->
  "Out[487]=",ExpressionUUID->"a60c4f36-9b58-47ab-96ba-02e095c446ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SortBy", "[", 
  RowBox[{"min1", ",", "Last"}], "]"}]], "Input",
 CellChangeTimes->{{3.771322930436056*^9, 3.7713229647351303`*^9}, {
   3.77132303206359*^9, 3.7713230710620623`*^9}, {3.771323241601049*^9, 
   3.771323245230402*^9}, 3.7713234883963633`*^9, {3.77132379659788*^9, 
   3.771323815946416*^9}},
 CellLabel->
  "In[480]:=",ExpressionUUID->"84fb6b6b-3605-47db-aafd-fa301fcba357"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"16.864762940718006`", ",", 
     RowBox[{"-", "1.8742`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11.82857319404955`", ",", 
     RowBox[{"-", "1.5249000000000001`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.7646737849311918`", ",", 
     RowBox[{"-", "1.4022000000000001`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7.696435933454272`", ",", 
     RowBox[{"-", "0.006200000000000001`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.77132295677633*^9, {3.771323043064148*^9, 3.771323071409348*^9}, 
   3.771323245576479*^9, {3.771323488820178*^9, 3.7713235166234293`*^9}, {
   3.7713237987780743`*^9, 3.771323816343248*^9}, 3.771361352162178*^9, 
   3.7714145245789757`*^9, 3.771414586665702*^9, 3.7714154715466957`*^9, 
   3.771415636298867*^9, 3.7714299849220047`*^9, 3.7714324991501493`*^9, 
   3.771432850428334*^9, 3.771437637927085*^9, 3.7714380366021748`*^9},
 CellLabel->
  "Out[480]=",ExpressionUUID->"3d6b1e1f-92a9-406d-ab41-be0b66d73124"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SortBy", "[", 
  RowBox[{"max1", ",", "Last", ",", "Greater"}], "]"}]], "Input",
 CellChangeTimes->{{3.771323523203094*^9, 3.771323532440256*^9}, {
  3.771323808541952*^9, 3.771323810036371*^9}},
 CellLabel->
  "In[481]:=",ExpressionUUID->"1db3b41f-7b95-4046-a189-e493d8e769e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"14.338864904855477`", ",", "1.9696`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.2632578174604474`", ",", "1.9299000000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19.35419340478191`", ",", "1.2689000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.441221836175046`", ",", "0.6908000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.096824059773608`", ",", "0.5339`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{
  3.7713235328460817`*^9, {3.771323810383292*^9, 3.771323818337812*^9}, 
   3.7713613539844522`*^9, 3.771414526571871*^9, 3.771414589695486*^9, 
   3.771415643415079*^9, 3.771429989150893*^9, 3.771432501361787*^9, 
   3.771432852257772*^9, 3.771438047359571*^9},
 CellLabel->
  "Out[481]=",ExpressionUUID->"5923ff54-a319-4ce7-ba88-be4729dbbf34"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"fn", "\[Equal]", "0"}], " ", ",", " ", 
      RowBox[{
      "0", "\[LessEqual]", " ", "x", " ", "\[LessEqual]", " ", "20"}]}], 
     "}"}], ",", "x"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771323589255928*^9, 3.7713236947152157`*^9}, {
  3.7714328588872957`*^9, 3.771432859075452*^9}},
 CellLabel->
  "In[482]:=",ExpressionUUID->"71af4019-1803-4539-a13c-3e4ac63ae732"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{{3.771323652396459*^9, 3.771323696022785*^9}, 
   3.771361358209425*^9, 3.771414530403081*^9, 3.771414592809062*^9, 
   3.771415646217123*^9, 3.7714299923297787`*^9, 3.771432505547876*^9, {
   3.771432855313332*^9, 3.7714328651696377`*^9}, 3.771438051333921*^9},
 CellLabel->
  "Out[482]=",ExpressionUUID->"4da73a81-184a-4528-a251-a6c1a9822b56"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"min", ",", "max"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NMinValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"fn", ",", "x"}], "]"}], ",", 
         RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "20"}]}], "}"}], 
       ",", "x"}], "]"}], ",", 
     RowBox[{"NMaxValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"fn", ",", "x"}], "]"}], ",", 
         RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "50"}]}], "}"}], 
       ",", "x"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7713258331874437`*^9, 3.771325837962178*^9}, {
   3.771325931161001*^9, 3.7713259860949087`*^9}, {3.771328036896591*^9, 
   3.771328053410677*^9}, 3.771328110380805*^9, {3.771432869487789*^9, 
   3.771432869643629*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"0516a239-adfe-4ac2-a59c-82cffad9f4b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"df", "=", 
  RowBox[{"Rescale", "[", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{"fn", ",", "x"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"min", ",", "max"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771328070009041*^9, 3.7713280700118103`*^9}, 
   3.771328115492894*^9},
 CellLabel->
  "In[319]:=",ExpressionUUID->"076a345a-9eae-4939-a8f1-c110b7c564ed"],

Cell[BoxData[
 RowBox[{"0.5`", "\[VeryThinSpace]", "-", 
  RowBox[{"1.084450425794094`", " ", 
   RowBox[{"Cos", "[", "x", "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"Sin", "[", "x", "]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.771328070677279*^9, 3.7713281173794127`*^9, 
  3.771361363123497*^9, 3.771414534138249*^9, 3.77141459778566*^9, 
  3.77141565395422*^9, 3.771429997568335*^9, 3.771432509458498*^9, 
  3.771432872271888*^9, 3.771438055583243*^9, 3.771510796990053*^9, 
  3.771511142268682*^9},
 CellLabel->
  "Out[319]=",ExpressionUUID->"5dc93b60-5669-4c2b-ad49-361fdd943f9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"df", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", "1.2632578174604474`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", "\[Rule]", "3.7"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771328733139489*^9, 3.771328750593816*^9}, {
  3.771356142252042*^9, 3.7713561432734213`*^9}, {3.771356280443482*^9, 
  3.771356281131152*^9}, {3.771356448693121*^9, 3.77135644941853*^9}, {
  3.771356517268298*^9, 3.7713565678598137`*^9}},
 CellLabel->
  "In[320]:=",ExpressionUUID->"5b782657-0c50-4dd3-9778-83def3758c83"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.23238654180760743`", ",", "0.03517967715117615`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.771328739572707*^9, 3.771328750973914*^9}, 
   3.771356281496126*^9, 3.7713564499606867`*^9, {3.771356540296405*^9, 
   3.771356568306261*^9}, 3.771361365453817*^9, 3.7714145363554707`*^9, 
   3.771414601482572*^9, 3.771415656318308*^9, 3.771429999978614*^9, 
   3.771432511430138*^9, 3.771432874801915*^9, 3.77143805792661*^9, 
   3.771510800611685*^9, 3.771511145669861*^9},
 CellLabel->
  "Out[320]=",ExpressionUUID->"51089df7-57eb-4cc7-8df5-21457b5fad33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"df", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771328076096429*^9, 3.7713280968175*^9}, {
  3.771328190027117*^9, 3.771328194479341*^9}, {3.771328598934383*^9, 
  3.771328600627192*^9}, {3.771432878815249*^9, 3.77143287897095*^9}, {
  3.771511149379848*^9, 3.771511150640579*^9}},
 CellLabel->
  "In[321]:=",ExpressionUUID->"3baf2d2b-ffcc-4742-b1b5-1dc2ea51016b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
eX4p1Hmca+JKBAZqxRfNMzikUEvifr0wdwxeJz7ERvdIIQ+tyBtFpzCQfZgd
JcEgheynDq3+VMIgx61RyXlHEjnrzgjx7sZAzHKq/eWqJKpue/rN4RcVUg7v
vj61IIlOhT+vqS6nQgybWaHbmCRi6ngZ/MmGCvs23E2KBiWRwNCFUzf2U+Hx
WPQ0pVcSdRmHHT6GUSCwvEf6Vosk+uPt+OiJDwU2M1Ya39ZKIn3h37XMuhTw
esx3eblSErm5pwx2b8zDDXv77HuvJRHL66aUGx7zMH3sgX5FriT6njLJclZm
HpxVMn9tZEgiG9D8++7nHNjSjos+iJFE6ZQXDXsPz4Fx/rXUkHuSKCFGiaNz
bAYanj3VafKQROVmtfUs4TMAviU/drlJIu9CLeEj8jOgefIP3xN7SXTF8kFf
q+s0SC37xD/Tk0Rhe5Rj33VOQuZQqkb3IUnUGb0jR3aZBMHmmm4uDUm0kkjh
d96cAI5kWo4kaUn0NSNkoFdsAv5BRFT6Hkm0tf3p8eKFMfjx5PmjV70S6Ljj
kdsxviPQ3ShW5PBVAp3zP3P1dNYwtP/L6+RulUAnolxlLJuHoOZ2OX9gtQRy
OZps/IVrEF7Ydb+yzJZAg0uILFI5ACnxtp270ySQd2PQl8jJfoj7+mu5JkEC
Rad43X3M1Q9hBguH5SIkkOBO0u0vd3vBTWFv57aHBJK/dW6q8nQXXLoct/zW
De8/a5fNz6hvYJ8hyO/qLIFCcwJMKzrw+ymnvFOXtQTyea/a6VHcAWqbhsu5
RyTQj+7TOki4FRQOdPDZa+PtnxxfFvrcDFI3zx5mV5NA9rQJf5YCmoBn7FKY
734JxPJ3pWCS0ACbbYF85ix4/lGm9pttNbBMz3SYgVECEb8E9oTmVwP1yH+O
lf/EkTabDQ9jUiWMvk0rlPojjhaK3wbzFpfD93mpr9/nxRHLHnHTA71l0CVd
9CdqUhwJHXDf68T6DhqSK3XXv4sjksgXj0zfEvjUo+dY3C2ObN7131l2LoLy
fa2hl76II++7w9+YvAqgxNi8kK9ZHIllbbxUKcmF/KD+ji9IHBm/3iPxli0H
sqov/AmqFEd8/sWJnclZkLwywatdhsf7n+cKTUmHSLdlhxd54qiz4VRb7vkE
CM3xDbXOwvXmFf7rlTHwYJi2kCVFHAXm30r42h0F9/giOmrj8PxWzeWvDISD
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
ibenOULXZT/D/wBaruFu
       "]]},
     Annotation[#, "Charting`Private`Tag$354543#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-20, 20}, {0., 0.9999998032121606}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7713280867383327`*^9, 3.7713281199953814`*^9}, {
   3.771328190735353*^9, 3.771328194981758*^9}, 3.7714145392474403`*^9, 
   3.771414603905648*^9, 3.771415660019267*^9, 3.771430002346689*^9, 
   3.771432513400737*^9, {3.771432876838182*^9, 3.7714328793013277`*^9}, 
   3.7715108029367847`*^9, 3.7715111511257553`*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"f1f2323c-05bb-4641-a184-23fffeb1ce77"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7714298636337442`*^9, 
  3.77142987759091*^9}},ExpressionUUID->"e5af9e21-d025-41fb-935e-\
97f8dddce5b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"global", " ", "=", 
  RowBox[{
   RowBox[{"x", "/.", 
    RowBox[{"N", "[", " ", 
     RowBox[{"List", "[", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "20"}], "\[LessEqual]", "x", "\[LessEqual]", "20"}], 
          ",", " ", 
          RowBox[{
           RowBox[{"D", "[", 
            RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
        "x"}], "]"}], "]"}], "]"}]}], " ", "//", " ", "Flatten"}]}]], "Input",\

 CellChangeTimes->{{3.771356181153461*^9, 3.771356188782978*^9}, {
  3.771356226639269*^9, 3.7713562399163446`*^9}, {3.7714328824472733`*^9, 
  3.7714328826592627`*^9}, {3.771511156036551*^9, 3.771511157712549*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"9239faa6-1fdc-4d3f-bebb-d7954ebe0d43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "1.5707963267948966`", ",", 
   "3.141592653589793`", ",", "4.71238898038469`", ",", "6.283185307179586`", 
   ",", "7.853981633974483`", ",", "9.42477796076938`", ",", 
   "10.995574287564276`", ",", "12.566370614359172`", ",", 
   "14.137166941154069`", ",", "15.707963267948966`", ",", 
   "17.27875959474386`", ",", "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7713562405541973`*^9, 3.7713613704911613`*^9, 3.771414606274629*^9, {
   3.771415662890414*^9, 3.771415683893255*^9}, 3.771430004624653*^9, 
   3.771432516005884*^9, 3.7714325554776173`*^9, 3.771432882987668*^9, 
   3.7714516623814583`*^9, 3.771510806138297*^9, 3.771511158674108*^9, {
   3.7715115066604*^9, 3.7715115476861267`*^9}, 3.771511918612764*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"900ce5d1-c4c2-4f0a-9433-c3fac74d97ad"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"global", " ", "=", " ", 
   RowBox[{"Sort", "[", "global", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771512127444367*^9, 3.771512133057764*^9}},
 CellLabel->
  "In[357]:=",ExpressionUUID->"22493958-3a52-494b-81e9-d786fda5e62b"],

Cell[CellGroupData[{

Cell[BoxData["%357"], "Input",
 NumberMarks->False,
 CellLabel->
  "In[358]:=",ExpressionUUID->"2e4f80d3-40c8-463f-80e4-2e4dc808b2eb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "0.`", ",", 
   "1.5707963267948966`", ",", "3.141592653589793`", ",", "4.71238898038469`",
    ",", "6.283185307179586`", ",", "7.853981633974483`", ",", 
   "9.42477796076938`", ",", "10.995574287564276`", ",", 
   "12.566370614359172`", ",", "14.137166941154069`", ",", 
   "15.707963267948966`", ",", "17.27875959474386`", ",", 
   "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{3.771512135874161*^9},
 CellLabel->
  "Out[358]=",ExpressionUUID->"86c97ffc-2708-4e00-9971-5b0d184d3f49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "global", "]"}]], "Input",
 CellChangeTimes->{{3.7715114892133703`*^9, 3.771511502128874*^9}},
 CellLabel->
  "In[359]:=",ExpressionUUID->"d199a575-5580-4947-9398-08946e80b9f1"],

Cell[BoxData["25"], "Output",
 CellChangeTimes->{{3.7715115024455357`*^9, 3.771511549448773*^9}, 
   3.77151214031604*^9},
 CellLabel->
  "Out[359]=",ExpressionUUID->"24fd7c45-f923-4810-a9a3-e16f2eabdef6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"global", " ", "=", " ", 
  RowBox[{"global", "[", 
   RowBox[{"[", 
    RowBox[{"2", ";;", "25"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771511309466632*^9, 3.771511334545426*^9}, {
  3.771511372102702*^9, 3.771511477169753*^9}, {3.771511513388337*^9, 
  3.771511530280521*^9}},
 CellLabel->
  "In[346]:=",ExpressionUUID->"bf49bbdc-609a-4613-9034-c8709f258241"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "1.5707963267948966`", ",", 
   "3.141592653589793`", ",", "4.71238898038469`", ",", "6.283185307179586`", 
   ",", "7.853981633974483`", ",", "9.42477796076938`", ",", 
   "10.995574287564276`", ",", "12.566370614359172`", ",", 
   "14.137166941154069`", ",", "15.707963267948966`", ",", 
   "17.27875959474386`", ",", "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{{3.771511415504369*^9, 3.7715114817270737`*^9}, {
  3.771511518511446*^9, 3.771511550973119*^9}},
 CellLabel->
  "Out[346]=",ExpressionUUID->"97b3e801-6986-4fe0-b70a-d4e41c23bd37"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"global1", " ", "=", " ", 
  RowBox[{"global", "[", 
   RowBox[{"[", 
    RowBox[{"2", ";;", 
     RowBox[{"Length", "[", "global", "]"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771356267325824*^9, 3.771356288522266*^9}, {
   3.771356337267375*^9, 3.771356424629135*^9}, {3.7713564627017393`*^9, 
   3.771356464546112*^9}, 3.7713566910379257`*^9, {3.771356810437937*^9, 
   3.771356833695175*^9}, {3.771356927346311*^9, 3.771356949542562*^9}},
 CellLabel->
  "In[361]:=",ExpressionUUID->"25248866-1d2a-459e-81ea-f5ed1ae3bc84"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "0.`", ",", 
   "1.5707963267948966`", ",", "3.141592653589793`", ",", "4.71238898038469`",
    ",", "6.283185307179586`", ",", "7.853981633974483`", ",", 
   "9.42477796076938`", ",", "10.995574287564276`", ",", 
   "12.566370614359172`", ",", "14.137166941154069`", ",", 
   "15.707963267948966`", ",", "17.27875959474386`", ",", 
   "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{{3.771356410392675*^9, 3.771356425023844*^9}, 
   3.771356487552774*^9, {3.771356829054419*^9, 3.771356834034712*^9}, {
   3.771356935365078*^9, 3.771356949855832*^9}, {3.771357083479854*^9, 
   3.771357095124901*^9}, 3.771361372717682*^9, {3.771414607944412*^9, 
   3.771414625170176*^9}, {3.77141566532675*^9, 3.7714156875525303`*^9}, {
   3.77143000690516*^9, 3.7714300122868023`*^9}, {3.771432517997175*^9, 
   3.7714325626109667`*^9}, 3.7714328924428377`*^9, 3.771451570362102*^9, 
   3.771451667912027*^9, 3.7715108109242563`*^9, 3.7715111654897137`*^9, 
   3.771511559175315*^9, 3.7715121502886467`*^9},
 CellLabel->
  "Out[361]=",ExpressionUUID->"001c1591-3792-4500-8761-bc0fb308893e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"global1", " ", "=", " ", 
  RowBox[{"Insert", "[", 
   RowBox[{"global1", ",", "20", ",", 
    RowBox[{
     RowBox[{"Length", "[", "global1", "]"}], "+", "1"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.7713570996942453`*^9, 3.77135710577901*^9}, {
  3.7713571444846573`*^9, 3.771357188899049*^9}, {3.77151156290378*^9, 
  3.7715115631434603`*^9}},
 CellLabel->
  "In[362]:=",ExpressionUUID->"ab32379d-937e-4f79-abc5-a0cb272f5116"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "0.`", ",", 
   "1.5707963267948966`", ",", "3.141592653589793`", ",", "4.71238898038469`",
    ",", "6.283185307179586`", ",", "7.853981633974483`", ",", 
   "9.42477796076938`", ",", "10.995574287564276`", ",", 
   "12.566370614359172`", ",", "14.137166941154069`", ",", 
   "15.707963267948966`", ",", "17.27875959474386`", ",", 
   "18.84955592153876`", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771357189403902*^9, {3.7714146209219*^9, 3.771414626875404*^9}, {
   3.771415667830345*^9, 3.771415689770337*^9}, 3.7714300139443274`*^9, {
   3.771432520063732*^9, 3.771432564523844*^9}, 3.77143289517514*^9, 
   3.771451572279022*^9, 3.7714516697958393`*^9, 3.771510813012298*^9, 
   3.77151116736207*^9, 3.771511563453813*^9, 3.7715121523689013`*^9},
 CellLabel->
  "Out[362]=",ExpressionUUID->"007e4460-bcd9-4486-8dae-37aaddbffd3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"global", " ", "=", " ", 
  RowBox[{"Insert", "[", 
   RowBox[{"global", ",", 
    RowBox[{"-", "20"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771356956834949*^9, 3.77135697903268*^9}, {
  3.771357037895032*^9, 3.7713570927874203`*^9}, {3.771511538674946*^9, 
  3.771511540727685*^9}},
 CellLabel->
  "In[360]:=",ExpressionUUID->"41648948-bbd4-4d8d-a97c-2f2ddc224c1a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "20"}], ",", 
   RowBox[{"-", "18.84955592153876`"}], ",", 
   RowBox[{"-", "17.27875959474386`"}], ",", 
   RowBox[{"-", "15.707963267948966`"}], ",", 
   RowBox[{"-", "14.137166941154069`"}], ",", 
   RowBox[{"-", "12.566370614359172`"}], ",", 
   RowBox[{"-", "10.995574287564276`"}], ",", 
   RowBox[{"-", "9.42477796076938`"}], ",", 
   RowBox[{"-", "7.853981633974483`"}], ",", 
   RowBox[{"-", "6.283185307179586`"}], ",", 
   RowBox[{"-", "4.71238898038469`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.5707963267948966`"}], ",", "0.`", ",", 
   "1.5707963267948966`", ",", "3.141592653589793`", ",", "4.71238898038469`",
    ",", "6.283185307179586`", ",", "7.853981633974483`", ",", 
   "9.42477796076938`", ",", "10.995574287564276`", ",", 
   "12.566370614359172`", ",", "14.137166941154069`", ",", 
   "15.707963267948966`", ",", "17.27875959474386`", ",", 
   "18.84955592153876`"}], "}"}]], "Output",
 CellChangeTimes->{{3.7713570755168257`*^9, 3.771357093075923*^9}, 
   3.771414622915104*^9, {3.771415670372863*^9, 3.771415685588016*^9}, 
   3.7714300106561537`*^9, {3.771432522090399*^9, 3.77143255863004*^9}, 
   3.771432887402199*^9, 3.771451574897292*^9, 3.771451664626223*^9, 
   3.771510808948587*^9, 3.771511163885764*^9, {3.7715115345423403`*^9, 
   3.771511555267955*^9}, 3.7715121433681087`*^9},
 CellLabel->
  "Out[360]=",ExpressionUUID->"9da76644-eb32-4e59-bc6d-5c3d1293e82d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intervals", " ", "=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"global", ",", "global1"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771357866173201*^9, 3.771357879074415*^9}, {
  3.771357914830361*^9, 3.771357916266556*^9}, {3.77135802153995*^9, 
  3.771358069065687*^9}, {3.771358110042838*^9, 3.771358126260715*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"6e40bdf0-8f35-45e8-aa64-a6230b7f9068"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "20"}], ",", 
     RowBox[{"-", "18.84955592153876`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "18.84955592153876`"}], ",", 
     RowBox[{"-", "17.27875959474386`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "17.27875959474386`"}], ",", 
     RowBox[{"-", "15.707963267948966`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "15.707963267948966`"}], ",", 
     RowBox[{"-", "14.137166941154069`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "14.137166941154069`"}], ",", 
     RowBox[{"-", "12.566370614359172`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "12.566370614359172`"}], ",", 
     RowBox[{"-", "10.995574287564276`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "10.995574287564276`"}], ",", 
     RowBox[{"-", "9.42477796076938`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9.42477796076938`"}], ",", 
     RowBox[{"-", "7.853981633974483`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7.853981633974483`"}], ",", 
     RowBox[{"-", "6.283185307179586`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6.283185307179586`"}], ",", 
     RowBox[{"-", "4.71238898038469`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.71238898038469`"}], ",", 
     RowBox[{"-", "3.141592653589793`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.141592653589793`"}], ",", 
     RowBox[{"-", "1.5707963267948966`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.5707963267948966`"}], ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "1.5707963267948966`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.5707963267948966`", ",", "3.141592653589793`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.141592653589793`", ",", "4.71238898038469`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.71238898038469`", ",", "6.283185307179586`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6.283185307179586`", ",", "7.853981633974483`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7.853981633974483`", ",", "9.42477796076938`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.42477796076938`", ",", "10.995574287564276`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10.995574287564276`", ",", "12.566370614359172`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12.566370614359172`", ",", "14.137166941154069`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14.137166941154069`", ",", "15.707963267948966`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15.707963267948966`", ",", "17.27875959474386`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17.27875959474386`", ",", "18.84955592153876`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18.84955592153876`", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.771357879430983*^9, 3.771357916517865*^9, {3.7713580337429123`*^9, 
   3.7713580694960957`*^9}, 3.7713581134825563`*^9, 3.77136124251892*^9, {
   3.7714146127431097`*^9, 3.771414630715131*^9}, {3.7714156727776537`*^9, 
   3.771415692368663*^9}, 3.771418324452568*^9, 3.7714300165930967`*^9, 
   3.7714325240972147`*^9, 3.771432569185072*^9, 3.771432898948593*^9, {
   3.771451653805932*^9, 3.771451672282604*^9}, 3.771510816451548*^9, 
   3.771511171659788*^9, 3.7715115706192427`*^9, 3.771512156992456*^9},
 CellLabel->
  "Out[363]=",ExpressionUUID->"d53593c1-15b2-4aca-93d1-c92ce69dc187"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771358062467918*^9, 
  3.771358063521922*^9}},ExpressionUUID->"0b548039-df49-4888-917f-\
64948102f565"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dont", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Mean", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"df", "/.", " ", 
        RowBox[{"{", 
         RowBox[{"x", "\[Rule]", " ", "x1"}], "}"}]}], " ", ",", " ", 
       RowBox[{"{", 
        RowBox[{"x1", ",", 
         RowBox[{"intervals", "[", 
          RowBox[{"[", 
           RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
         RowBox[{"intervals", "[", 
          RowBox[{"[", 
           RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "0.01"}], "}"}]}], 
      "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", 
      RowBox[{"Length", "[", "intervals", "]"}]}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.771357409893244*^9, 3.771357420744392*^9}, {
  3.771357561944417*^9, 3.771357641062744*^9}, {3.771358133533205*^9, 
  3.771358135500606*^9}, {3.77135819962365*^9, 3.7713582475749693`*^9}, {
  3.7713583035869703`*^9, 3.7713583076628857`*^9}, {3.771414451788865*^9, 
  3.771414471929306*^9}, {3.77141463982899*^9, 3.771414657866356*^9}, {
  3.7714151647367907`*^9, 3.7714151660056067`*^9}, {3.7714159834739447`*^9, 
  3.771416017264042*^9}},
 CellLabel->
  "In[364]:=",ExpressionUUID->"2ec47477-232d-4d05-981e-c2dfc84acc04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.8647730420350943`", ",", "0.184489833837054`", ",", 
   "0.8155105649014248`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014248`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014248`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014248`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014247`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014247`", ",", "0.18448983383705403`", ",", 
   "0.8155105649014247`", ",", "0.184489833837054`", ",", 
   "0.8155105649014248`", ",", "0.184489833837054`", ",", 
   "0.8155105649014247`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014247`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014247`", ",", "0.18448983383705406`", ",", 
   "0.8155105649014247`", ",", "0.1353617689672962`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771358250611609*^9, {3.771414632980228*^9, 3.771414658100532*^9}, 
   3.771415166484744*^9, 3.771415695254541*^9, {3.771415984591002*^9, 
   3.7714160176286163`*^9}, 3.771418327627788*^9, 3.77143001953194*^9, 
   3.771432540894302*^9, 3.771432571944818*^9, 3.7714329014859123`*^9, 
   3.771451675469871*^9, 3.771510820186013*^9, 3.771511197686778*^9, 
   3.77151157474072*^9, 3.771512160179297*^9},
 CellLabel->
  "Out[364]=",ExpressionUUID->"ab3f8067-745a-4d08-83c8-1f6d8c5b9676"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{"intervals", ",", "dont"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714146879568872`*^9, 3.771414729279561*^9}, {
  3.771414975628818*^9, 3.771414978562627*^9}, {3.771415155877564*^9, 
  3.771415174525072*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"a754bdb0-c4cc-4081-b4c3-993825bf26e6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0.`"}], "}"}], "\[Rule]", "0.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "1.5707963267948966`"}], "}"}], "\[Rule]", 
    "0.18448983383705403`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.5707963267948966`", ",", "3.141592653589793`"}], "}"}], 
    "\[Rule]", "0.8155105649014247`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.141592653589793`", ",", "4.71238898038469`"}], "}"}], 
    "\[Rule]", "0.184489833837054`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.71238898038469`", ",", "6.283185307179586`"}], "}"}], 
    "\[Rule]", "0.8155105649014248`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.283185307179586`", ",", "7.853981633974483`"}], "}"}], 
    "\[Rule]", "0.184489833837054`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.853981633974483`", ",", "9.42477796076938`"}], "}"}], 
    "\[Rule]", "0.8155105649014247`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.42477796076938`", ",", "10.995574287564276`"}], "}"}], 
    "\[Rule]", "0.18448983383705406`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10.995574287564276`", ",", "12.566370614359172`"}], "}"}], 
    "\[Rule]", "0.8155105649014247`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.566370614359172`", ",", "14.137166941154069`"}], "}"}], 
    "\[Rule]", "0.18448983383705406`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"14.137166941154069`", ",", "15.707963267948966`"}], "}"}], 
    "\[Rule]", "0.8155105649014247`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.707963267948966`", ",", "17.27875959474386`"}], "}"}], 
    "\[Rule]", "0.18448983383705406`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.27875959474386`", ",", "18.84955592153876`"}], "}"}], 
    "\[Rule]", "0.8155105649014247`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.84955592153876`", ",", "50"}], "}"}], "\[Rule]", 
    "0.49884873514209926`"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.771415176524214*^9, 3.7714157023462152`*^9, 
  3.7714160033331003`*^9, 3.771418330313677*^9, 3.7714300219962587`*^9, 
  3.771432574897915*^9, 3.771432903940028*^9, 3.7715108239544287`*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"dad07f74-8ed9-4e38-8f86-03157a6f589c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"df", " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", " ", "1.5708"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7714160441269913`*^9, 3.771416069287545*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"50d9769b-a53b-4f78-bb52-fa468a544920"],

Cell[BoxData["0.5000033519229581`"], "Output",
 CellChangeTimes->{3.771416069894107*^9, 3.771418332739627*^9, 
  3.7714300242833347`*^9, 3.771432577986721*^9, 3.771432906273065*^9, 
  3.771510829435676*^9},
 CellLabel->
  "Out[296]=",ExpressionUUID->"84537548-d5dc-4550-8523-11840274413c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PolynomialQ", "[", 
  RowBox[{"fn", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.771415706759684*^9, 3.771415745518053*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"bbda719f-7e04-438d-b245-76cb62819c8e"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.771415745921433*^9, 3.771418334933792*^9, 
  3.771430026000895*^9, 3.77143257990079*^9, 3.771432908246958*^9, 
  3.7715108317737017`*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"75852f1e-f065-4dcc-b105-f9a7e0dcf66f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "intervals2", "]"}]], "Input",
 CellChangeTimes->{{3.771416828817286*^9, 3.771416836358708*^9}, {
  3.7714176217641773`*^9, 3.771417628448468*^9}, {3.7714181880803423`*^9, 
  3.771418192908437*^9}, {3.771418543361876*^9, 3.771418556942236*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"5a7e2bbd-baef-4be3-9163-1c2e6e4ae719"],

Cell[BoxData["ClearAll"], "Input",
 CellChangeTimes->{{3.7714185660155497`*^9, 3.771418578502442*^9}},
 EmphasizeSyntaxErrors->
  True,ExpressionUUID->"29677177-0da3-440c-9830-2658ed6f5250"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intervals1", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"x", "+", "0.1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "1", ",", "0.1"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.771415786020195*^9, 3.771415801300803*^9}, {
  3.7714158342483397`*^9, 3.771415858103774*^9}, {3.771415926077382*^9, 
  3.771415948306821*^9}, {3.771416105587336*^9, 3.7714162368781767`*^9}, {
  3.771416269885417*^9, 3.7714163134969397`*^9}, {3.771416559819285*^9, 
  3.771416563758809*^9}, {3.771416747643005*^9, 3.771416759566915*^9}, {
  3.771416817386682*^9, 3.7714168548725233`*^9}, {3.771417202385117*^9, 
  3.771417211845683*^9}, {3.771418027178049*^9, 3.771418029359887*^9}, {
  3.771418168632791*^9, 3.771418203740679*^9}, {3.771418536152557*^9, 
  3.7714185379982843`*^9}, {3.771418596584548*^9, 3.771418610028718*^9}, {
  3.771423528556357*^9, 3.771423562512623*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"879446b4-246f-4f9d-bd81-c77ae2512165"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.2`", ",", "0.30000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.30000000000000004`", ",", "0.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.4`", ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5`", ",", "0.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6000000000000001`", ",", "0.7000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7000000000000001`", ",", "0.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.8`", ",", "0.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.9`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "1.1`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.77141843038945*^9, {3.771418583908828*^9, 3.771418610261656*^9}, 
   3.771423531254575*^9, 3.771423562946062*^9, 3.7714300308592463`*^9},
 CellLabel->
  "Out[300]=",ExpressionUUID->"94619043-0e34-4445-97bf-52d1ecddee6c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"strings", " ", "=", " ", 
  RowBox[{"List", "[", 
   RowBox[{
   "\"\<a very sharp decrease\>\"", ",", "\"\<a sharp decrease\>\"", ",", 
    "\"\<a smooth decline\>\"", ",", "\"\<still a smooth decline\>\"", ",", 
    "\"\<still a smooth decline\>\"", ",", "\"\<a very smooth increase\>\"", 
    ",", "\"\<a very smooth increase\>\"", ",", "\"\<a smooth increase\>\"", 
    ",", "\"\<a sharp increase\>\"", ",", "\"\<a very sharp increase\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771416160443164*^9, 3.7714161614834347`*^9}, {
  3.771416907548193*^9, 3.7714169150844803`*^9}, {3.7714169600625353`*^9, 
  3.7714170240814247`*^9}, {3.7714170644313517`*^9, 3.771417179265423*^9}, {
  3.7714172403976297`*^9, 3.771417266965489*^9}, {3.771430113958514*^9, 
  3.771430132866126*^9}, {3.771430171994989*^9, 3.771430185618541*^9}, {
  3.771430259799593*^9, 3.771430274956482*^9}, {3.771432267026339*^9, 
  3.771432303257762*^9}},
 CellLabel->
  "In[352]:=",ExpressionUUID->"5c09c633-adc7-4c0a-b1f5-d56d8e998277"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a very sharp decrease\"\>", ",", "\<\"a sharp decrease\"\>", 
   ",", "\<\"a smooth decline\"\>", ",", "\<\"still a smooth decline\"\>", 
   ",", "\<\"still a smooth decline\"\>", 
   ",", "\<\"a very smooth increase\"\>", 
   ",", "\<\"a very smooth increase\"\>", ",", "\<\"a smooth increase\"\>", 
   ",", "\<\"a sharp increase\"\>", ",", "\<\"a very sharp increase\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.771415801926223*^9, 3.771415858646538*^9, 3.771415948996909*^9, {
   3.771417254619454*^9, 3.7714172673687153`*^9}, 3.771418313082178*^9, 
   3.771430033190867*^9, 3.771430185941656*^9, 3.771432309160499*^9, 
   3.771510836512248*^9, 3.7715115833812637`*^9},
 CellLabel->
  "Out[352]=",ExpressionUUID->"60ba79ea-4d1a-45a2-84ff-d4dd582bed22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intervals1", " ", "=", " ", 
  RowBox[{"Drop", "[", 
   RowBox[{"intervals1", ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771418065369179*^9, 3.771418080077443*^9}, {
  3.7714181139469147`*^9, 3.771418127906067*^9}},
 CellLabel->
  "In[201]:=",ExpressionUUID->"edf915a4-5417-49c9-9c04-17245485060d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.2`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.2`", ",", "0.30000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.30000000000000004`", ",", "0.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.4`", ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5`", ",", "0.6`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6000000000000001`", ",", "0.7000000000000001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7000000000000001`", ",", "0.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.8`", ",", "0.9`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.9`", ",", "1.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771418128356349*^9, 3.771418317336314*^9, 
  3.77141861727524*^9},
 CellLabel->
  "Out[201]=",ExpressionUUID->"f1af2301-ac63-4894-a88a-a9f61f7e1da1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exponent", "[", 
  RowBox[{"x", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.771435475648163*^9, 3.771435527170011*^9}},
 CellLabel->
  "In[402]:=",ExpressionUUID->"c08beb9b-b2ba-46d5-95d5-0e0a79200454"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.771435484823978*^9, 3.7714355275091743`*^9}},
 CellLabel->
  "Out[402]=",ExpressionUUID->"254cc3b1-b16a-47f2-932e-b05b3ea2b0b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"final", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"strings", "[", 
       RowBox[{"[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"dont", "[", 
             RowBox[{"[", "x", "]"}], "]"}], "\[GreaterEqual]", "  ", "0.5"}],
            ")"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Round", "[", 
              RowBox[{
               RowBox[{"dont", "[", 
                RowBox[{"[", "x", "]"}], "]"}], ",", "0.1"}], "]"}], "*", 
             "10"}], ")"}], "+", "1"}], ",", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Round", "[", 
             RowBox[{
              RowBox[{"dont", "[", 
               RowBox[{"[", "x", "]"}], "]"}], ",", "0.1"}], "]"}], "*", 
            "10"}], " ", ")"}]}], "]"}], "]"}], "]"}], ",", 
      "\"\< that ends at x = \>\"", ",", 
      RowBox[{"ToString", "[", 
       RowBox[{"intervals", "[", 
        RowBox[{"[", 
         RowBox[{"x", ",", "2"}], "]"}], "]"}], "]"}], ",", 
      "\"\< then \>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "1", ",", 
      RowBox[{"Length", "[", "dont", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7714235911315603`*^9, 3.771423592928247*^9}, {
   3.77142364717275*^9, 3.771423684037385*^9}, {3.7714237344584312`*^9, 
   3.7714239453478203`*^9}, {3.771423980779367*^9, 3.771424035502253*^9}, {
   3.7714242896413*^9, 3.771424300524784*^9}, {3.771424403117094*^9, 
   3.7714244152980137`*^9}, {3.771427987910164*^9, 3.77142815105595*^9}, {
   3.771428218503283*^9, 3.771428327639176*^9}, {3.771428361450807*^9, 
   3.7714283662152033`*^9}, {3.771428618635089*^9, 3.771428675752614*^9}, {
   3.771428784677411*^9, 3.771428805985574*^9}, {3.771428942426375*^9, 
   3.771428969670545*^9}, {3.771429035506621*^9, 3.7714290514469967`*^9}, {
   3.7714291193778753`*^9, 3.7714291717682743`*^9}, {3.771429220036042*^9, 
   3.771429248727008*^9}, {3.771429303768512*^9, 3.771429352036594*^9}, {
   3.77142938835989*^9, 3.771429409378704*^9}, {3.771429457473934*^9, 
   3.771429458727359*^9}, 3.771429521048533*^9, {3.771429619378756*^9, 
   3.771429768152532*^9}},
 CellLabel->
  "In[353]:=",ExpressionUUID->"f7ab4dc6-3c61-4a41-9e88-452790b848d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a very sharp increase\"\>", 
     ",", "\<\" that ends at x = \"\>", ",", "\<\"-18.8496\"\>", 
     ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-17.2788\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-15.708\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-14.1372\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-12.5664\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-10.9956\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-9.42478\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-7.85398\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-6.28319\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-4.71239\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-3.14159\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"-1.5708\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"still a smooth decline\"\>", 
     ",", "\<\" that ends at x = \"\>", ",", "\<\"1.5708\"\>", 
     ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"3.14159\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"4.71239\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"6.28319\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"7.85398\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"9.42478\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"10.9956\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"12.5664\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"14.1372\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"15.708\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp decrease\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"17.2788\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a sharp increase\"\>", ",", "\<\" that ends at x = \"\>", 
     ",", "\<\"18.8496\"\>", ",", "\<\" then \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a very sharp decrease\"\>", 
     ",", "\<\" that ends at x = \"\>", ",", "\<\"20\"\>", 
     ",", "\<\" then \"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7714238131349773`*^9, 3.7714238284741163`*^9}, {
   3.7714240115638742`*^9, 3.771424037103985*^9}, 3.7714243010862494`*^9, {
   3.7714244058482723`*^9, 3.771424415665495*^9}, 3.771427668004951*^9, 
   3.7714281526766653`*^9, 3.771428329181652*^9, 3.771428367312931*^9, 
   3.771428676932206*^9, 3.771428806568665*^9, {3.771428945198241*^9, 
   3.771428989569784*^9}, {3.771429036401759*^9, 3.771429052117231*^9}, {
   3.771429126238387*^9, 3.7714291722725763`*^9}, {3.7714292242114067`*^9, 
   3.7714292493736887`*^9}, {3.771429309894916*^9, 3.7714293524721746`*^9}, 
   3.771429411526991*^9, 3.7714294590036707`*^9, 3.771429521921492*^9, {
   3.77142968369945*^9, 3.7714297687317543`*^9}, 3.771430039938295*^9, 
   3.7714301888329973`*^9, 3.771432313212846*^9, 3.7714325887859364`*^9, 
   3.7714329142425127`*^9, 3.771433153581752*^9, 3.7715108414559317`*^9, 
   3.771511588179666*^9},
 CellLabel->
  "Out[353]=",ExpressionUUID->"45fedfd6-0524-45f2-8bac-b620d9362b4f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"output", " ", "=", " ", 
  "\"\<This plot describes the function \>\""}]], "Input",
 CellChangeTimes->{{3.7714295590058327`*^9, 
  3.7714296086318903`*^9}},ExpressionUUID->"0d3db72e-85e7-41c2-94fb-\
d58211aecc63"],

Cell[BoxData[
 RowBox[{"Speak", "[", 
  RowBox[{"StringJoin", "[", "final", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771429524366145*^9, 3.771429539395279*^9}, {
  3.771432337252893*^9, 3.7714323408178453`*^9}, {3.7714332051501923`*^9, 
  3.771433207114277*^9}},
 CellLabel->
  "In[394]:=",ExpressionUUID->"40cb993f-cce3-4aae-b2fe-bebdf4fe9112"],

Cell[BoxData[
 RowBox[{"Speak", "[", "final", "]"}]], "Input",
 CellChangeTimes->{{3.771429452498271*^9, 3.771429472414832*^9}},
 CellLabel->
  "In[241]:=",ExpressionUUID->"83774443-11f2-46f4-8524-b2ffff9ddf9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "strings", "]"}]], "Input",
 CellChangeTimes->{{3.771418137588291*^9, 3.771418146521826*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"b214b57f-6e01-4ed6-934a-ef4be8a67f02"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.771418146871306*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"4938ec1f-fdea-425d-a5a4-887edbaa39b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "intervals1", "]"}]], "Input",
 CellChangeTimes->{{3.7714181484676867`*^9, 3.7714181578461437`*^9}},
 CellLabel->
  "In[202]:=",ExpressionUUID->"d5e30755-5105-41ba-8208-8ae079460a7a"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.771418158265257*^9, 3.7714186209377537`*^9},
 CellLabel->
  "Out[202]=",ExpressionUUID->"fd7d2fec-8c17-4290-8642-5170747c3d83"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{"intervals1", ",", "strings"}], "]"}]], "Input",
 CellChangeTimes->{{3.771418017681107*^9, 3.7714180465113*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"8da7b48f-450d-41ac-bd11-d6d8cbf19ea1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.1`"}], "}"}], 
    "\[Rule]", "\<\"a very sharp increase\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.1`", ",", "0.2`"}], "}"}], 
    "\[Rule]", "\<\"a sharp increase\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.2`", ",", "0.30000000000000004`"}], "}"}], 
    "\[Rule]", "\<\"a smooth increase\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.30000000000000004`", ",", "0.4`"}], "}"}], 
    "\[Rule]", "\<\"no change\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.4`", ",", "0.5`"}], "}"}], 
    "\[Rule]", "\<\"no change at all\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.5`", ",", "0.6`"}], "}"}], 
    "\[Rule]", "\<\"a very smooth increase\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.6000000000000001`", ",", "0.7000000000000001`"}], "}"}], 
    "\[Rule]", "\<\"a very smooth decline\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.7000000000000001`", ",", "0.8`"}], "}"}], 
    "\[Rule]", "\<\"a smooth decline\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.8`", ",", "0.9`"}], "}"}], 
    "\[Rule]", "\<\"a sharp decline\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.9`", ",", "1.`"}], "}"}], 
    "\[Rule]", "\<\"a very sharp decline\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7714186260934677`*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"6810bd8a-b249-4e31-b20e-6ba2a2436237"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771419174999713*^9, 3.771419177959682*^9}, {
  3.771423187602721*^9, 
  3.771423211635015*^9}},ExpressionUUID->"2043f910-8c3c-425b-a543-\
80db6ce18b9f"],

Cell[CellGroupData[{

Cell[BoxData["dont"], "Input",
 CellChangeTimes->{{3.7714235089708147`*^9, 3.771423510586226*^9}},
 CellLabel->
  "In[529]:=",ExpressionUUID->"396483f4-04ba-469f-9b99-a51b2d39ff02"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.8163413184929691`", ",", "0.22357971388648237`", ",", 
   "0.6707290674153223`", ",", "0.42900691710315436`", ",", 
   "0.5816870124610847`", ",", "0.3066846899423367`", ",", 
   "0.7867866247388716`", ",", "0.18378673157110123`", ",", 
   "0.7609719906973563`", ",", "0.4954418337839443`"}], "}"}]], "Output",
 CellChangeTimes->{3.771423511158897*^9, 3.7714511031297398`*^9},
 CellLabel->
  "Out[529]=",ExpressionUUID->"e06c8fcc-5a15-4075-974e-89ceeb9f71cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771419004056076*^9, 
  3.771419005233157*^9}},ExpressionUUID->"74fd6a26-4b41-4653-b985-\
f26a96717496"],

Cell[BoxData[
 TemplateBox[{
  "AssociationThread","idim",
   "\:f3b5\!\({{0.`, 0.2`, 0}, {0.2`, 0.4`, 0}, {0.4`, 0.6000000000000001`, \
0}, {0.6000000000000001`, 0.8`, 0}, {0.8`, 1.`, 0}}\) and \!\({\\\"\\<a very \
sharp increase\\>\\\", \\\"\\<a sharp increase\\>\\\", \\\"\\<a smooth \
increase\\>\\\", \\\"\\<no change\\>\\\", \\\"\\<no change at all\\>\\\", \
\\\"\\<a very smooth increase\\>\\\", \\\"\\<a very smooth decline\\>\\\", \\\
\"\\<a smooth decline\\>\\\", \\\"\\<a sharp decline\\>\\\", \\\"\\<a very \
sharp decline\\>\\\"}\) must have the same length.\:f3b5",2,176,54,
   26180703446351450224,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.771418047230419*^9, 3.771418132944004*^9, 
  3.7714186239332848`*^9},ExpressionUUID->"96fb846a-3727-4cd0-89af-\
966fee3c8d7b"],

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.2`", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.2`", ",", "0.4`", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4`", ",", "0.6000000000000001`", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.6000000000000001`", ",", "0.8`", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8`", ",", "1.`", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a very sharp increase\"\>", ",", "\<\"a sharp increase\"\>", 
     ",", "\<\"a smooth increase\"\>", ",", "\<\"no change\"\>", 
     ",", "\<\"no change at all\"\>", ",", "\<\"a very smooth increase\"\>", 
     ",", "\<\"a very smooth decline\"\>", ",", "\<\"a smooth decline\"\>", 
     ",", "\<\"a sharp decline\"\>", ",", "\<\"a very sharp decline\"\>"}], 
    "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.771418047240333*^9, 3.77141813295383*^9},
 CellLabel->
  "Out[176]=",ExpressionUUID->"8da363d4-2d67-4c16-909e-20a954087871"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "f", "]"}]], "Input",
 CellChangeTimes->{{3.7714515950431137`*^9, 3.771451599967477*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"3e05b26a-83ee-4aaa-956f-2a74d78697e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"xa_", ",", "na_", ",", "sa_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "df", ",", "dont", ",", "e", ",", "expr", ",", "final", ",", "fn", ",", 
      "fn1", ",", "global", ",", "global1", ",", "HashTable", ",", 
      "intervals", ",", "intervals1", ",", "intervals2", ",", "list", ",", 
      "max", ",", "max1", ",", "min", ",", "min1", ",", "n", ",", "opts", ",",
       "s", ",", "sin", ",", "SSin", ",", "strings", ",", "uspec", ",", "x3", 
      ",", "global2", ",", "dal", ",", "global3", ",", "da", ",", "hio", ",", 
      "final1", ",", "doit", ",", "expression", ",", "f1", ",", "hey", ",", 
      "hio1", ",", "go", ",", "hey1", ",", "finala", ",", "nice"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expression", " ", "=", " ", 
      RowBox[{"ToExpression", "[", "xa", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"doit", " ", "=", " ", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"\"\<This function plots \>\"", ",", "xa", ",", "\"\<. \>\""}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"hey", " ", "=", " ", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{"f1", " ", "=", " ", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{"hey1", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Exponent", "[", 
         RowBox[{"expression", ",", "x"}], "]"}], "\[NotEqual]", " ", "0"}], 
       " ", ",", 
       RowBox[{"f1", " ", "=", " ", 
        RowBox[{"StringJoin", "[", 
         RowBox[{
         "\"\<This function is polynomial. \>\"", ",", 
          "\"\<The exponent of this function is \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"Exponent", "[", 
            RowBox[{"expression", ",", "x"}], "]"}], "]"}], ",", 
          "\"\<. \>\""}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"FunctionPeriod", "[", 
         RowBox[{"expression", " ", ",", "x"}], "]"}], "\[NotEqual]", " ", 
        "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"hey1", "=", 
        RowBox[{"StringJoin", "[", " ", 
         RowBox[{
         "\"\<This function is Periodic so probably trigonometric with a \
period of \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"FunctionPeriod", "[", 
            RowBox[{"expression", " ", ",", "x"}], "]"}], "]"}], ",", 
          "\"\<. \>\""}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"fn", " ", "=", " ", "expression"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"da", " ", "=", " ", 
      RowBox[{"Plot", "[", 
       RowBox[{"fn", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "na", ",", "sa"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "da", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"max", " ", "=", " ", 
      RowBox[{
       RowBox[{"x", "/.", " ", 
        RowBox[{"N", "[", 
         RowBox[{"List", "[", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"na", "\[LessEqual]", "x", "\[LessEqual]", "sa"}], ",", 
              " ", 
              RowBox[{
               RowBox[{"D", "[", 
                RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}], ",", 
              RowBox[{
               RowBox[{
                SubscriptBox["\[PartialD]", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", "2"}], "}"}]], "fn"}], "\[LessEqual]", 
               "0"}]}], "}"}], ",", "x"}], "]"}], "]"}], "]"}]}], "//", 
       "Flatten"}]}], ";", "\[IndentingNewLine]", " ", 
     RowBox[{"min", "=", " ", 
      RowBox[{
       RowBox[{"x", "/.", "  ", 
        RowBox[{"N", "[", 
         RowBox[{"List", "[", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"na", "\[LessEqual]", "x", "\[LessEqual]", "sa"}], ",", 
              " ", 
              RowBox[{
               RowBox[{"D", "[", 
                RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}], ",", 
              RowBox[{
               RowBox[{
                SubscriptBox["\[PartialD]", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", "2"}], "}"}]], "fn"}], "\[GreaterEqual]", 
               " ", "0"}]}], "}"}], ",", "x"}], "]"}], "]"}], "]"}]}], " ", "//",
        " ", "Flatten"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"nice", " ", "=", " ", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"\"\<This function has  a total of \>\"", ",", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"Length", "[", "max", "]"}], "+", 
          RowBox[{"Length", "[", "min", "]"}]}], "]"}], ",", 
        "\"\< extremas . \>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"max1", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "max", "\[LeftDoubleBracket]", "x3", "\[RightDoubleBracket]"}], 
           ",", 
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{"fn", "/.", " ", 
              RowBox[{"x", "\[Rule]", " ", 
               RowBox[{
               "max", "\[LeftDoubleBracket]", "x3", 
                "\[RightDoubleBracket]"}]}]}], ",", "0.0001"}], "]"}]}], 
          "}"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x3", ",", "1", ",", 
          RowBox[{"Length", "[", "max", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"max1", "=", "  ", 
      RowBox[{"N", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"max1", ",", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min1", " ", "=", 
      RowBox[{"N", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "min", "\[LeftDoubleBracket]", "x3", "\[RightDoubleBracket]"}],
                ",", 
               RowBox[{"Round", "[", 
                RowBox[{
                 RowBox[{"fn", "/.", 
                  RowBox[{"x", "\[Rule]", " ", 
                   RowBox[{
                   "min", "\[LeftDoubleBracket]", "x3", 
                    "\[RightDoubleBracket]"}]}]}], ",", "0.0001"}], "]"}]}], 
              "}"}], "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"x3", ",", "1", ",", 
             RowBox[{"Length", "[", "min", "]"}]}], "}"}]}], "]"}], "]"}], 
        ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", "max"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NMinValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"D", "[", 
             RowBox[{"fn", ",", "x"}], "]"}], ",", 
            RowBox[{"na", "\[LessEqual]", "x", "\[LessEqual]", "sa"}]}], 
           "}"}], ",", "x"}], "]"}], ",", 
        RowBox[{"NMaxValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"D", "[", 
             RowBox[{"fn", ",", "x"}], "]"}], ",", 
            RowBox[{"na", "\[LessEqual]", "x", "\[LessEqual]", "sa"}]}], 
           "}"}], ",", "x"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"df", "=", 
      RowBox[{"Rescale", "[", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{"fn", ",", "x"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"min", ",", "max"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"global", " ", "=", 
      RowBox[{
       RowBox[{"x", "/.", 
        RowBox[{"N", "[", " ", 
         RowBox[{"List", "[", 
          RowBox[{"Solve", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"na", "\[LessEqual]", "x", "\[LessEqual]", "sa"}], ",", 
              " ", 
              RowBox[{
               RowBox[{"D", "[", 
                RowBox[{"fn", ",", "x"}], "]"}], "\[Equal]", "0"}]}], "}"}], 
            ",", "x"}], "]"}], "]"}], "]"}]}], " ", "//", " ", "Flatten"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"global", " ", "=", " ", 
      RowBox[{"Sort", "[", "global", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"global2", " ", "=", " ", 
      RowBox[{"Insert", "[", 
       RowBox[{"global", ",", "na", ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"global1", " ", "=", " ", 
      RowBox[{"global2", "[", 
       RowBox[{"[", 
        RowBox[{"2", ";;", 
         RowBox[{"Length", "[", "global2", "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"global3", " ", "=", " ", 
      RowBox[{"Insert", "[", 
       RowBox[{"global1", ",", "sa", ",", 
        RowBox[{
         RowBox[{"Length", "[", "global1", "]"}], "+", "1"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"intervals", " ", "=", " ", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"global2", ",", "global3"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "dal", " ", "=", " ", 
      "\"\<A proposed description of this plot based on the derivatives and \
extremas : \>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{"dont", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Mean", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"df", "/.", " ", 
            RowBox[{"{", 
             RowBox[{"x", "\[Rule]", " ", "x1"}], "}"}]}], " ", ",", " ", 
           RowBox[{"{", 
            RowBox[{"x1", ",", 
             RowBox[{"intervals", "[", 
              RowBox[{"[", 
               RowBox[{"n", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"intervals", "[", 
              RowBox[{"[", 
               RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "0.01"}], "}"}]}], 
          "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "intervals", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"strings", " ", "=", " ", 
      RowBox[{"List", "[", 
       RowBox[{
       "\"\<a very sharp decrease\>\"", ",", "\"\<a sharp decrease\>\"", ",", 
        "\"\<a smooth decline\>\"", ",", "\"\<still a smooth decline\>\"", 
        ",", "\"\<still a smooth decline/increase or most likely no change at \
all\>\"", ",", "\"\<a very smooth increase\>\"", ",", 
        "\"\<a very smooth increase\>\"", ",", "\"\<a smooth increase\>\"", 
        ",", "\"\<a sharp increase\>\"", ",", 
        "\"\<a very sharp increase\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"final", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"strings", "[", 
           RowBox[{"[", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"dont", "[", 
                   RowBox[{"[", "x", "]"}], "]"}], "\[GreaterEqual]", "  ", 
                  "0.5"}], ")"}], "||", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"dont", "[", 
                   RowBox[{"[", "x", "]"}], "]"}], " ", "<", " ", "0.1"}], 
                 ")"}]}], ")"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{
                   RowBox[{"dont", "[", 
                    RowBox[{"[", "x", "]"}], "]"}], ",", "0.1"}], "]"}], "*", 
                 "10"}], ")"}], "+", "1"}], ",", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Round", "[", 
                 RowBox[{
                  RowBox[{"dont", "[", 
                   RowBox[{"[", "x", "]"}], "]"}], ",", "0.1"}], "]"}], "*", 
                "10"}], " ", ")"}]}], "]"}], "]"}], "]"}], ",", 
          "\"\< that ends at x = \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"intervals", "[", 
            RowBox[{"[", 
             RowBox[{"x", ",", "2"}], "]"}], "]"}], "]"}], ",", 
          "\"\< then \>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", 
          RowBox[{"Length", "[", "dont", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"final1", " ", "=", " ", 
      RowBox[{"final", "//", " ", "Flatten"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"doit", " ", "=", " ", 
      RowBox[{"StringJoin", "[", 
       RowBox[{
       "doit", ",", "hey", ",", "f1", ",", "hey1", ",", "nice", ",", "dal", 
        ",", "final1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"finala", " ", "=", " ", 
      RowBox[{"StringTake", "[", 
       RowBox[{"doit", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{
           RowBox[{"Length", "[", "doit", "]"}], "-", "6"}]}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "finala", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7714338922531347`*^9, 3.771433933472761*^9}, {
   3.771435986159423*^9, 3.771435997049059*^9}, {3.771436038173429*^9, 
   3.7714361357166767`*^9}, {3.771449668944705*^9, 3.7714496870447598`*^9}, {
   3.771449764127404*^9, 3.771449828490973*^9}, {3.771449870010775*^9, 
   3.7714498715077667`*^9}, {3.771449996763473*^9, 3.771450000377808*^9}, {
   3.7714500361368513`*^9, 3.771450039294137*^9}, {3.7714500897417593`*^9, 
   3.771450285251273*^9}, {3.771450376763123*^9, 3.771450379417202*^9}, {
   3.7714504813255587`*^9, 3.771450491049778*^9}, {3.771450546450799*^9, 
   3.771450722302782*^9}, {3.7714507559605837`*^9, 3.771450785614635*^9}, {
   3.771450927681573*^9, 3.771450928012857*^9}, {3.771450962302286*^9, 
   3.7714509645217047`*^9}, {3.7714510212072573`*^9, 3.771451021321497*^9}, {
   3.771451077542698*^9, 3.771451087737114*^9}, {3.7714511322872477`*^9, 
   3.771451137516972*^9}, 3.7714511678012733`*^9, {3.771451223469222*^9, 
   3.771451249346322*^9}, 3.771451332519463*^9, {3.771451382406981*^9, 
   3.771451429015078*^9}, 3.7714514637388*^9, {3.771451495795895*^9, 
   3.7714515393615503`*^9}, {3.771451631710032*^9, 3.771451634609861*^9}, {
   3.771451688004692*^9, 3.7714517353975697`*^9}, {3.77145184176814*^9, 
   3.7714519027179823`*^9}, {3.771451936905806*^9, 3.771451952765946*^9}, {
   3.771451985577317*^9, 3.771452149470908*^9}, {3.771453673638578*^9, 
   3.771453723327394*^9}, {3.771453987293953*^9, 3.771454023901787*^9}, {
   3.771454058756233*^9, 3.771454074391344*^9}, {3.7714541938281612`*^9, 
   3.771454277451592*^9}, {3.771454322738824*^9, 3.771454325618536*^9}, {
   3.771454364959094*^9, 3.77145437751757*^9}, {3.771454433547823*^9, 
   3.7714545421132708`*^9}, {3.771455217613222*^9, 3.77145535577558*^9}, {
   3.771455435655723*^9, 3.771455510314994*^9}, {3.771455556082074*^9, 
   3.771455564750554*^9}, {3.77145593459199*^9, 3.771455937975033*^9}, {
   3.771456058509593*^9, 3.771456129523423*^9}, {3.771456222913642*^9, 
   3.771456228246524*^9}, 3.7714562586450167`*^9, {3.771456705937633*^9, 
   3.771456711605398*^9}, {3.7714567817000427`*^9, 3.7714567946088057`*^9}, {
   3.771493891540557*^9, 3.771493895735096*^9}, {3.771494316132925*^9, 
   3.771494327947084*^9}, {3.771494395712762*^9, 3.771494488689721*^9}, {
   3.77149458736232*^9, 3.771494801282201*^9}, {3.7714948319413433`*^9, 
   3.771494894664597*^9}, {3.771494974762388*^9, 3.771494981008957*^9}, {
   3.771495020976473*^9, 3.771495049102619*^9}, {3.77149516881102*^9, 
   3.77149517216968*^9}, {3.771495211530912*^9, 3.7714952410715446`*^9}, {
   3.7714954804824*^9, 3.771495600708864*^9}, {3.7714956370151243`*^9, 
   3.77149576686017*^9}, {3.771495919493874*^9, 3.771495950063293*^9}, {
   3.771495985223475*^9, 3.771495994273457*^9}, {3.7714989141240473`*^9, 
   3.771498914576663*^9}, {3.771499025972911*^9, 3.771499074953002*^9}, {
   3.771499118871161*^9, 3.771499531525741*^9}, {3.771499595435413*^9, 
   3.771499654771887*^9}, {3.771499687233788*^9, 3.771499749272929*^9}, {
   3.771500410488161*^9, 3.771500418124591*^9}, {3.7715004683655252`*^9, 
   3.771500491139752*^9}, {3.771500528234477*^9, 3.771500619526393*^9}, {
   3.7715008286707487`*^9, 3.7715009233534107`*^9}, {3.771500958152525*^9, 
   3.771501007212943*^9}, {3.771501109206373*^9, 3.771501194218964*^9}, 
   3.77150123632707*^9, {3.771501335078978*^9, 3.771501354930306*^9}, {
   3.771501386799868*^9, 3.771501402093889*^9}, {3.771501502292654*^9, 
   3.771501515624795*^9}, {3.771501546559664*^9, 3.771501580854196*^9}, {
   3.771501623539763*^9, 3.7715016923082933`*^9}, {3.771501728258807*^9, 
   3.771502091263815*^9}, {3.771502150248258*^9, 3.7715022787105618`*^9}, {
   3.771502330167742*^9, 3.771502353991106*^9}, {3.771510452343177*^9, 
   3.771510456053566*^9}, {3.7715121029786882`*^9, 3.771512112304398*^9}, {
   3.771512172281098*^9, 3.771512189686692*^9}, {3.7715136184566517`*^9, 
   3.771513782755925*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"539b9829-d8e8-499f-b237-1170c766f87d"],

Cell[BoxData[";"], "Input",
 CellChangeTimes->{
  3.771501907355722*^9},ExpressionUUID->"56f98c7e-bf92-47bb-b1c3-\
79a455e7e512"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Print", "[", "\"\<x^3\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.771494520418762*^9, 3.7714945487670193`*^9}, {
  3.771495777032257*^9, 3.771495777196742*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"6447f852-7a53-434c-b9d0-4d1b8b920d7a"],

Cell[BoxData["\<\"x^3\"\>"], "Print",
 CellChangeTimes->{3.7714945504836082`*^9, 3.771495196493951*^9, 
  3.771495958687043*^9},
 CellLabel->
  "During evaluation of \
In[68]:=",ExpressionUUID->"547fbbac-5df6-4566-90d2-63b4a29e3de8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sound", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"SoundNote", "[", 
      RowBox[{"#", ",", "1", ",", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Piano\>\"", ",", "\"\<Cello\>\"", ",", "\"\<Tuba\>\""}],
          "}"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"12", ",", "30"}], "]"}]}], ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.771513023629198*^9, 3.771513023631752*^9}, {
  3.771513087748863*^9, 3.771513088445558*^9}, {3.7715131202711487`*^9, 
  3.771513120584359*^9}},
 CellLabel->
  "In[389]:=",ExpressionUUID->"576c8a16-6e09-4877-a16d-3af072808bd9"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[{
    {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
     RectangleBox[{0, 0}, {360, -164}]}, {InsetBox[
      GraphicsBox[{
        {RGBColor[0.5, 0, 0.5], 
         StyleBox[{
           RectangleBox[{0.13333333333333333, 0.4438917279327484}, \
{0.26, 0.45579648983751037}], 
           RectangleBox[{1.3333333333333333, 0.4438917279327484}, \
{1.46, 0.45579648983751037}], 
           RectangleBox[{1.4666666666666666, 0.4438917279327484}, \
{1.5933333333333335, 0.45579648983751037}], 
           RectangleBox[{1.8666666666666667, 0.4677012517422721}, \
{1.9933333333333334, 0.4796060136470343}], 
           RectangleBox[{1.7333333333333334, 0.5034155374565581}, \
{1.86, 0.5153202993613198}], 
           RectangleBox[{2.2666666666666666, 0.5034155374565581}, \
{2.393333333333333, 0.5153202993613198}], 
           RectangleBox[{0., 0.5510345850756055}, \
{0.12666666666666668, 0.5629393469803675}], 
           RectangleBox[{1.6, 0.5510345850756055}, \
{1.7266666666666668, 0.5629393469803675}], 
           RectangleBox[{2.8, 0.5629393469803675}, \
{2.9266666666666663, 0.5748441088851295}]},
          Antialiasing->True]}, 
        {Hue[0.22538543343129763`, 0.9, 0.7], 
         StyleBox[{
           RectangleBox[{0.26666666666666666, 0.4438917279327484}, \
{0.39333333333333337, 0.45579648983751037}], 
           RectangleBox[{2.1333333333333333, 0.4677012517422721}, \
{2.26, 0.4796060136470343}], 
           RectangleBox[{1.0666666666666667, 0.49151077555179606}, \
{1.1933333333333334, 0.5034155374565581}], 
           RectangleBox[{2.6666666666666665, 0.5153202993613198}, \
{2.793333333333333, 0.5272250612660818}], 
           RectangleBox[{2.4, 0.5272250612660818}, \
{2.5266666666666664, 0.5391298231708438}], 
           RectangleBox[{0.6666666666666666, 0.5510345850756055}, \
{0.7933333333333333, 0.5629393469803675}], 
           RectangleBox[{1.2, 0.5748441088851295}, \
{1.3266666666666667, 0.5867488707898912}], 
           RectangleBox[{2.533333333333333, 0.5748441088851295}, \
{2.6599999999999997, 0.5867488707898912}]},
          Antialiasing->True]}, 
        {Hue[0.3881114562337579, 0.9, 0.7], 
         StyleBox[{
           RectangleBox[{0.9333333333333333, 0.45579648983751037}, \
{1.06, 0.4677012517422721}], 
           RectangleBox[{3.466666666666667, 0.45579648983751037}, \
{3.5933333333333333, 0.4677012517422721}], 
           RectangleBox[{3.2, 0.4677012517422721}, \
{3.3266666666666667, 0.4796060136470343}], 
           RectangleBox[{3.8666666666666667, 0.4677012517422721}, \
{3.993333333333333, 0.4796060136470343}], 
           RectangleBox[{0.4, 0.49151077555179606}, \
{0.5266666666666666, 0.5034155374565581}], 
           RectangleBox[{2., 0.49151077555179606}, \
{2.1266666666666665, 0.5034155374565581}], 
           RectangleBox[{3.7333333333333334, 0.5034155374565581}, \
{3.86, 0.5153202993613198}], 
           RectangleBox[{0.5333333333333333, 0.5272250612660818}, \
{0.6599999999999999, 0.5391298231708438}], 
           RectangleBox[{3.6, 0.5391298231708438}, \
{3.7266666666666666, 0.5510345850756055}], 
           RectangleBox[{2.933333333333333, 0.5510345850756055}, \
{3.06, 0.5629393469803675}], 
           RectangleBox[{0.8, 0.5629393469803675}, \
{0.9266666666666666, 0.5748441088851295}], 
           RectangleBox[{3.066666666666667, 0.5629393469803675}, \
{3.1933333333333334, 0.5748441088851295}], 
           RectangleBox[{3.3333333333333335, 0.5748441088851295}, \
{3.46, 0.5867488707898912}]},
          Antialiasing->True]}},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{All, All},
       PlotRangePadding->{Automatic, 0.05}], {180, -35}, 
      ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]], 
     InsetBox[
      GraphicsBox[
       {GrayLevel[0.6], RectangleBox[{0, 0}]},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None], {180, -100}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]]}, InsetBox[
     StyleBox[
      TemplateBox[{
       StyleBox[
        "\" | \"", FontSize -> 14, FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"\"4\"", "\" s\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False]},
       "RowWithSeparator"], "DialogStyle",
      StripOnInput->False], {355, -159}, Scaled[{1, 0}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{5, -158}, {29, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       PolygonBox[
        NCache[{{11, -157}, {11, -136}, {20., Rational[-293, 2]}, {
          11, -157}}, {{11, -157}, {11, -136}, {20., -146.5}, {11, -157}}]], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitMIDI[
           Sound`MIDISequence[{
             Sound`MIDITrack[{
               Sound`MIDIEvent[0, "SetTempo", "Tempo" -> 1000000], 
               Sound`MIDIEvent[
               0, "ProgramCommand", "Channel" -> 0, "Value" -> 0], 
               Sound`MIDIEvent[
               0, "NoteOn", "Note" -> 70, "Channel" -> 0, "Velocity" -> 127], 
               
               Sound`MIDIEvent[
               32, "NoteOff", "Note" -> 70, "Channel" -> 0, "Velocity" -> 0], 
               
               Sound`MIDIEvent[
               32, "NoteOn", "Note" -> 61, "Channel" -> 0, "Velocity" -> 127], 
               Sound`MIDIEvent[
               64, "NoteOff", "Note" -> 61, "Channel" -> 0, "Velocity" -> 0], 
               
               Sound`MIDIEvent[
               320, "NoteOn", "Note" -> 61, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               352, "NoteOff", "Note" -> 61, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               352, "NoteOn", "Note" -> 61, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               384, "NoteOff", "Note" -> 61, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               384, "NoteOn", "Note" -> 70, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               416, "NoteOff", "Note" -> 70, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               416, "NoteOn", "Note" -> 66, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               448, "NoteOff", "Note" -> 66, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               448, "NoteOn", "Note" -> 63, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               480, "NoteOff", "Note" -> 63, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               544, "NoteOn", "Note" -> 66, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               576, "NoteOff", "Note" -> 66, "Channel" -> 0, "Velocity" -> 0], 
               Sound`MIDIEvent[
               672, "NoteOn", "Note" -> 71, "Channel" -> 0, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               704, "NoteOff", "Note" -> 71, "Channel" -> 0, "Velocity" -> 
                0]}], 
             Sound`MIDITrack[{
               Sound`MIDIEvent[0, "SetTempo", "Tempo" -> 1000000], 
               Sound`MIDIEvent[
               0, "ProgramCommand", "Channel" -> 1, "Value" -> 42], 
               Sound`MIDIEvent[
               64, "NoteOn", "Note" -> 61, "Channel" -> 1, "Velocity" -> 127], 
               Sound`MIDIEvent[
               96, "NoteOff", "Note" -> 61, "Channel" -> 1, "Velocity" -> 0], 
               
               Sound`MIDIEvent[
               160, "NoteOn", "Note" -> 70, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               192, "NoteOff", "Note" -> 70, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               256, "NoteOn", "Note" -> 65, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               288, "NoteOff", "Note" -> 65, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               288, "NoteOn", "Note" -> 72, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               320, "NoteOff", "Note" -> 72, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               512, "NoteOn", "Note" -> 63, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               544, "NoteOff", "Note" -> 63, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               576, "NoteOn", "Note" -> 68, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               608, "NoteOff", "Note" -> 68, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               608, "NoteOn", "Note" -> 72, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               640, "NoteOff", "Note" -> 72, "Channel" -> 1, "Velocity" -> 0], 
               Sound`MIDIEvent[
               640, "NoteOn", "Note" -> 67, "Channel" -> 1, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               672, "NoteOff", "Note" -> 67, "Channel" -> 1, "Velocity" -> 
                0]}], 
             Sound`MIDITrack[{
               Sound`MIDIEvent[0, "SetTempo", "Tempo" -> 1000000], 
               Sound`MIDIEvent[
               0, "ProgramCommand", "Channel" -> 2, "Value" -> 58], 
               Sound`MIDIEvent[
               96, "NoteOn", "Note" -> 65, "Channel" -> 2, "Velocity" -> 127], 
               Sound`MIDIEvent[
               128, "NoteOff", "Note" -> 65, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               128, "NoteOn", "Note" -> 68, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               160, "NoteOff", "Note" -> 68, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               192, "NoteOn", "Note" -> 71, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               224, "NoteOff", "Note" -> 71, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               224, "NoteOn", "Note" -> 62, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               256, "NoteOff", "Note" -> 62, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               480, "NoteOn", "Note" -> 65, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               512, "NoteOff", "Note" -> 65, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               704, "NoteOn", "Note" -> 70, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               736, "NoteOff", "Note" -> 70, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               736, "NoteOn", "Note" -> 71, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               768, "NoteOff", "Note" -> 71, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               768, "NoteOn", "Note" -> 63, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               800, "NoteOff", "Note" -> 63, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               800, "NoteOn", "Note" -> 72, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               832, "NoteOff", "Note" -> 72, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               832, "NoteOn", "Note" -> 62, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               864, "NoteOff", "Note" -> 62, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               864, "NoteOn", "Note" -> 69, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               896, "NoteOff", "Note" -> 69, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               896, "NoteOn", "Note" -> 66, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               928, "NoteOff", "Note" -> 66, "Channel" -> 2, "Velocity" -> 0], 
               Sound`MIDIEvent[
               928, "NoteOn", "Note" -> 63, "Channel" -> 2, "Velocity" -> 
                127], 
               Sound`MIDIEvent[
               960, "NoteOff", "Note" -> 63, "Channel" -> 2, "Velocity" -> 
                0]}]}, "DivisionType" -> "PPQ", "Resolution" -> 240]]; 
         Sound`EmitSampledSound[None, "Preemptive"], 
         FEPrivate`EmitSound[None, "Preemptive"]], Method -> "Preemptive", 
       PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{29, -158}, {53, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       RectangleBox[{35, -152}, {47, -141}], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitSampledSound[
           SampledSoundList[{{0.}}, 8000], "Preemptive"]; Sound`StopMIDI[], 
         FEPrivate`EmitSound[
          SampledSoundList[{{0.}}, 8000], "Preemptive"]], Method -> 
       "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    {GrayLevel[0.75], 
     StyleBox[LineBox[{{0, 0}, {360, 0}, {360, -164}, {0, -164}, {0, 0}}],
      Antialiasing->False]}},
   ContentSelectable->False,
   ImageSize->250,
   PlotRange->{{0, 360}, {-164, 0}},
   PlotRangePadding->1],
  Sound[{
    SoundNote[10, 1, "Piano"], 
    SoundNote[1, 1, "Piano"], 
    SoundNote[1, 1, "Cello"], 
    SoundNote[5, 1, "Tuba"], 
    SoundNote[8, 1, "Tuba"], 
    SoundNote[10, 1, "Cello"], 
    SoundNote[11, 1, "Tuba"], 
    SoundNote[2, 1, "Tuba"], 
    SoundNote[5, 1, "Cello"], 
    SoundNote[12, 1, "Cello"], 
    SoundNote[1, 1, "Piano"], 
    SoundNote[1, 1, "Piano"], 
    SoundNote[10, 1, "Piano"], 
    SoundNote[6, 1, "Piano"], 
    SoundNote[3, 1, "Piano"], 
    SoundNote[5, 1, "Tuba"], 
    SoundNote[3, 1, "Cello"], 
    SoundNote[6, 1, "Piano"], 
    SoundNote[8, 1, "Cello"], 
    SoundNote[12, 1, "Cello"], 
    SoundNote[7, 1, "Cello"], 
    SoundNote[11, 1, "Piano"], 
    SoundNote[10, 1, "Tuba"], 
    SoundNote[11, 1, "Tuba"], 
    SoundNote[3, 1, "Tuba"], 
    SoundNote[12, 1, "Tuba"], 
    SoundNote[2, 1, "Tuba"], 
    SoundNote[9, 1, "Tuba"], 
    SoundNote[6, 1, "Tuba"], 
    SoundNote[3, 1, "Tuba"]}, 4]]], "Output",
 CellChangeTimes->{3.771513024206643*^9, 3.7715130889835052`*^9, 
  3.7715131210685873`*^9, 3.771513275610507*^9},
 CellLabel->
  "Out[389]=",ExpressionUUID->"016c582e-2e88-40b5-a22a-28443b105193"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"EmitSound", "[", "%389", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[390]:=",ExpressionUUID->"abef2d62-59f3-4a66-ab34-967f69e583d7"],

Cell[BoxData[
 RowBox[{"EmitSound", "[", "%379", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[380]:=",ExpressionUUID->"8ce7f0c9-fe3f-423a-8a12-7773c238276a"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "20"}], "}"}], ",", 
   RowBox[{"MeshFunctions", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", "y"}], "]"}], "}"}]}], ",", 
   RowBox[{"Mesh", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", "0", "}"}], "}"}]}], ",", 
   RowBox[{"MeshStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{
      RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red"}], "]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771541538398632*^9, 
  3.771541541613284*^9}},ExpressionUUID->"662f924a-d56d-4ce3-8137-\
c2e13b12aeac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sound", "[", 
  RowBox[{"SoundNote", "[", "50", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715131815514193`*^9, 3.771513235043054*^9}},
 CellLabel->
  "In[388]:=",ExpressionUUID->"3f299b92-e979-47cd-b78f-b680dd085849"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[{
    {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
     RectangleBox[{0, 0}, {360, -164}]}, {InsetBox[
      GraphicsBox[
       {RGBColor[0.5, 0, 0.5], 
        StyleBox[RectangleBox[{0., 1.027225061266082}, {0.95, 1.039129823170844}],
         Antialiasing->True]},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{All, All},
       PlotRangePadding->{Automatic, 0.05}], {180, -35}, 
      ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]], 
     InsetBox[
      GraphicsBox[
       {GrayLevel[0.6], RectangleBox[{0, 0}]},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None], {180, -100}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]]}, InsetBox[
     StyleBox[
      TemplateBox[{
       StyleBox[
        "\" | \"", FontSize -> 14, FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"\"1\"", "\" s\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False]},
       "RowWithSeparator"], "DialogStyle",
      StripOnInput->False], {355, -159}, Scaled[{1, 0}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{5, -158}, {29, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       PolygonBox[
        NCache[{{11, -157}, {11, -136}, {20., Rational[-293, 2]}, {
          11, -157}}, {{11, -157}, {11, -136}, {20., -146.5}, {11, -157}}]], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitMIDI[
           Sound`MIDISequence[{
             Sound`MIDITrack[{
               Sound`MIDIEvent[0, "SetTempo", "Tempo" -> 1000000], 
               Sound`MIDIEvent[
               0, "ProgramCommand", "Channel" -> 0, "Value" -> 0], 
               Sound`MIDIEvent[
               0, "NoteOn", "Note" -> 110, "Channel" -> 0, "Velocity" -> 127], 
               Sound`MIDIEvent[
               48, "NoteOff", "Note" -> 110, "Channel" -> 0, "Velocity" -> 
                0]}]}, "DivisionType" -> "PPQ", "Resolution" -> 48]]; 
         Sound`EmitSampledSound[None, "Preemptive"], 
         FEPrivate`EmitSound[None, "Preemptive"]], Method -> "Preemptive", 
       PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{29, -158}, {53, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       RectangleBox[{35, -152}, {47, -141}], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitSampledSound[
           SampledSoundList[{{0.}}, 8000], "Preemptive"]; Sound`StopMIDI[], 
         FEPrivate`EmitSound[
          SampledSoundList[{{0.}}, 8000], "Preemptive"]], Method -> 
       "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    {GrayLevel[0.75], 
     StyleBox[LineBox[{{0, 0}, {360, 0}, {360, -164}, {0, -164}, {0, 0}}],
      Antialiasing->False]}},
   ContentSelectable->False,
   ImageSize->250,
   PlotRange->{{0, 360}, {-164, 0}},
   PlotRangePadding->1],
  Sound[
   SoundNote[50]]]], "Output",
 CellChangeTimes->{{3.7715131900323677`*^9, 3.771513235343433*^9}},
 CellLabel->
  "Out[388]=",ExpressionUUID->"a78847fa-de0b-4589-8ee1-9a53519443be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"EmitSound", "[", "%376", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[378]:=",ExpressionUUID->"afe65381-0349-4fbd-a265-88e70a25204b"],

Cell[BoxData[
 RowBox[{"EmitSound", "[", "%374", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[375]:=",ExpressionUUID->"924b75f0-0480-40c9-8126-272eeb02ca40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sound", "[", 
  RowBox[{"SampledSoundList", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "500", " ", "t"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "1", ",", 
        RowBox[{"1.", "/", "2000"}]}], "}"}]}], "]"}], ",", "2000"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.771510670057459*^9, {3.7715126921465*^9, 3.771512695609954*^9}, {
   3.77151276403384*^9, 3.771512794637287*^9}},
 CellLabel->
  "In[373]:=",ExpressionUUID->"91f61a70-8f2b-43e4-b7b9-0d3e95eaa2a8"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[{
    {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
     RectangleBox[{0, 0}, {360, -164}]}, {InsetBox[
      GraphicsBox[InsetBox[
        GraphicsBox[RasterBox[CompressedData["
1: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
qB0smD0WTlSjez28Qd/FplANXh9K7yLhNhJu+0HvZhNN7/ngPN0vNWoJFHSg
9y34RO8ztNkeTv4kC5cNLIORq2ifc1upbqrHP/drGgd/5S6Cu/fQex4eQf+F
5DX6L/dvoO8+T5/eM3krnaM8ms7xvlsFdqvR+0Y20fzQk1Q3aRrd//pRCWjx
3RU2ZlLsvbGtasewUNNEmwGY69QEn2nxVHMaDaG4S/MvHJX2E7o4/IZmLzrh
COFumHKxB96U6oC7JvTBS89p3sMhtI7ddlq3dv8gNO6luH83jUfsaYZqC+hc
c5Ja4RER2td8Lu17q+8XPPmG4rGraf+Wg7T/5GkUN7/pglLKZMUaOu/QszRf
6hOdT/0rnSersg6WRwjiHczFvyO+EEXn+TWL5sdconPdjeRD3UQpqlu7n2K5
5hbEIVd74ZNtdP4wO9pvwji6791Y+g7jV9J555uTVgXttN8mmh/eQHnfd7TP
yb+i2EfjwmfE7V2jEce++4D42g8pxD6D3xB/2y+AuFSIziWl1k/vNYH2mV9A
+xzJpXcSv0DvWCZH99FeVYm46Y404kebPyF++4H2mSpC487VVK90kt7n8RG6
t94riufZ0Dvvvkb3uDiT6hvT6bsbFtD3DP9IdQ9Caig/ZwjqLPtqEcvK0XiA
Lp23sZ7may0TQl3BkArEInfEEZ/yKEM8TmMY4sWy9J3vDNJ/6jaSVJGuhzML
hqLu7YVq+p+d+RGzvmF9w/rm3+8bqy0NhY3doaY9t+phcTXFV2fWwfKgJmhU
8A0eOtJOvv4CR12geNYaGr87rREOsf0Bz22ogJ9Fu6BkeTG8nd4Nw8bQOgK5
rVAisRo2L/gOv6yi8xydQnHiLxr/atoCj0lUQUNzOufck7XwWQLtH1tUCXe/
7ID1wrR/VVkvfNlfAmUTaH+embTf3W6a1x5K5y59UQTDNf7S+k/zad5xng+c
VqnvEe+dRPeq/UXvYRtF5znWS+cdfovuyy/eCRsP0v71p3pgeijt8+4nxVs1
yuh+mTR/1FR6B0Xvqn9ieu94Cbp//Ry63xBpOld/2wvEkZrCiJU98xA3Sf2B
euNof5ed9B3bE+h9K0to/eZTAzDzcBa971N5rBPvfgexVPloun9oLuKRRXSO
kP20vtSbVGgmrIi6VRPSEY870Q+D19F7Va2j9TWb5FD3cs8TxAmx9F3WvxNA
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
51F0MWgk1GyB3/qxxJ27mHyj6xG340vsz5qr55sEYvfoj/+Ed9itMujzo6F6
nkdP9O9P8/yN6rN5Hse56zw/Y+1EnpNxYx7rJlUlvoaOei5LEvX+esHzOQZO
p6+ybcjfPI15zp/HczbyW1fnerlHvi4J6vpNxa/eKvQnI3luh08gzyfJO0P8
qNIN1XM6yF/Pif5sm1PfnEnoz8+gzkNvsecf4rk3D8rzHBzf1jznZn0N9LOa
8/ycWUXw0Fs4Ww+/xx95Xk9LB+QJLVk3uzHx3pxCn3+Zdefs0ZukoPc0QD/0
I/ov83kuz9VfPK/nUBLxns/n+UKuv3ie0Y9E1ifd5Pk8q3ajD3PCf3gdnheV
9I3n+Pj8pk7bVfh77iXf57Xk2W1HfAf1fKY5S/CvtoR6Nqj5dN5PfPcg8kdX
Zb1mOOujPrK+QjX0m2ujt+rMOo87xK2qnjc1uRvxP6t5pVvCifasG3ITOcQN
rtYhb5p6LpP2YPRJ3sS9MZu+691HfjKT/g9M4jlZkcqvvS08q8U8ws2I43cN
1nakLi9/5MGxsOty6howAXngJOLfD+N5S8OX0XeDbuiP2JQS/esCnk81tjfz
eRxPfG9H9fyl3+p5YInUlboTe14S8pdz6vlZ4/E//wK9fy55q679InKwLn7P
6pE3poDnQb1W18WDttTfsBt1VFXxyy5n3bdL6Nepeec2YD4nHemnTAT6lESe
z+ihnnMYbsnzEMvs5DmFpkvQ59mp52qGoG/1A79GIeo5libE+bwQ/c0SyCFB
yPOj8Ju8FYYaE2e/ek5ox2D8Y9vxvMTUJPw+XOL5jhYTiFO8lucljnPleZEP
z2B/58tzGOuUJE79+jxf8f5SnrvYOZh1e7/wfMZrL4h3wAD7x2Di1c+gHsOz
1HGrLHUMHYf+/AxoYY9dfzHUPcn6Mur5l6kt0GtuQ//NHn3iburoNRu5bCvq
n/CaPC8qsm74CfV8zk30Yx2Dvmgz+ouB1GHrS7zrjYnnU5r+grag/7UX6rvz
/MzOl1kfWBu95S3i3+gOC5ao57KewW9BKHWdVXzXH/usLsztlXpu6bwc5n1i
O8/ntHgNr00hr5E+8SYOYt3Z7eRbrGitnpPafhh+X75B30D051ZT7+sC/JO6
bBC6daKeCnN4PueOjdQz4BbP77RoTR3RJjy/NSGVOi9XIX4rLzUn9dzRkjZq
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
3OKbGZyL/GI79ezypF73ypyDfLkh5yIfW0Gd7+rQf9c98PcCzmW+oc6z7jiE
+a6JI26tc+R5/hl+6MQcjBvBBW+oT+szdem8wO96KnHcz5G3XB7XRXYmcypQ
50wnP8TeIYL9yZ5LH8PWwlKD6cfWiLlMt6fug3fYn6Bo4pjM4noLukt8P3fO
AffL4HzqKfW4rjYfV9eXDnM/GsZ51XrzuD67nibOaAvkTtO4XrV34bc1lOsj
phT7bL4H9tfg+kkZQXydCez7qLcrHGJdtjiMbB0unO4dIQxdg/zy/EqhrjF+
XvHLhXenItd1DRNOHIF/YTz+bYyXCbsvWEScpsHC+Lz56LstFm5/Q5xjraKE
vdauF24eDs/cRu8yf5WwehA0KFxNnF3w1kryj6hI3p6W5PtwMUg44Qa0WEI9
Z38QNzh+l3CowV6haUCMsLLHUuZwbK7wgA/rlhXTb6PTKt8k9MkjAoXm96F1
Y/qL04iEEeR7sXiNsMgDueKvtcJDetDiM/7lnzOXWf1hUSPy9h2l2JY5mw7F
PvCR6vsD9bhl0H+NPiHCbmbEzbVeJ9SaRv4nu1h/tSt+unn0vfYE10HfO/i9
j40WXvZg3oXOocKlycynuMxM4ZfoeVwP+dRXYzr5jibCsvfYvwuH6MN/Nrwz
Dv+PQ+gj+P0SYfs56B83oI70AhiYQd3P+tFn79mzhRv2LeR60SRPef+N9Hl3
veqPfdu4ifhdp9JvdDP0/frRX18P5vU0j/w7i7nuV3Sjb6+UNi02l9/s0OuW
nXBRIXLwk1bCgjhb4eFpcJ4X+pv12gkbBbLO+jv6GZNZv36Kg1B3q5XQ2xD2
9GkvXDeP9SE/mgtLJNsIL81zJN4+a+EsbdbVH0/+k1XgdCPsddaR72WUvTDq
TmvhsLKsi5qNvkYb+NOUdfE3WwoH5OOvl0hdGTWpO20ydaW+pq//f9snHNmH
fEXrqTPCA//yfczJc7eFcLWWk9BvCXkTzej3kQl1jSoi/hcH7Fp2HYSbHmBP
O4N9c2fmUrE1+UocQj7XHb9rP/Fr7kKc6HUuwh3+1KHfw1i41516svtgv70I
+7IXrA9uSn9TT9PP+qHMyT6W/lucZD4jz6FvGky/ESOJd2Y/9VfsaCic0xK/
vsEDhY6TybeoTj3iPSfehZvOwtg3zNWgKnxymf0ZO4W53VX7EjaSevyuoN+y
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
Dvqqc1BfGPq7LnW2Y25dynkIr86pISyVUiT5rbpbifxqyhDmcpI+NRbRX9TC
VsJsV+rM615ZOPcI8xrZ0Fc4Y3Z/9mOHBn2EluE6sGgvHKLmcKapvdA70Vb4
IdtM+HmcpvBeohHXy6pRwg1azPXGfvruGc1+3n3Afl8YSfwzTysKr6UQ78Do
kcLXPbi+lu0uIaznXIH4E3sJ1w/xEx5MbSs0zvspc9lVXFZknRXE3/ptqHBh
/b7C09XIk7iPfexrR12DNjKHsGQf4cdBXEcPt+SKX7cnyCcNmdsNZ/Lbz9Jq
+bZhtMOYDdBdv7IwoBvc8K4s+g4lhNfTKwjHtTIUes6rJ2zxGf3Ro59b/MPg
G9nCcUkVRT/Iro7wiXM14UTLIrH7ry4pcmUPfWFKHxPhYN2awvjW38Sv/5kX
wpK/kfWLqor9RsWmwhBf1m3yriG06V1OeNYjX/xnr84S2k/JFXa0MRC76TNX
of2xTsjmxD2VQh+3O+Jf9SL6DH/6djCqIpxaifiNS30QRml9EVpElRG7dlZ9
obOFmXDlbPqM2F9eaP39p/jH3f4oHKbzRlihTJ5Qq25d8TNszvpyduzLgdXM
130Lee0KyHfS1lLYr6OT8LSuOflCsM/zfSv+q67TV3A8+7JkcjPh0Az2x7SY
/s89zhTeaqsh+vsBFsx3ZgvhiiXsb85z/HNCqevaIeYfF0r9pcpwnTxfVF14
vgb9j9uRI/4FKfThZcp1NrMWc2pxSJd+FuNnPZs5mZzWEf3FeR2FHoEOwnR/
rqsqt64Jy6bfFS7K1RT7vsmthEMWNBaesSwW+4B49nHrK/LljWwoDH5O3w3a
vRR7OXP26/n3FM8l06IcLCPhyYlnhYsenRc2KntBqKF3TtixEn7HwmDD65eE
I8PShGFxGcKi6o+FQ/zuCWt0x75uHf4JKcQvWeK0sPHVU8KjPmeEeh2uCvWH
sL7vDeJm+F0T9nh9XHiryTbh4sXrhfEdY4Stpu0Vujoepv6FCUKP6dFCl4h5
wuGPpwhvzPQXbnEJE6YabxdOUP23sb0hHHDkpXDh6vfC0valB/7DgZfLCWuW
LC98MrtA7L8MPwtPjcwU/mj3RdjLsVj4flsN8b+kV0+4qxey0UNNYbHnJ/pw
eSV08r0tLJ5+S1jpwhHhoNAd9H9yvnD5wxnCtnpB7Mv+UGHF8cxJL3KTMHYX
81piiVzQZbdw1Yl9Qr/GB/B/EyvMMd0pnGO1S3jbLUkYmcZ146R7kzzp14V2
B9nHN7Muc/2kPBCmOWYJYx4yJ4O438LM/b+E3ysVCTcvyyVvN+ao9Z31k9sQ
f0o418vFNPIkzXwqdHZgznWGfRSer/lcuKkLdY66RN0J+cxt7xeY57qR6/X3
BvZ39HJh56WzmFOFQZ7ss7bDlhtrHCJvVhEOTq4m7GClL5xcZCDc6dRA2MUA
tq/YWFijSUOhdpCRcNExQ2ForK7w6nXirrEvJ/xcVF44tX1Zod3aCsL9P9En
lKOe9VZVhS/TqEPvbX1h/SgLoWfN1sK5L5yEj0w7C0OsegjTB/UWnv/cX3hi
ziBh1ZlDhBN7eQuLawwUZj0cILQ17yg0P2srnORN/2PWVBb2av7R/h8m67wU
zk69JGx4PlXYvVGSsMqaZOHHiP1CnwMHhduD4oUWnROFgbnw3CD855RIERZf
vyDccOiRcFezt0Kv8qWljo7HmM+GBZbCZdUchKUb9GM+l+jvYOpE9s1qmvDp
nOnC6a7+6MeOEzonj2A/mjIno0UewlGZ3YQTPLsKP0xlzme9XIQx2eS9EMe8
Bvs0E9b+zn6NL6LOFWWKpf79+z4JX455wjy23RKGRZ8XGjw5Jxz3DTn0Q5pw
2cW7wgqGr4UtAmCJCZ+Fab+J2+ZwgbBoU6HQ6RbX13w7La6HmHrCrvWMhQ/8
qT8guYPwcPO+Qr9Nnuz3VR/0vQOEGufmCcuVq3Y6cOVqh1Xbf5z6h40DPgrT
DuQJj3fXFvuM1bbCk2m9hM3SXYWnfpoJPQcVib9rSL5we3Et0du0dxT2aMG6
xu3aCkf2zxG/fcXXhU4Vbwjtsr8Ir+5vLn4l+7gJHfO6C/0ntRM26FBdWLZG
SeGU3cTTCikUnjUzEP1s+9bCH5EdhcMvIPfy1hLejSHf+NQs4aGQ38JTJ43F
HuJmLzT9QB+2fS2FnZ8wl8gc/L0u5AqbVWUOcWmVxf60vpGwjWtL4XXTFsLT
L/WFzQ+XFpYZ+EvWrbCrIvKjLm2ETQY6C6stMBcerasrdB1ZSuiTSf/aF4tl
fYE3+R90ZF8nHWfd+u3Mb1CfLsJzVdmfTwnUPdu7vMhnOzH3ak+shKUv1xXu
eMO+fhr/Xuh28K3Q25i676/tKn5D38xj3/2WC+vmeQi/lLvFfJtvE1aclybU
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
puV4B9a8i3j3JIEr+D8k1oXifBvp4f3RnjaaKafMNGP+54XBEQ6igZbmEMk/
2Tf7i/ico+kzUej2p3FipVtMOfEj66Jiou77aC6yr6Cck50odTS3muTj7xW2
ECdeqQ0Tm7wjfhA541RbiVxT12uJq0Uf8ZN9qht5RIlG42KFJM+09wX23/hn
8ZKYNuOcSzyzTV6Q1C06svsvzs9o4CXx1xkJeeKNBMGbJH/hP9l84stw9w/E
gj+xmcSNg2u9SF2X2pdGotvUmaxr/zPUOziAuH7zGdnY/xmyROA9WVfvrrxI
9i0PT3pPZM68XUTckMdWR1zn3zNNZHSdZiH1axYeDSMxi0WwGfFbkqUeya+e
Ex4gsajgSA7mja/SIee8vF6mTM79uSzVDee3bbtD1mU7W9F3r5HqMRIHvhqM
IO7JrDlA8gYmhbjnEuHsJ8TWBkYD4jHuACbS1+sypzqx+5dpKOm7deeFKuIl
ofJLpE9m201W3D9mSIF4dWjWmPjGUeYC6dMixxpBVBX/YkLy57rtPIkJd5/8
IX3mNzvVEfdFSsyQfJvHaDxxJLzqG9ln5PrKmcTsU+0iJLZj6HYgxkTcTCJq
em8aJfv79pobkTnN3BV0icZt7EpkfXezIf7HoTiJUlL36YqrJdHFVnApqTuS
+xjz5qWr+uIeV/oniIutStlxTo13BXGlymphnH/Jq4jsP7Upqp7U5YRWMxMd
LAU6iacmSk1JX7aH7I6kzvJDWS9RjnV9E9nfaLT2A4n/D9Qu8Cw=
          "],
          ColorFunction->(Blend[{
             RGBColor[1, 1, 1], 
             RGBColor[
             0.27450980392156865`, 0.5411764705882353, 
              0.796078431372549]}, #]& )],
         AspectRatio->Full,
         ImageSize->NCache[{
            Rational[2001, 2000]}, {1.0005}],
         PlotRangePadding->None], {0, 0}, {0, 0}, {1.0005, 1}],
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{{0, 1.0005}, {0, 1}},
       PlotRangePadding->{
         Scaled[0.017142857142857144`], 
         Scaled[0.1]}], {180, -35}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]], 
     InsetBox[
      GraphicsBox[InsetBox[
        GraphicsBox[
         {RGBColor[
          0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
          LineBox[CompressedData["
1:eJxd3XuQ1ed933FFIY7xVJmG8dBUNFEcqS6dqBN5OkyG6UTfVkmjtiSxkjAZ
1LEyJhN1PExKXJMa16GuXJu6NJEcyQm2iWMkIUtIxjJIQhJIQrDAcllg7+wu
e2HPXs7uudshCpJBpOec95fPZ3f5R7Os3+f6nOf1PPvsD3/kD/74dx6+9ZZb
bun9yVtuaf138Z/JuP78D/t+8w/+bfD1D/LrB+LH8vs/+sKmN//kaxviZsH3
Pxk3/qH153L86YdfvL/w+T9Uz//+U3Fr9v+j9NGPfXDfHy3pPx3Xs/83lz/+
6Nc3f0Y9t/cn8ePZH/6P/+jWX/zKZ9Vz+5+L97Jf+8rpzx7Z/Xn13N+2WJb9
6z+3vfLbr39hyf0/Elez/9aJn9//mU99UT2P53/HT2Q/+l7rDr+knsf35Xgn
+1W/NH7XB764XT2P9//Eyuz/8x+2bvErSx7//40r2e/6ZuvPDvU8n/8X9fz+
yIWrvzv9nT9Tz/P78/hhfv+fLvu9n/pXLz2qnuf7WPxM3v+G9g1+dcnz/wvd
/m/88o5/98nZv1DP6/G4Hl/1t1u3+Lh6Xp8noprf/7M/mrv2/A+fUM/r9bW4
Pe//F7+ysvkUvrbk9fvLKGff9dS/f/XK+3+pntfzr/T+tG7sZ5btVM/ruzP2
5vc/NLTn07/yoa+r5/X+evxs3v8Lraf7j7+x5PX/RhSz/0+tm1v5TfW8H9/U
+Gy/3P9sl3ren12xIm+/9er1/MJfq+f9+uu4I7//Lz/x1Y53Vn9ryfv3rSjk
7Z9p3trtv/Q36nk/b349GZ96vLYt1nxbPe/vt2N39s0H13zKu9Xzfu+Oj2S/
vvlgTvz8k0ve/ydjPPtnmq/e0J4n1TMentTn9+/eH/hc6aNPqWd8PBW35fd/
rT0AnlLPeHkq7szvN9+85hN6esn4eTqG8/7bD2//0+oZT0/Hr2X/r9t/9qhn
fO2Jndl/6ejZ5gjao57xtic+mn1/893fsPaZJePvmRjI/s72DT6jnvH4TNyf
/Zb2G/Ad9YzP78Ty/P7xd1Y33+HvqGe8Phur8/sr2g/w2SXj99n4eN5/69G9
cvpZ9Yzn52JH9i/9TeO5znXPqWd8PxePZn9r+wk/p57xvjc2Zf877QGzd8n4
3xtd2T/deroDe9XzeXg+1mX/t62b2/C8ej4fz2t+va81/EefV8/n5YW4O7/f
Hr6//8KSz88LGh+Fz7fekBfU83n6bjya3/9Ye4B/Vz2fr+/Gl/Pxf/GvfrU5
ZL6rns/bvticfe8vtN7gfUs+f/uiI/uPtGa72j71fB6/Fx/P/r+1Ph6f/p56
Pp/f0+fzWGv4Xfmeej6vL8bH8vvtt/ezLy75/L4Y9+b9t1++915Uz+f5+/FE
9u2Ht+376vl8fz+2Zc/f7lfP531/bMl+b+e65id6v3o+//vjUPYPND+NK77k
nvlgf6zP/t3WbHbCPfPDfs3PT97e+kAcUM98cSDWZP8f2m/wAfXMHwfkww+e
az1A98wnB+TnNza3PkHumV8OxJa8/+bgan6kXlLPfPOSfGvNJn2/+ZJ65p+X
4kB+vzVaPvFV97x8L8Vw3n/76fa4Z35q3v4N+vbNrXhZPfPVy3Eo+/Z09Lsv
q2f+ejnuzvuHO/fMZy/Hruzb08GQe+a3l2NT9v+rPeG8op757pXYlv2/aH+A
XlHP/PeK/Oxuc+We+fCVeCj7ra2Pw7h75sdXopjP/47WcP65g+qZLw9qfJ5q
Db9PHlTP/HlQfv5xe4J0z3x6UH7+k/YH3j3z66uxMW+//fDuelU98+2r8Uj2
/6X951X1zL+vxu58/C1sG8+5Zz5+NQrZt2bHz5XcMz+/FuPv0/9++wZfU898
/Vrcl/0H2hPUa+qZv1+LVfn4W+/Gh190z3z+WuzJvr0aaLhnfn89NuTjv9H6
uH3sdfXM969rfn62NZw/87p65v/X5edvtZ+wezx4PR7O/u9bb8c77vHhUAzk
/X+79XR/+ZB6vDgUp7L/9fYLeEg9fhySn/UWD4fd48kh+bmzNb1fc48vh+Vn
e3r+lcPq8eaw/GxPr184rB5/Dsv39vR31D0eHY5yfr89vdz6hnp8eiO68v1v
f3x/9Q31ePWG/Gx/PLa7x683Ynk+/vbw63SPZ2/EvuwHW2/vB99Uj29vxv35
+v/P9iN8Uz3evan12T9vD0D3+Pem/Dx/rvXHPR6+KT//e3tCfUs9Pr4VHXn/
P9se0G+px8u3ojv7k+3thHv8vPn1ZPzX9gTtHk/fkp/t6erDR9Tj6xH52Z4O
fu+Ierw9Ij/ZDrjn43EktuXjbw/nEfd4fCSuZN8eLre/rR6f345D+f63345P
vK0er9+Wnyzn3fPw3o6ref/tm7vsnv8ejYPZ83k/qh7fj8aaRZ//o+rx/mis
/DF65gP3+H9UfjI/uGc9cDS25v0zX7hnfXA0DtxYOH+4Z71wVH4yn7hn/XBU
PjO/uGc9cSzWZs98c0w964tj8pP555h61hvH5CfzkXvWH8e0PmF+cs965JjW
N8xX7lmfHJOfzF/uWa8ck5/MZ+5ZvxyTn8xv7plwOuQn812HetY3HfKT+a9D
PeudDvnJfOie9U+H/GR+dM96qCMeyfHDfOme9VFH7L5Oz3Bxz3qpQ34yn7pn
/dQhP5lfj6tnPXU87sv7Z749rp711fFYtWj+dc9667j8ZD52z/rruPxkfnbP
eux4LMv7Z752z/LieOx8f+H87Z712vF4OHvmc/es347LT+b3E+pZz52Qn8z3
J9SzvjsRKxbN/+5Z752I1Xn/eOCe9d+JeCDff3xwz3rwhPzEC/esD0/EozcW
+uGe9eIJ+Ykn7lk/npCf+HJSPevJk7EuHz/enFTP+vJkfDlvH3/cs948GRvy
+eGRe9afJ7X/xCf3rEdPyk+8cs/69KT8xC/3rFdPyk88c8/6tVN+4lunetaz
nfIT7zrVs75tfn1joX/uWe92xsb8Ph66Z/3bGffm64+P7lkPd8YT+frjpXvW
x52x7fpCP92zXu6MK9njqXvWz6fi0DV6fD2lnvX0qVh/Kz3enlLP+vqU/MRf
96y3T8lPPHbP+vuU/MRn96zHT8lPvHbP+vxUbHl/od/uWa+fiq3Z8/enl6zf
T8eBfP3w/LR6PD8dw9njuXs8Py0/8dw9np+Wn3juHs9Py088d4/np+UnnrvH
89OxKV8/PHeP56fjevZ4fmbJ/uFM7M3XD8/PqMfzM/FQPn88d4/nZ6KYrx+e
u8fzM/ITz93j+Rn5iefu8fyM/MRz93h+Rn7iuXs8P6P9J8CdXbJ/Oav9J56f
VY/nZ+UnnrvH87PyE8/d4/nZ+HLePp67x/Oz+vkanrvH87OxJ19/PHeP52dj
Q77+eO4ez7tiWX5+8bxryf6pK3bm5x/Pu9TjeVc8nD2eu8fzLvmJ5+7xvEt+
4rl7PO+Sn3junumvS37iuXs874oH8vXHc/d4fi52ZI/n55bs387Fo/n64fk5
9Xh+LsrZ47l7PD+nn9/iuXs8P6f9J567x/Nz2n/iuXs8P6f9J567x/Nz2n/i
uXs8Px+35ePH8/NL9o/nY3u+fnh+Xj2en4/N2eO5ezw/Hx35+uG5ezw/r/MR
PHeP5ze/vvnze/d4fl77Tzx3j+fntf/E8wvq8fyC9p94fkE9nl/Q/hPP3eP5
Be0/8dw9nl/Q/hPP3eP5hVifrx+eu8fzC3E1Xz+me/d4fiEOZo/n7vH8QqzJ
Hs+71eN5d6zMzy+ed6vH8+7Ykp9/PHeP592xNXs8d4/n3dp/4rl7PO/W/hPP
3eN5d9Tz9ePpusfz7libzx/P3fOnJ+5+f+H6vUc9vvfErkWf/x71eN8Tm/L1
Yz5wj/89cT175gf3rAd6Yu+1het/96wPerT/ZP5wz3qhR/tP5hP3rB964kj2
zC/uWU/0xJ03Fu4f3LO+6Ik78vEz/7hnvdETG/P1Yz5yz/qjR/tP5if3rEd6
tP9kvnLP+qRH5zvMX+5Zr/To/JP5zD3rlx79/Jb5zT3rmV79/Jb5rlc965te
7T+Z/3rVs97p1f6T+dA9659e7T+ZH92zHurV/pP50j3ro17tP5k/3bNe6tX5
IPOpe9ZPvTpfZH51z3qqVz+/Zb51z/qqVz+/Zf51z3qrV/tP5mP3rL96tf9k
fnbPeqxX+0/ma/esz3q1/2T+ds96rVf7T+Zz96zfmq/vjYXze596Fjh92n8y
3/epZ33Xp/0n87971nt92n/igXvWf33af+KDe9aDfbE9bx8v3LM+7NP+Ez/c
s17s0/4TT9yzfuyL7px/8cU968nm1z+ixxv3rC/74p4fp8cf96w3++Le9+jx
yD3rz754Int8cs/Ht2/J/tM969M+7T/xyz3r1T7tP/HMPevXfu0/8a1fPevZ
/riazx/v+tWzvu2Pg4v8c896tz/WZI+H7ln/9sfKfP746J71cL/2n3jpnvVx
v/af+Ome9XK/9p946p71c7/2n/jqnvV0f9Tz9cNb96yv+2NtPn/8dc96uz/u
zh6P3bP+7o9d2eOze9bj/bEpXz+8ds/6vF/7T/x2z3q9X/tP/nZgyfp9QPtP
PB9Qj+cD2n/iuXs8H4gj2eO5ezwfiDuzx3P3eD4Qd+Tzx3P3eD4QG/P1w3P3
eD6g/Seeu8fzAe0/8dw9ng9o/4nn7vF8QPtPPHeP5wP6+S2eu8fzAf38Fs/d
4/mA9p947h7PB7T/xHP3eD6g8088d4/nA9p/4vngkv3LoM4/8XxQPZ4PxkCO
Pzx3j+eD2n/iuXs8H4zli36+4R7PB7X/xHP3eD4Ye/P28dw9ng9q/4nn7vF8
UOefeO4ezwe1/8Rz93g+qP0nnrvH88FYl+MXz93j+aD2n3juHs8HY0OODzx3
j+eD2n/iuXs8H4zbF52vuMfzi9p/MuFfXLJ/uxjj2eP5RfV4flH7Tzx3j+cX
tf/Ec/d43vw6ezx3j+cX4558f/DcPZ43bz/fHzx3j+cXtf/Ec/d4fjG25fjF
c/d4fjGuLKPHc/d4fjEOp9947h7PL2r/iefu8fxiXH2XHs/d4/lF7T/x3D2e
X4w12eO5ezy/qP0nng+px/Oh2HKVHs+H1OP5kPafeO4ez4fiwN/T47l7PB+K
4ezx3D2eD2n/iefu8Xwo1qb/eO4ez4e0/8Rz93g+FLuyx3P3eD6k/Seeu8fz
obiePZ67x/Mh7T/x3D2eD2n/iefu8Xwoijn+eDvc4/mQ9p947h7Ph+LO7PHc
Pf8d1v4Tz4fV4/lwbMzxi+fD6vF8WPtPPHeP58OxO8cfnrvH8+EoZI/n7vF8
WPtPPHeP58NxX44fPHeP58Paf+K5ezwfjj3Z47l7PB/W/hPP3eP5cCzL9x/P
3eP5sPafeO4ez4fj4ezx3D2eD8dAjj88d4/nw9p/4rl7PB+OFdnjuXs8H9H+
E89H1OP5SDyQ4xfPR9Tj+Yj2n3juHs9H4tEcf3juHs9HtP/Ec/d4PhJdOf7w
3D2ej+j8E8/d4/mI9p947h7PR2Jf9njuHs9HtP/Ec/d4PhK35fjBc/d4PqL9
J567x/OR2Jw9nrvH8xHtP/HcPZ6PaP+J5+7xfETnn3h+ST0T/iWdf+L5JfV4
fknnn3juHs8vxZ35/PDcPZ5f0v4Tz93j+aWYzR7P3eP5pTic4w/P3eP5Jf3+
EJ67x/Pm/ef7i+fu8fySzj/x3D2eX4pVi34+7B7PL8XKn+D7eO4ezy/Flhy/
eO4ezy9p/8nHzT2eX4oDOX/iuXs8v6T9J567x/PRaKTfeD6qHs9Htf/E81H1
eD4ad2eP5+7xfFT7Tzx3j+ejsSn9x3P3eD4a17PHc/d4Pqr9J567x/PReCjn
Tzx3j+ej2n/iuXs8H40j2eO5ezwf1f4Tz93j+Wjckes/PHeP56Paf+K5ezwf
jUeyx3P3eD4au3P+xHP3eD6q/Sd/P6Yez8diPMcfno+px/Mx7T/x3D2ej8Wq
7PHcPZ6Paf+J5+7xfCw25PjFc/d4PqbzTzx3j+dj+v1bPHeP52M6/8Rz93g+
pvNPPHeP52NxKns8d4/nYzr/xHP3eD4Wq3P84Ll7PB/T+Seeu8fzsdiRPZ67
x/MxnX/iuXs8H9P1OXg+rh7Px6Mrxx+ej6vH83Gdf+K5ezwfj+XZ47l7PB/X
+Seeu8fz8bg/xy+eu8fzcZ1/4rl7PB+P7Tn+8Nw9no/r/BPP3eP5eGzMx4fn
7vF8PLqzx3P3eH7z65v7c/d4Ph735PjBc/d4Pq7zTzx3j+fj8UT2eO4ez8d1
/onn7vF8Iq5kj+cT6vF8Ig7n+MPzCfV4PhF7F/1+hXs8n9D5J567x/MJXV+B
5+7xfELnn3juHs8ndP0KnrvH8wmdf+K5ezyf0O/f4rl7PJ+IAzn+8Nw9nk/o
/BPP3eP5RDRy/OG5ezyfiLXpP567x/OJuDt7PHeP5xM6/8Rz93jefH1z/sTz
y+rx/HJcyx7PL6vH88uxN/3Gc/d4fjkeyvGD5+7x/HIU0288d4/nzXXhot8/
cY/nzX1P9njuHs+b+4qc//DcPZ5f1vknnrvH88vxSPZ47h7PL+v8E8/d43nz
fckez93jefN55/jDc/d43vxcp9947p6X73Ksyh7P3eP55diTPZ67509zXfGj
hev3SfX4PqnzTwbIpHq8n4yd7y1c37vH/0mdfzI/uGc9MBkD7y5c/7tnfTAZ
p7Jn/nDPemEyVry7cH/gnvXDZKzO8cP84p71RNP1qwv3D+5ZX0zGjuyZf9yz
3pjU+SfzkXvWH5NRzp75yT3rkUmdfzJfuWd9Mhnrcvwwf7lnvTIZy7NnPnPP
+qW57sue+c0965nJuD/HL/Ode9Y3k3Fbjh/mP/esdyZje44/5kP3rH8mdf7J
/Oie9dBkdOT4Y750z/poUr9/y/zpnvXSpM4/mU/ds36ajHsW/fzTPeupSZ1/
Mt+6Z301qd+/Zf51z3qr2efjYz52z/prUuefzM/uWY81943/sHD/5Z712aTO
P5m/3bNem9Tv3zKfu2f9NqnzT+b3gnrWcwX9/i3zfUE967uCzj+Z/92z3ivo
/BMP3LP+K+j6THxwz3qwoPNPvHDP+rAQ+/P1wQ/3rBcL0cjxhyfuWT8W9Pu3
+OKe9WRB55944571ZUG/f4s/7llvFnT+iUfuWX8W4lr2+OSe9WghBvL7eOWe
9WlB55/45Z71akHXF+OZe9avBZ1/4pt71rMF/f4t3rlnfVvQ+Sf+uWe9W9Dv
3+Khe9a/hXgke3x0z3q4oPNPvHTP+rgQHTm+8NM96+WCzj/x1D3r54J+/xZf
3bOeLuj8E2/ds74uxK/n88Nf96y3Czr/xGP3rL8LOv/EZ/esxws6/8Rr96zP
Czr/xG/3rNeb42/R77dPLVm/T+n8E8+n1DMhTOn8E8/d4/mUzj/x3D2eT+n8
E8/d4/mUzj/x3D2eT+n8E8/d4/lUDOTrg+fu8XxK55947h7Pp2Jnvj947h7P
p3T+iefu8XxK55947h7Pp3T+iefu8XxK55947h7Pp3T+iefu8XwqNv8krw+e
u8fzqej4O3o8d4/nU9Gd8zeeu8fz5tfZ47l7PJ+Ke9J/PHeP51Nx7xV6PHeP
51PxRPZ47h7Pp2Lb39LjuXs8n9L5J567x/OpOPxDejx3j+dTsT73T3juHs+n
dP6J5+7xfCoOZo/n7uFjSuefeO4ez6di5Qfo8dw9nk/p/BPP3eP5VGzNHs/d
4/m0zj/xfHrJ/m1a5594Pq0ez6ej8Q49nrvH82mdf+K5ezyfjruzx3P3eD6t
8088d4/n07Epxx+eu8fz6biWPZ67x/Pp2JvjD8/d4/l0PJTjB8/d4/m0zj/x
3D2eT8eR7PHcPZ5Px13Z47l7PJ+OO3L84Ll7PJ/W+Seeu8fz6Xgkezx3j+fT
Ov/Ec/d4Ph2F7PHcPZ5Px3iOPzx3j+fTOv/Ec/d4Ph2rssdz93g+rfNPPHeP
59PxYI5fPHeP59M6/8Rz93g+HTtz/OG5ezyf1vknnrvH8+kYyPGH5+7xfDpO
ZY/n7vF8WuefeO4ez6djdY4fPHeP59M6/8Rz9/x3JnZkj+cz6vF8RuefeD6j
Hs9nopw9nrvH8xmdf+K5ezyfiXU5fvDcPZ7PxPLs8dw9ns/o/BPP3eP5TNyf
4xfP3eP5jM4/8dw9ns/E9hx/eO4ez2d0/onn7vF8Jjpy/OG5ezyf0fknnrvH
8xmdf+K5ezyf0e/f4rl7PJ/R+Seeu8fzGf3+LZ67x/MZnX/iuXs8n4kr2eO5
ezyf0fknnrvH85lYn+MHz93j+Yx+/xbP3eP5jM4/8dw9ns/o92/x3D2ez+j6
Tzx3j+czOv/Ec/d4PrPk/NM9ns/o/BPP3eP5TAzn+Mdz93g+E41cP+K5ezyf
0fknnrvH8xmdf+L5rHo8n401OT7wfFY9ns/q+k88d4/ns3Ft0fmrezyfjb05
f+K5ezyfjUN5+3juHs9ndf6J5+7xfFbnn3juHs9nY8Wi389yj+ezuv4Tz93j
+azOP/HcPZ7P6vwTz93j+Ww8kOMDz93j+azOP/HcPZ7P6vwTz93j+Wzcl+MH
z93j+ayu/8Rz93g+q/NPPHeP57PxYI5fPHeP57OxPN8fPHeP57M6/8Rz93g+
q/NPPHeP57MxkPMnnrvH8+bzW7Q/d4/nszr/xHP3eD6r8088d4/nzfGbjw/P
3eP5bPx0Pj88d4/ns/FYvj547h7PZ6Oc94/n7vG8Of7z/cFz93g+q/NP/r6o
Hs+LOv/E86J6JoRi7Mvxi+fu8bwYdy7an7vH86LOP/HcPZ4Xdf6J5+7xvBhj
OT/juXs8L+r8E8/d43lR55947h7Pm1/n+MVz93jevP18f/DcPZ4Xdf6J5+7x
vKjzTzx3j+fNPt9fPHeP58WYXbQ/d4/nRZ1/4rl7PC/G+rx9PHeP58W4mutP
PHeP58U4mPt/PHeP58VYU6XHc/d4XoyVOX7w3D2eF2NL7p/w3D2eF2PrB+nx
3D2eF3X+iefu8bwYw3n/eO4ez4vRyP07nrvH82KsXU6P5+7xvKjzTzx3j+fF
2JXzL567x/NibPoBPZ67x/Oizj/x3D2eF3X+iefu8XwuHsr9O57PqcfzuSjW
6fF8Tj2ez+n8E8/d4/lc3JXzL567x/O5uCPHD567x/O52Fijx3P3eD6n8088
d4/nc7E7xy+eu8fzuSjk/eO5ezyf0/knnrvH8zmdf+K5ezyfi1U5fvHcPZ7P
xZ4cv3juHs/n4sEcv3juHs/nYlmOHzx3j+dzsTPHL567x/M5nX/iuXs8n9P5
J567x/O56Mz7x3P3eD4XK3L84rl7PJ/T+Seeu8fzOZ1/4rl7PJ+LHTl+8dw9
ns/FY+k3nrvH8zmdf+K5ezyfi65cf+K5ezyfi3U5fvDcPZ7P6fwTz93z9s7p
/BPP3eP5XNyf4xfP3eP5XNyW4wfP3fNnXuefeD6vHs/nY3OOXyaEefV4Ph8d
+fNPPHeP5/M6/8Rz93g+r/NPPHeP5/NxT44fPHeP5/Nxb45fPHeP5/M6/8Rz
93g+H9ty/OK5ezyfjyt5/3juHs/ndf6J5+7xfF7nn3juHs/n42rOf3juHs/n
42COXzx3j+fzOv/Ec/d4Pq/zTzx3j+fzsSXHL567x/P52JrjF8/d4/m8zj/x
3D2ez8dw3j+eu8fz+Wjk/Ifn7vF8XuefeO4ez+d1/onn7vF8Pnbl+MVz93g+
H5ty/OK5ezyf1/knnrvH8/nYm37juXs8n4+HcvzguXs8n9f5J567x/N5nX/i
uXs8n4+7cvziuXs8n487cvzgeUk9npd0/onnJfV4XtL5J567x/NS7M7xi+fu
8byk8088d4/npSX//q17PC/FfTl+8Nw9npdiVY5fPHeP5yWdf+K5ezwvxYM5
fvHcPZ6XYlmOHzx3j+el2JnjF8/d43lJ55947h7PS7r+E8/d43kpOvP+8dw9
npd0/onn7vG8pPNPPHeP56V4IMcvnrvH81LsyPGL5+7xvKTzTzx3j+clXf+J
5+7xvBRd6Teeu8fzks4/8dw9npd0/onn7vG8FPty/OK5ezxvPv4cv3juHs9L
Ov/Ec/d4XtL5J567x/NSbM7xi+fu8bwUx9NvPHeP5yVd/4nn7vG8pOs/+duy
ejwv6/wTz8vqmRDKuv4Tz93jeTkez/cXz93jeVnXf+K5ezwv6/wTz93jeTnG
8/bx3D2el3X9J567x/Oyzj/x3D2el2PTon/fxj2el2NV3j+eu8fzsq7/xHP3
eF7W+Seeu8fzctTz/cFz93he1r8/hOfu8bys8088d4/nzee/6Pf73eN5OT6z
6N/XcY/nZV3/iefu8bys8088d4/n5Viz6PoA93hejmu5fsBz93hejr0V7h/P
3eN5WeefeO4ez8tRTL/x3D2el+NIrn/x3D2el3X+iefu8bys8088d4/n5diY
6088d8/0XI5Hcv+P5+7xvKzzTzx3j+dlnX/iuXs8r8R4gx7PK+rxvKLzTzyv
qMfzis4/8dw9nldiT64f8Nw9nlfiwdz/47l7PK/o/BPP3eN5ReefeO4ezyvx
cI4fPHeP55UYyJ8f4bl7PK9EZ94/nrvH80qsyPkXz93jeSVW5/jBc/d4XtH5
J567x/OKzj/x3D2eV+KxHL947h7PK1HO+8dz93he0fknnrvH84rOP/HcPZ5X
YnmOXzx3j+cVnX/iuXs8r+j8E8/d43klbsvxg+fu8bwS23P84rl7PK/o/BPP
3eN5JY6n33juHs8r0Z33j+fu8bz5dY5fPHeP5xWdf+K5ezyvxL05fvHcPZ5X
4vEcv3juHs8rOv/Ec/f8t6rzTzyvqsfzahzO9SeeV9XjeTXW5/jBc/d4Xo13
c/7Dc/d4Xo2DOX7x3D2eV2NNjl88d4/nVZ1/4rl7PK/q/BPP3eN5Nbbm+MVz
93hejQP58yM8d4/nVV3/iefu8byq6z/x3D2eV2Ntjh88d4/nVf37t3juHs+r
uv4Tz93jeVXXf+K5ezyvxrW8fzx3j+dVXf+J5+7xvKrrP/HcPZ5Xo5jzH567
x/NqHMnxi+fu8bwad+X4xXP3eF7V9Z947h7Pq7Exxy+eu8fzqv79ITx3j+dV
Xf+J5+7xvBqFvH88d4/n1RjP+Q/P3eN5Vdd/4rl7PK/q+k88d4/n1diT4xfP
3eN5Vf//VnheU4/nNV3/iec19Xhei52L/v0R93hei4dz/OC5ezyv6fpPPHeP
57XoXPTvj7nH81qsWPTvl7jH81qszvGD5+7xvKbrP/HcPZ7XdP0nnrvH81o8
luMXz93jeU3Xf+K5ezyv6fpPPHeP57VYl+MHz93jeS2W5/jFc/d4XtP1n3ju
Hs9ruv4Tz93jeS1uy/GD5+7xvBYdeft47h7Pa7r+E8/d43ktjqffeO4ez2vR
nfeP5+7x/ObXN68Pc4/nNV3/iefu8bwW9+b4xXP3eF6LOxf9frt7PK/p+k88
d4/nNV3/iefu8bwWh9NvPHeP57V47sbC/bl7PK/Fu9cX7s/d43ktDub45e/r
6vG8Hmty/OJ5XT0TQl3Xf+K5ezyv6/pPPHeP5/XYmuMXz93jeT02LPr9dvd4
Xtf1n3juHs/ruv4Tz93jeV3Xf+K5ezyvx868fTx3j+d1Xf+J5+7xvK7rP/Hc
PZ7X4+qif9/OPZ7X9f+/gufu8byu6z/x3D2e13X9J567x/N6/GmOXzx3j+f1
uGvR/tw9ntd1/Seeu8fzemzM8Yvn7vG8+XU+Pzx3j+d1Xf+J5+7xvK7rP/Hc
PZ7XYzznPzx3j+f1uC/Xn3juHs/rsSr3/3juHs/ruv4Tz93jeT0ezPUnnrvH
83osy/03nrvH87qu/8Rz93hej4dz/OK5ezyvx0CuP/HcPZ43ojPvH88b6vG8
oes/8byhHs8bsTr9xnP3eN6IB3L/hOfu8bwROz5Ej+fu8bwRj+X4xXP3eN6I
ct4/nrvH80Z05fk7nrvH84au/8Rz93jeiOU5fvHcPZ43Yl+uH/DcPZ434v7c
/+O5ezxv6PpPPHeP543YnuMXz93jeSM25/jFc/d43ojj6Teeu8fzRnTn/eO5
ezxvfp3jF8/d43kj7snxg+fu8byh6z/x3D2eN+LxHL947h7PG7Etxy+eu8fz
RlzJ+8dz93jeiMPpN567x/NGrM/xg+fu8bwR7+b+G8/d43lD13/iuXs8b8Sa
HL947h7PG7Eyxw+eu+fla8SWHL947h7PG7E1xy+eu7/5vzuQfv9/2m/5tg==

           "]]},
         AspectRatio->Full,
         PlotRange->{Automatic, {0, 1}},
         PlotRangePadding->None], {0, 0}, {0, 0}, {1.0005, 1}],
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{{0, 1.0005}, {0, 1}},
       PlotRangePadding->{
         Scaled[0.017142857142857144`], 
         Scaled[0.1]}], {180, -100}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]]}, InsetBox[
     StyleBox[
      TemplateBox[{
       StyleBox[
        "\" | \"", FontSize -> 14, FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"\"1\"", "\" s\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"2000", "\" Hz\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False]},
       "RowWithSeparator"], "DialogStyle",
      StripOnInput->False], {355, -159}, Scaled[{1, 0}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{5, -158}, {29, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       PolygonBox[
        NCache[{{11, -157}, {11, -136}, {20., Rational[-293, 2]}, {
          11, -157}}, {{11, -157}, {11, -136}, {20., -146.5}, {11, -157}}]], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{
      "MouseClicked" :> If[False, Sound`EmitMIDI[None]; Sound`EmitSampledSound[
           SampledSoundList[CompressedData["
1:eJxdW3lczYnbJUqIX41QBpEIRau15doqa4RW2ixDEVkGlb0xQgqJsWUbZfnZ
t0JzZRnKmkaWslW2jBapXlG972eOec73bT6f+cPnce/tPt/nOec556TjpNlj
p2rUq1ev/v/9n9moXp3/SlSNJurbdEnca//9z2r8+eSlf+tN1iaM7Bd2oU49
TeqN5z1RH//Pn1LH38+Qus7eyU+u5N2t8/pMqUe9XfCl8GmW1PF+2VLfVxvT
sZ1eRZ33fyr1/j8vq6h36NW/f1bj855LvdO60revnP6nzufL31fNuTQ/q2ip
vJ8aP0++1H9vNf5YYnhVnZ/vjdRnxRSm5ByR76PGz6uV+m+9875z82cc/1bn
5y+U1z+8fHnAxpPSTzW+T+m/f1+V2MPQzrKgRl6P71ckrx+8M93rx+ze8np8
X235/Ljc1OXh0fUc/v/3L5XX96uc1vni9jR5f/SjUD5/vHFxfm5ifXk9+lMm
r9+ed7VJozZ6Uke/msjn60/v4KJK05A6+lchrw9fNdG+bxJfj36+ks9/eNTt
8N6cBlJHf1vJ+/fYXHXOtk1HqaPfOlK/FZampRHRRurof5V8vt2t9bu3p/0g
dTyPTPl8935nQn/S1ZI6no/0Q9WsT9y7qUn8fDyv5vL569SfgqbE/yh1PL8a
+fyvumqN6pwWUsfzdJbPz77Wqo+Zk7bU8XwN5P2Lnpi12WprLHU8b12pj9A0
ufPn8bZ1nn99qV/0KJnqX6EvdcwD99NzTFh1cVgTqWM+ZB9Us9908hvUnPuJ
edGT99+b5L7k3LFXdfargdQd724oCNA2k/fHPHWUekVFheVRM9M689VG6seM
fJd8ce0kdczbD1K/veHXuHUF7evMH/fTPm+suYlZa6ljHvn542+/7D84Rvr5
fT65n3P1jy10f8X9xLy2kNevzz5f8bHGqM78dpF6TYsrLleNzaWOebaSekjY
mK5G0bp15rut1GdNjXk5IchE6pj37lJ/cG1jgmZ8Zh384X6mhpz99M7fUF6P
fTCW+tYXl68PyOpaZz+4n3Yddw61fcr9xL5wPxtZrfd7Ysj9wP7IvqvU3mWH
Ozv0kDr2id+/qOHpovzL3E/sV3upWxxRD/4jsrPUsW9mUg919NU4FFpYBz+5
n45fWqcc3cz9xD52krpn509d93/sVmc/PeT7O/QNfJg6mPuJfeV+3ljwR5qd
Yj+xv12lvmy3SfMoz55Sxz5bS332hpZnD5ZzP7HfHaReXFKS2CGhi9Sx7+ZS
/yv6SNi5AKs6+8/9VP8SvmxuejupAw9MpG4wo1O0pmI/gQ/kT8fRXSa5HNWR
OvCC+xl1qdgkQbGfwA/BE1UTr8EPT14hfwJPuJ/FPy6KCOnO/QS+cD/3bLr4
4YtiP4E33E/V10Fnwp9zP4E/3E/dIQsz19f2kfcHHtlJ/fGJ8cXTFPsJfOJ8
3pz5rN1TY1upA6/6SH2oRseoeor9BH5xP5fHDw7u4mwpdeCZjdRzDy3YcNuz
dx18436GLh4X8voB9xN411Pqmx/k5hpEWNfBP+7nyztGWksV+wk8NJX6bxWr
xmbYcz+Bj/z+B/+zYHTTE/z+wMsO8nyLZ0/o1v+Lfh38JH821lkdURbM/QSe
cj9LrR20K+O4n8BX7qfVlV/uuyj2E3hrIfXWLVvmzyjuJp8P/O0t9ftrDtqW
GPaT1wOP7aVunpDjs8VMVQefB0p9iPfqAQkJg6QOvOZ+pq+PdL2+i/sJ/OZ+
DsiZfydKsZ/Ac1up7ypOKus5l/MJfO8v9S8NcgwfRjpIHXjP/TxwJbTe0yPc
T+A/9zPQe+XtQYr9BB9Iv1SGK98ZxM6xqMMPxKcg96RTIRm9pA6+6Cv1j15b
dp6I5X6CP7ifTfMelezO4X6CT7ifZcM04pdXkz/BL+TPU6PebtFR7Cf4hvO5
Zc2ptkkXZJ6/84/Mu2rjvSdbx9r2l9eDjxx4f8zR8v9mPKAOP/H5m3wzmnvP
bDDx+x++4n4ON3yjv1axn+Av7mf9jomWH8K5n+CzXlL37fXEY2N03zr8RnxK
GaazpE+Co9TBd7xvxy+qjl6gJn+C/8ifeQUFmxop+BN8SP688+uB4m5ZxCfw
I/Gp247HLe8XEJ/Al/2k/ihyn5HrSNEj3/nzJ3n+jY0q9PIHkD/Bp+TP8BP5
uqtsyJ/gV/Kn9ZNhvpke5E/wLeezvN7jv5o7cD7Bv5xPt5ZNv55xtZM6+NiR
P7/+7g09TvD5g58HSV1zd/L+eil8/uBr8uet34fmuDYif4K/LaWe9tOjuFHx
NlIHnxOf2kU0uVCWSHwCvxOfwmIdXm5LJj6B7zmfHrFXDOt1I3+C/8mfk0Nd
vG+f532Ne6CH1Nffzh4b/ZH4hPuA+FT4snGYtYI/cS9wPpOOWOos+CR65/v9
QP35a5fLLb+u4X2Le4L37Vc750fDppM/cV+QP32ss/VuOXE+cW9wPs85N+47
R8GfuD9ED6rmmbZr7nRe9KIa9wjv21kREZ3+fsj7FvcJ+TOukZP7DQPyJ+4V
8ucIyyN7Wyj4E/cL8elbYpHenj2CZ2rcM+TPNd901yVVkT9x35A/7ZKehkT5
kz9x75A/PRNXJ67ZRP7E/UP+/LK00MUkwlnquIdcpG7auOGEyshhfD7/3Ecj
pO4e125WRvRIqeNe4nxq2c3SsFPwJ+4nzufJpDGbQxX8iXtqiNRfWAUnDU5y
kjruK/58zS5FXmh1YqjUcW9xPhdE99+RNYfzifuL/PlgT0hamII/cY8NkPpW
n/tlsRkDpY77bLDUrxe815qcNUTquNecpX77YrPpj0PJn7jfiE+DPvXz+UHB
n7jniE8JWiHLk3OIT7jviE9Lmo0Zd7yC+IR7j/jknTrSpsU38ifuP/Ln1NU6
b9w7kj9xD3I+m3v1M3RT3Le4D3nfBs+cqaq0IX/iXiR/brN6Oc17GvUn7kc+
/7Xjh1s096X+xD3J5189tumUrEzyJ+5L2XfV09S+j2MV/Il7U/BC1efBjJpe
Cv7E/Un9GfcmwSR3F/kT9yj5c2H19M5pnpxP3Kfkz7MlVTGPHIWv1bhXyZ+n
k2MzJ/kI33+/X4lPX2O7rWrVR+4FNe5Z8mfTXc3yu44mf+K+VUk9W3Odq7Yj
+RP3rvCFqkehdsBda/In7l/Op2/eeverGeOkjnt4mNTv7QpefNqe84n7eKTU
zU7t2uet4E/cy6OlPnjy9ILa45xP3M9uUp/zcUXlg2TyJ+7psVLfvXBHk8Q0
4hPua/Lnnfpn24VlEJ9wb5M/v667azkyi/iE+5v41K3Vu8FGuaOljnuc83lJ
o1nyJlPyJ+5zzmerwzMPtlTwJ+514tO0oKAqSwV/4n4fLvWrS3Z2eFRDfMI9
P0rqRpvuOS/R5Xzivid/Oo5bcU5Pj/OJe5/8OfPZ9vQCQ+In7n/y5/ZpZ3LP
GxM/oQc4nzdL7xSvNRshdegDzmfigKhMowvkT+gFzmf/SboBelnkT+gH4pPL
wODfdRX8CT3hJPXaoPslE+3In9AXQ6U+YdiOhPHHiU/QG+TP8753r1VdJj5B
f5A/m6Qs/3lMEOcTeoT82Xfw9qhOczmf0Cfkz5/unN5REc75hF6h/jy5N2PI
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
RQdcY2Te1fBrqT8/GHs81VboT/i35KeUmwtqx3yRfVPDz6X+fNDZL667Qn/C
35V+qerv0T3dMFv8UDX8XurPnv03ptzfxfse/i/xs+ck9zduWX5Shx88mfht
mjf7oifxE/4w+b3ngvOLfygKkDr8YuLnvJNfV8YEED/hH5PfneyGaC2eO0nq
8JOJn3vtWm4JDCK/w1/2532gEbXUXKE/4TcTP+9d73nIdi75Hf5zoNRvt1w4
1V6hP+FHk5+qRw+91ChiotThT0+Setfuh9fl1ZCf4Fezv2ZPA+89jfSXOvxr
3veDdhd5DVHoT/jZ7K/5KYdSD+dAqcPf5n0f2k17Zms98jv8bva37YVx2Q0U
+hP+N++nhNMdlxUaEj/hh7O/waUT9Q7aEz/hjxM/bzvYbUo19pE6/HLqzz81
N/RxVehP+OfEz6ob4w9sMOP9CT+d971xm6u+n/2Jn/DXeT/pd+uTa9WG8we/
nfykav114J1k9hf+u4/UT+Q5Tjz3nvoTfjz5KWSvvvueNPYX/ryv1HW3rwo3
VehP+PXEzx1mPafPy2B/4d9Tf0559XN+yi7eT/DziZ/pZ10inLPYX/j71J+X
yw82DlDoT/j9vD8rVYExhrnsL/x/6s+2TXIttNJ4PyEP4P25f4i3xeZd1J/I
B4if9rGNzDyCiJ/IC3jfb9u37/fqEOpP5AfEz2DDjo7d5pKfkCdQfzYMP99+
xFPqT+QLxM/f9vd3+xbO+x55A/WnX2bM2Vs1Cv/+n/yB/X079PisKwr9iTyC
+vPC67ScObrET+QT7O8fy03WPO5F/Ym8gvqz6ZKqejp6xE/kF+xvJ+P5B708
qT+RZ/B+6tdIX/+FIfET+Qb150CryAXGCv2JvIP307SNPUxPGRM/kX9Qf37x
fn9l1k7mS8hDiJ9HNua3+qDQn8hHqD+90pJWP/MnfiIvIX6+yaza7OBL/Yn8
hPrzzMOnRyPnED+RpxA/n9S/UBLnw/wT+Qrve+1yrcLNCv2JvIX5Z9X9XTvL
LJh/In8hfvZe1qF6mkJ/Io8Rv1TVS+9sG2c7+iPIZ4iffT6ue7HGW+41NfIa
/n585c71NsMU+SfyG+Ln+ZMn596IlXtRjTyHvz807uRl7+LLvO+R7wieqmr0
to6seCx+tBp5D+/749fLlsUr9CfyH8FzVVHSr8POfCQ/IQ+aIq/XDGmR1U6h
P5EPET+bG445NjiC/IS8iPhpU2n+piSc+In8iPjZ+Xlun6O15H/kSbzvA1c4
f7mq0J/IlwKkXhqdqDlBoT+RN7G/sU0DdLZGEz+RP5H/R+19YlZfoT+RR5Gf
UuPDjILjiZ/Ip3gfHTqrMzbJhviJvIr8VBE7bFv70eQn5Fe87zVeG11KVOhP
5FnsbzP3bOOoLPYX+Rbve8vZ/e6FKfQn8i72t32mweT1at73yL/IT35fxuaN
tCV+Ig9jfz8sVj+aqdCfyMeIn9GRM8uNHCZIHXkZ++uy8VP1Dwr9ifyM+Hmh
2a/aZU68P5GnUX/uP9DZJGUz73vka8TPz7fuNZucxP4ibyN+1k40P2CRxf4i
fyM/+UQVXJjiR/2JPI742eOtU7JGLvuLfM5P6j+cHN7o5Armn8jriJ8T5vjf
eljA/iK/4+/fvp75+NDSB7zvkecRP9d8XfT84Ef2F/ke7/uBK5reN1Hkn8j7
iJ/JqzaVRlSwv8j/mC/dG24U8Tqc+Ik8kPenV83l4SWf+ftDyAd531f/1Tcm
OZL4ibyQ96fr9Fb+UR2YfyI/5H1v5j9277po8hPyRPn3VqrIoX+4F3YkfiJf
ZH+938844xfP+x55I/PPFxNLIzbYED+RP7K/q+etumGVwPseeSTzT7s5Jvt6
K/JP5JPsb86mAV7pjsw/kVfyvr99xWzKLDPiJ/JL9rel6lqIeinzT+SZ5Keq
kU4LB9oSP5Fvih+tGjR0aIP/5vG+R95Jfur6yG+tvgPxE/nnr8JPS/o+Mv22
kvc98lDi56Hw9msD39EfQT7K/PPJyCau+zbzvkdeSvzM3x8a0X0t80/kp/RH
egU6zB+ayPseeSrxM3jms8LQfOafyFeJn+n9+46qzGF/kbcKX6uqa0zPaTVg
/on8lfhZec0tIKOA/UUeK/eCqk/X8KR7v/O+Rz5L/Dwf2M3wugn9e+S1mlJf
2LXkSzNF/on8lvh5dvvfrx26SF6kRp7L37/Nsu/U4Uw5+Qn5LvGzKl/HJl9T
8io18l76IxZuHs4+jYifyH+Jn48qJng0/YX4iTyY/P/nqSG9lyvyT+TDxM+i
i+9ezNcmfyMv5n3/2d5v2Lh44ifyY+Kn5oqfg55HT5Y68mTe98Y3Fk7skkD8
RL5MfmrrrFHmojdV6sib2d8xbhtnf0kkfiJ/pn6/a27/6boH8RN5NPu7NOfw
ytvHiZ/Ip8n/8Xv66PRW5J/Iq9nfbOu8jNG57C/ya/LT1e5uRo0diJ/Is9nf
j5WzxqcEsL/It4mfpWeCrXOdiJ/Iu6nfG6Z+fWb8mv1F/k38NFL94nTclfiJ
PJz8PVPbOMFKkX8iHyd+jkrf5bXSk/iJvJz9vdnW/dqj87zvkZ97pP4v6kVm
yw==
            "], 2000], "Preemptive"], 
         FEPrivate`EmitSound[
          SampledSoundList[CompressedData["
1:eJxdW3lczYnbJUqIX41QBpEIRau15doqa4RW2ixDEVkGlb0xQgqJsWUbZfnZ
t0JzZRnKmkaWslW2jBapXlG972eOec73bT6f+cPnce/tPt/nOec556TjpNlj
p2rUq1ev/v/9n9moXp3/SlSNJurbdEnca//9z2r8+eSlf+tN1iaM7Bd2oU49
TeqN5z1RH//Pn1LH38+Qus7eyU+u5N2t8/pMqUe9XfCl8GmW1PF+2VLfVxvT
sZ1eRZ33fyr1/j8vq6h36NW/f1bj855LvdO60revnP6nzufL31fNuTQ/q2ip
vJ8aP0++1H9vNf5YYnhVnZ/vjdRnxRSm5ByR76PGz6uV+m+9875z82cc/1bn
5y+U1z+8fHnAxpPSTzW+T+m/f1+V2MPQzrKgRl6P71ckrx+8M93rx+ze8np8
X235/Ljc1OXh0fUc/v/3L5XX96uc1vni9jR5f/SjUD5/vHFxfm5ifXk9+lMm
r9+ed7VJozZ6Uke/msjn60/v4KJK05A6+lchrw9fNdG+bxJfj36+ks9/eNTt
8N6cBlJHf1vJ+/fYXHXOtk1HqaPfOlK/FZampRHRRurof5V8vt2t9bu3p/0g
dTyPTPl8935nQn/S1ZI6no/0Q9WsT9y7qUn8fDyv5vL569SfgqbE/yh1PL8a
+fyvumqN6pwWUsfzdJbPz77Wqo+Zk7bU8XwN5P2Lnpi12WprLHU8b12pj9A0
ufPn8bZ1nn99qV/0KJnqX6EvdcwD99NzTFh1cVgTqWM+ZB9Us9908hvUnPuJ
edGT99+b5L7k3LFXdfargdQd724oCNA2k/fHPHWUekVFheVRM9M689VG6seM
fJd8ce0kdczbD1K/veHXuHUF7evMH/fTPm+suYlZa6ljHvn542+/7D84Rvr5
fT65n3P1jy10f8X9xLy2kNevzz5f8bHGqM78dpF6TYsrLleNzaWOebaSekjY
mK5G0bp15rut1GdNjXk5IchE6pj37lJ/cG1jgmZ8Zh384X6mhpz99M7fUF6P
fTCW+tYXl68PyOpaZz+4n3Yddw61fcr9xL5wPxtZrfd7Ysj9wP7IvqvU3mWH
Ozv0kDr2id+/qOHpovzL3E/sV3upWxxRD/4jsrPUsW9mUg919NU4FFpYBz+5
n45fWqcc3cz9xD52krpn509d93/sVmc/PeT7O/QNfJg6mPuJfeV+3ljwR5qd
Yj+xv12lvmy3SfMoz55Sxz5bS332hpZnD5ZzP7HfHaReXFKS2CGhi9Sx7+ZS
/yv6SNi5AKs6+8/9VP8SvmxuejupAw9MpG4wo1O0pmI/gQ/kT8fRXSa5HNWR
OvCC+xl1qdgkQbGfwA/BE1UTr8EPT14hfwJPuJ/FPy6KCOnO/QS+cD/3bLr4
4YtiP4E33E/V10Fnwp9zP4E/3E/dIQsz19f2kfcHHtlJ/fGJ8cXTFPsJfOJ8
3pz5rN1TY1upA6/6SH2oRseoeor9BH5xP5fHDw7u4mwpdeCZjdRzDy3YcNuz
dx18436GLh4X8voB9xN411Pqmx/k5hpEWNfBP+7nyztGWksV+wk8NJX6bxWr
xmbYcz+Bj/z+B/+zYHTTE/z+wMsO8nyLZ0/o1v+Lfh38JH821lkdURbM/QSe
cj9LrR20K+O4n8BX7qfVlV/uuyj2E3hrIfXWLVvmzyjuJp8P/O0t9ftrDtqW
GPaT1wOP7aVunpDjs8VMVQefB0p9iPfqAQkJg6QOvOZ+pq+PdL2+i/sJ/OZ+
DsiZfydKsZ/Ac1up7ypOKus5l/MJfO8v9S8NcgwfRjpIHXjP/TxwJbTe0yPc
T+A/9zPQe+XtQYr9BB9Iv1SGK98ZxM6xqMMPxKcg96RTIRm9pA6+6Cv1j15b
dp6I5X6CP7ifTfMelezO4X6CT7ifZcM04pdXkz/BL+TPU6PebtFR7Cf4hvO5
Zc2ptkkXZJ6/84/Mu2rjvSdbx9r2l9eDjxx4f8zR8v9mPKAOP/H5m3wzmnvP
bDDx+x++4n4ON3yjv1axn+Av7mf9jomWH8K5n+CzXlL37fXEY2N03zr8RnxK
GaazpE+Co9TBd7xvxy+qjl6gJn+C/8ifeQUFmxop+BN8SP688+uB4m5ZxCfw
I/Gp247HLe8XEJ/Al/2k/ihyn5HrSNEj3/nzJ3n+jY0q9PIHkD/Bp+TP8BP5
uqtsyJ/gV/Kn9ZNhvpke5E/wLeezvN7jv5o7cD7Bv5xPt5ZNv55xtZM6+NiR
P7/+7g09TvD5g58HSV1zd/L+eil8/uBr8uet34fmuDYif4K/LaWe9tOjuFHx
NlIHnxOf2kU0uVCWSHwCvxOfwmIdXm5LJj6B7zmfHrFXDOt1I3+C/8mfk0Nd
vG+f532Ne6CH1Nffzh4b/ZH4hPuA+FT4snGYtYI/cS9wPpOOWOos+CR65/v9
QP35a5fLLb+u4X2Le4L37Vc750fDppM/cV+QP32ss/VuOXE+cW9wPs85N+47
R8GfuD9ED6rmmbZr7nRe9KIa9wjv21kREZ3+fsj7FvcJ+TOukZP7DQPyJ+4V
8ucIyyN7Wyj4E/cL8elbYpHenj2CZ2rcM+TPNd901yVVkT9x35A/7ZKehkT5
kz9x75A/PRNXJ67ZRP7E/UP+/LK00MUkwlnquIdcpG7auOGEyshhfD7/3Ecj
pO4e125WRvRIqeNe4nxq2c3SsFPwJ+4nzufJpDGbQxX8iXtqiNRfWAUnDU5y
kjruK/58zS5FXmh1YqjUcW9xPhdE99+RNYfzifuL/PlgT0hamII/cY8NkPpW
n/tlsRkDpY77bLDUrxe815qcNUTquNecpX77YrPpj0PJn7jfiE+DPvXz+UHB
n7jniE8JWiHLk3OIT7jviE9Lmo0Zd7yC+IR7j/jknTrSpsU38ifuP/Ln1NU6
b9w7kj9xD3I+m3v1M3RT3Le4D3nfBs+cqaq0IX/iXiR/brN6Oc17GvUn7kc+
/7Xjh1s096X+xD3J5189tumUrEzyJ+5L2XfV09S+j2MV/Il7U/BC1efBjJpe
Cv7E/Un9GfcmwSR3F/kT9yj5c2H19M5pnpxP3Kfkz7MlVTGPHIWv1bhXyZ+n
k2MzJ/kI33+/X4lPX2O7rWrVR+4FNe5Z8mfTXc3yu44mf+K+VUk9W3Odq7Yj
+RP3rvCFqkehdsBda/In7l/Op2/eeverGeOkjnt4mNTv7QpefNqe84n7eKTU
zU7t2uet4E/cy6OlPnjy9ILa45xP3M9uUp/zcUXlg2TyJ+7psVLfvXBHk8Q0
4hPua/Lnnfpn24VlEJ9wb5M/v667azkyi/iE+5v41K3Vu8FGuaOljnuc83lJ
o1nyJlPyJ+5zzmerwzMPtlTwJ+514tO0oKAqSwV/4n4fLvWrS3Z2eFRDfMI9
P0rqRpvuOS/R5Xzivid/Oo5bcU5Pj/OJe5/8OfPZ9vQCQ+In7n/y5/ZpZ3LP
GxM/oQc4nzdL7xSvNRshdegDzmfigKhMowvkT+gFzmf/SboBelnkT+gH4pPL
wODfdRX8CT3hJPXaoPslE+3In9AXQ6U+YdiOhPHHiU/QG+TP8753r1VdJj5B
f5A/m6Qs/3lMEOcTeoT82Xfw9qhOczmf0Cfkz5/unN5REc75hF6h/jy5N2PI
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
RQdcY2Te1fBrqT8/GHs81VboT/i35KeUmwtqx3yRfVPDz6X+fNDZL667Qn/C
35V+qerv0T3dMFv8UDX8XurPnv03ptzfxfse/i/xs+ck9zduWX5Shx88mfht
mjf7oifxE/4w+b3ngvOLfygKkDr8YuLnvJNfV8YEED/hH5PfneyGaC2eO0nq
8JOJn3vtWm4JDCK/w1/2532gEbXUXKE/4TcTP+9d73nIdi75Hf5zoNRvt1w4
1V6hP+FHk5+qRw+91ChiotThT0+Setfuh9fl1ZCf4Fezv2ZPA+89jfSXOvxr
3veDdhd5DVHoT/jZ7K/5KYdSD+dAqcPf5n0f2k17Zms98jv8bva37YVx2Q0U
+hP+N++nhNMdlxUaEj/hh7O/waUT9Q7aEz/hjxM/bzvYbUo19pE6/HLqzz81
N/RxVehP+OfEz6ob4w9sMOP9CT+d971xm6u+n/2Jn/DXeT/pd+uTa9WG8we/
nfykav114J1k9hf+u4/UT+Q5Tjz3nvoTfjz5KWSvvvueNPYX/ryv1HW3rwo3
VehP+PXEzx1mPafPy2B/4d9Tf0559XN+yi7eT/DziZ/pZ10inLPYX/j71J+X
yw82DlDoT/j9vD8rVYExhrnsL/x/6s+2TXIttNJ4PyEP4P25f4i3xeZd1J/I
B4if9rGNzDyCiJ/IC3jfb9u37/fqEOpP5AfEz2DDjo7d5pKfkCdQfzYMP99+
xFPqT+QLxM/f9vd3+xbO+x55A/WnX2bM2Vs1Cv/+n/yB/X079PisKwr9iTyC
+vPC67ScObrET+QT7O8fy03WPO5F/Ym8gvqz6ZKqejp6xE/kF+xvJ+P5B708
qT+RZ/B+6tdIX/+FIfET+Qb150CryAXGCv2JvIP307SNPUxPGRM/kX9Qf37x
fn9l1k7mS8hDiJ9HNua3+qDQn8hHqD+90pJWP/MnfiIvIX6+yaza7OBL/Yn8
hPrzzMOnRyPnED+RpxA/n9S/UBLnw/wT+Qrve+1yrcLNCv2JvIX5Z9X9XTvL
LJh/In8hfvZe1qF6mkJ/Io8Rv1TVS+9sG2c7+iPIZ4iffT6ue7HGW+41NfIa
/n585c71NsMU+SfyG+Ln+ZMn596IlXtRjTyHvz807uRl7+LLvO+R7wieqmr0
to6seCx+tBp5D+/749fLlsUr9CfyH8FzVVHSr8POfCQ/IQ+aIq/XDGmR1U6h
P5EPET+bG445NjiC/IS8iPhpU2n+piSc+In8iPjZ+Xlun6O15H/kSbzvA1c4
f7mq0J/IlwKkXhqdqDlBoT+RN7G/sU0DdLZGEz+RP5H/R+19YlZfoT+RR5Gf
UuPDjILjiZ/Ip3gfHTqrMzbJhviJvIr8VBE7bFv70eQn5Fe87zVeG11KVOhP
5FnsbzP3bOOoLPYX+Rbve8vZ/e6FKfQn8i72t32mweT1at73yL/IT35fxuaN
tCV+Ig9jfz8sVj+aqdCfyMeIn9GRM8uNHCZIHXkZ++uy8VP1Dwr9ifyM+Hmh
2a/aZU68P5GnUX/uP9DZJGUz73vka8TPz7fuNZucxP4ibyN+1k40P2CRxf4i
fyM/+UQVXJjiR/2JPI742eOtU7JGLvuLfM5P6j+cHN7o5Armn8jriJ8T5vjf
eljA/iK/4+/fvp75+NDSB7zvkecRP9d8XfT84Ef2F/ke7/uBK5reN1Hkn8j7
iJ/JqzaVRlSwv8j/mC/dG24U8Tqc+Ik8kPenV83l4SWf+ftDyAd531f/1Tcm
OZL4ibyQ96fr9Fb+UR2YfyI/5H1v5j9277po8hPyRPn3VqrIoX+4F3YkfiJf
ZH+938844xfP+x55I/PPFxNLIzbYED+RP7K/q+etumGVwPseeSTzT7s5Jvt6
K/JP5JPsb86mAV7pjsw/kVfyvr99xWzKLDPiJ/JL9rel6lqIeinzT+SZ5Keq
kU4LB9oSP5Fvih+tGjR0aIP/5vG+R95Jfur6yG+tvgPxE/nnr8JPS/o+Mv22
kvc98lDi56Hw9msD39EfQT7K/PPJyCau+zbzvkdeSvzM3x8a0X0t80/kp/RH
egU6zB+ayPseeSrxM3jms8LQfOafyFeJn+n9+46qzGF/kbcKX6uqa0zPaTVg
/on8lfhZec0tIKOA/UUeK/eCqk/X8KR7v/O+Rz5L/Dwf2M3wugn9e+S1mlJf
2LXkSzNF/on8lvh5dvvfrx26SF6kRp7L37/Nsu/U4Uw5+Qn5LvGzKl/HJl9T
8io18l76IxZuHs4+jYifyH+Jn48qJng0/YX4iTyY/P/nqSG9lyvyT+TDxM+i
i+9ezNcmfyMv5n3/2d5v2Lh44ifyY+Kn5oqfg55HT5Y68mTe98Y3Fk7skkD8
RL5MfmrrrFHmojdV6sib2d8xbhtnf0kkfiJ/pn6/a27/6boH8RN5NPu7NOfw
ytvHiZ/Ip8n/8Xv66PRW5J/Iq9nfbOu8jNG57C/ya/LT1e5uRo0diJ/Is9nf
j5WzxqcEsL/It4mfpWeCrXOdiJ/Iu6nfG6Z+fWb8mv1F/k38NFL94nTclfiJ
PJz8PVPbOMFKkX8iHyd+jkrf5bXSk/iJvJz9vdnW/dqj87zvkZ97pP4v6kVm
yw==
           "], 2000], "Preemptive"]], Method -> "Preemptive", 
       PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{29, -158}, {53, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       RectangleBox[{35, -152}, {47, -141}], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[False, Sound`EmitSampledSound[
           SampledSoundList[{{0.}}, 8000], "Preemptive"]; Sound`StopMIDI[], 
         FEPrivate`EmitSound[
          SampledSoundList[{{0.}}, 8000], "Preemptive"]], Method -> 
       "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    {GrayLevel[0.75], 
     StyleBox[LineBox[{{0, 0}, {360, 0}, {360, -164}, {0, -164}, {0, 0}}],
      Antialiasing->False]}},
   ContentSelectable->False,
   ImageSize->250,
   PlotRange->{{0, 360}, {-164, 0}},
   PlotRangePadding->1],
  Sound[
   SampledSoundList[CompressedData["
1:eJxdW3lYzvn6JkrWUyOUkUiEotXa8iKVNUIrbZahiCyDyt4YIYXE2LKNshz7
VmheWYayppGlbJUtQyXVEdXvuuY2z/39df6b61Hp8z7PvTodJ84aM6V+vXr1
shrVq/O/ElWjCXo2XZL22H//bzX++8TFf+dN1iSO6Bd+vs48XeaN5z5WH/vP
nzLHn8+UebM9kx5fzr9T5+uzZB79Zv6XoifZMsf3y5H53trYjoa6FXW+/xOZ
9/95aUW9gy///W81ft4zmXdaW/rmpfP/6vx8+fOq2RfnZX9cIt9Pjb9Pgcx/
bz3uaFJEVZ2/32uZz4wtSs09LL+PGn9frbR/5533np03/di3On//Ivn6B5cu
DdhwQt5Tjd+n9N8/r0rqYWBnWVgjX4/f76N8vdOODO8fc3rL1+P31ZafH5+X
tiwipp7D///9S+Xr+1VO7XxhW7p8f7xHkfz8ccbFBXlJ9eXr8T5l8vXb8q80
adRWV+Z4ryby8/WmdXBVpWvIHO9XIV8fsXKCfd9kfj3e86X8/AdH3A/tyW0g
c7xva/n+PTZVnbVt21HmeO9mMr8Znq6lEdlW5nj/Kvn5djfX7dqW/oPM8Xlk
yc/36Hc67CcdLZnj85H3UDXvE/92SjJ/Pj6vFvLz16o/BU9O+FHm+Pxq5Od/
1VFrVOe2lDk+Txf5+TlXW/cxc9aWOT5fffn+Hx+btd1iayxzfN46Mh+uaXL7
z2Pt6nz+9WV+wbNkSkCFnsyxD7xPr9Hh1cXhTWSO/ZB7UM163cl/UAveJ/ZF
V77/nmSPxWePvqxzXw1k7nhnfWGgtpl8f+xTR5lXVFRYHjEzrbNfbWV+1Mhv
8Re3TjLHvv0g81vrf41fW9i+zv7xPu3zx5ibmLWROfaRP3/crRf9nWLlPb/v
J+9zjt7RBR4veZ/Y15by9etyzlV8qDGqs79dZF7T8rLrFWNzmWOfrWQeGj66
q1GMTp39bifzmVNiX4wPNpE59r27zO9f3ZComZBVB394n2mhZz69DTCQr8c9
GMt8y/NL1wZkd61zH7xPu447htg+4X3iXnifjazW+T824H3gfuTeVWqfskOd
HXrIHPfE3/9jw1MfCy7xPnFf7WVucVjt9EdUZ5nj3sxkHubop3EwrKgOfvI+
Hb+0ST2yifeJe+wkc6/On7ru+9Ctzn16yu/v0DfoQZoT7xP3yvu8Pv+PdDvF
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
pTdKDLb/KHP4Ge7nfxq+Ujf5XfqC7/6G+/nx+N0BbT4xH4LfkX1SWdS/87fX
DvpP+B/ZR5XDyi6rPnuNkzn8EPdzdLfbgxYq+BP+iPv5X4d6we0V/Am/NFrm
DQ9udZ2o4E/4J96/tc0p314K/oSfGivzwLRbodp5rjKHvyJ/xrq+XpZbOEzm
8Fvkz4tZtfFHP4yUOfwX+bP8SEz2gMjRMocf4342m2vgd6jWXebwZ9xP/XSr
Xrs6kD/h17ifbz/fvFTekfsJ/0b9NLhx7evtCv6En3OT+b0WW7X2KPwn/B3z
25rfThrMU/hP+D36T/NOt8xdbbmf8H/0n75HXqnaOhA/4QfpP6P71I754Ez8
hD+kvldlvLEvM5U+Rw2/SP3UIWBjxvaL9J/wj9RPQ7wtrLYtp/+EnyQ/LbuU
6Tj3PvU9/CX5Ke+v6skGCv8Jv6kv+933neVadbm9zOE/54u+z6w58ehkFPcT
fpT+83/RN9+vjOF+wp/Sf3Zp+arGO4H7Cb/K/Ty2RjNl1KrOct/wr9zP4iuO
D7VuSF+hhp/lfmr17q3lWlUu+gn+lvv56ZmPb/drzG/hd7mfVvrx4S816T/h
f7mfhl3VKZ1f8f7hh7mf905bNHZQ+E/4Y+5nj4yJFgXnqO/hl3n/Vz9mHrpa
SH6Cfya/f1pYmLblA/kJfpr336FBzb2QCvIT/DX1vdu6NoUOteQn+G3u56I2
VpU62uR3+G/u54PRnTXnaPO+4ce5n3+3OhmbGzNG5vDn3M/mM74G6in8J/w6
9zN4Wc9V5z25n/Dv1E/XNgUdCZzG/YSfp35aPy4zuIED9xP+nvj5x7OCRTnO
3E/4ffrPv6dVxx10437C/1Pfty1rvW+RF/ETeYAiv15seXZUIPET+QD1/YUG
+ydvsCV+Ii9Q5GPr2hUcjaP/RH5A/TRs1ue0Tu+Z3yJPoH6qP6KHZt9GzEeQ
L3A//QIDzZ7pcz+RN7SQ+0+dF+/+S3fuJ/IH9p9rBxfYtVL4T+QRzG9T73xz
e5vE/UQ+wfz2jXfriReOcT+RV3A/j84dYPanoeQt3/ML+s8cs+DIN++kD1Uj
z+B+NllgcXboPua3yDe4n5Fan1Lbj2B+i7yD+2lj4a01fRb9J/KP7vI+5WYB
B8dnUN8jD5G+WOU+YOPd+gr/iXyE+a3XofyqsQr/ibyE+e1K22/NTWsV+dg/
+Qn95/YVf6U1LZF9VCNP4X4uzhtkcfMi81vkK9zPNVNTr1Vbt5E58hbuZ1Bi
T6sj/bLq9NOKfMzu+XQbX/pP5DFyr6pJf3po/HSP/hP5DP1nbKWf6eNw+k/k
NfSfRU03jFy6lv4T+Q3959NiQ5fQE/J5q5Hn0H/639T+ydZd8Ox7vkP/qXHu
gSpWRf+JvIf+c6Szs8298fSfyH+o70PbmUQVp/jJ3w95kKfMG18JMjgZ4SZz
5ENe/PySHDZfTuf9Iy/ykfnJ6ZlG5i7ET+RH42WeYel1MEHhP5EnTZD5i/IC
61o3D5kjXyJ+Vp4Puzgt21PmyJuIny2WVTvf9/KWOfIn4mdn5zV37fJ8ZI48
ivwUrtfz5DCF/0Q+NU7myYmu1wwV/hN5lQf5pWvQo5L71E/Ir/h+DU5FvL+S
S35CnuUt863thy0dPof8hHyL+Hm8IEf7TAXfF3kX8fP6gUkb20eS35F/Ud8/
Cy35MbqW74s8jPq+3Hrx/tIoL5kjHyO/tylp6X9Wh/iJvIzv6xzRY/Zqhf9E
fkZ+n9vQ9ZcJCv+JPI3vuyc2cIuFwn8iX+N+3tWPOKRhy/1E3kb/uTQr41lI
IvcT+Rv10+bNntP+Mub7IY+jfjoyvqDUIZn7iXyO+ulqh7DIZDO+H/I68lPI
lrKWgxX+E/kd9VOBR0vD8mnET+R5fF/dF+aWN2YTP5HvcT9VIS5O2xX+E3kf
/Wfo5wDPmYr8Fvkf/ef2JeHBAxX5LfJA+s8M7fhFegncT+SDxM9FQ3Oul7lx
P5EXcj8T5umvLdpG/4n8kPuZ7Kae/mMA8xHkidzPBpM+bUgPo/9Evsj9fOTX
+OPWQO4n8kb2n0+dzYu1FP4T+SP3813AvK/DfeU91Mgj2X/28w1odSSX+gn5
JPdz4sx2/rWh0veokVdS3yfM3Gg3VuE/kV/K562apb/0QcZV9p/IM7mf4en5
xxcp/CfyTfGTqiW2i7KtjOg/kXdyP5OHf7sySpv7ifyT/WflIJPer6y5n8hD
uZ9HDhzYN++C3NP3fJT+81Ev53R9hf9EXsr9LF86yKvrb8I33/NT+k/bYQvf
/GHP/USeKnihKpsw2yws21C+Hvkq9f16/8PNp7hxP5G3Sl6m+uBsqpWeqvj3
ff/kr9RP8/sVb9U8zvtHHit8rrKpKl53MYv6Hvks9X3Kwo/73WJl39XIa+k/
3xt7PtFW+E/kt+Sn1Bvza0d/kXtTI8+l/7zf2T++u8J/It+V91LV361zqmGO
5KFq5L30nz37b0i9t5P6Hvkv8bPnRI/X7tn+MkcePIn4bZo/64IX8RP5MPm9
5/xzi374GChz5MXEz7knvq6IDSR+Ij8mvzvbDdZaNGeizJEnEz/32LXaHBRM
fke+HEB9oBG9xFzhP5E3Ez/vXut50HYO+R35c5DMb7VaMMVe4T+RR5OfqkcN
udgocoLMkU9PlHnX7ofW5teQn5BX833NngTdfRIVIHPk19T3g3Z99B6s8J/I
s/m+5icdSj1dgmSOfJv6Pqyb9ow2uuR35N1833bnx+Y0UPhP5N/UT4mnOi4t
MiB+Ig/n+4aUTtA9YE/8RD5O/LzlYLcxzdhX5sjL6T//1Fzfx03hP5GfEz+r
ro/bv96M+hN5OvW9cdsrfp8DiJ/I16mf9Lr1ybNqy/1D3k5+UrX5OvB2Ct8X
+buvzI/nO044+47+E3k8+Sl0j57H7nS+L/J5P5nrbFsZYarwn8jriZ/bzXpO
m5vJ90V+T/85+eXPBak7qZ+Q5xM/M864Rrpk832R79N/Xio/0DhQ4T+R91N/
VqqCYg3y+L7I/+k/2zXJs9BKp35CH0D9uW+wj8WmnfSf6AeIn/Zxjcw8g4mf
6Auo77fu3ft7dSj9J/oD4meIQUfHbnPIT+gT6D8bRpxrP/wJ/Sf6BeLnb/v6
u3+LoL5H30D/6Z8Ve+ZmjSK//6d/4Pu+GXJs5mWF/0QfQf95/lV67mwd4if6
Cb7vH8tMVj/qRf+JvoL+s+niqnrNdImf6C/4vp2M5x3w9qL/RJ9B/dSvkZ7e
cwPiJ/oN+s+BVlHzjRX+E30H9dPUDT1MTxoTP9F/0H9+8Xl3eeYO9kvoQ4if
hzcUtH6v8J/oR+g/vdOTVz0NIH6iLyF+vs6q2uTgR/+J/oT+8/SDJ0eiZhM/
0acQPx/XP18S78v+E/0K9b12uVbRJoX/RN/C/rPq3s4dZRbsP9G/ED97L+1Q
PVXhP9HHSF6q6qV7pq2LHfMR9DPEzz4f1j5f7SN6TY2+hv8+vnLHOpuhiv4T
/Q3x89yJE3Oux4leVKPP4b8fGnvikk/xJep79DuCp6oa3S0jKh5JHq1G30N9
f+xa2dIEhf9E/yN4rvqY/OvQ0x/IT+iDJsvXa4a2zDZU+E/0Q8TPFgajjzpF
kp/QFxE/bSrNX5dEED/RHxE/Oz/L63OklvyPPon6Pmi5y5crCv+JfilQ5qUx
SZrjFf4TfRPfN65pYLMtMcRP9E/k/5F7HpvVV/hP9FHkp7SEcKOQBOIn+inq
o4Nnmo1JtiF+oq8iP1XEDd3afhT5Cf0V9b3GK6OLSQr/iT6L79vcI8c4Opvv
i36L+t5yVr+74Qr/ib6L79s+S3/SOjX1Pfov8pP/lzH5I2yJn+jD+L7vF6kf
zlD4T/RjxM+YqBnlRg7jZY6+jO/ruuFT9Q8K/4n+jPh5vvmv2mXO1J/o0+g/
9+3vbJK6ifoe/Rrx8/PNu80nJfN90bcRP2snmO+3yOb7on8jP/lGF56f7E//
iT6O+NnjjXOKRh7fF/2cv8x/ODGs0Ynl7D/R1xE/x88OuPmgkO+L/o7//vbV
jEcHl9ynvkefR/xc/XXhswMf+L7o96jvBy5ves9E0X+i7yN+pqzcWBpZwfdF
/8d+6e4wo8hXEcRP9IHUn941l4aVfOa/H0I/SH1f/Vff2JQo4if6QupPt2mt
A6I7sP9Ef0h9bxYwZs/aGPIT+kT5/1upoob84VHUkfiJfpHv6/Nu+mn/BOp7
9I3sP59PKI1cb0P8RP/I9101d+V1q0Tqe/SR7D/tZpvs7a3oP9FP8n1zNw7w
znBk/4m+kvr+1mWzyTPNiJ/oL/m+rVRXQ9VL2H+izyQ/VY1wXjDQlviJflPy
aNWgIUMa/Def+h59J/mp60P/NXoOxE/0n78KPy3u+9D02wrqe/ShxM+DEe3X
BL1lPoJ+lP3n4xFN3PZuor5HX0r8LNgXFtl9DftP9KfMR3oFOcwbkkR9jz6V
+Bky42lRWAH7T/SrxM+M/n1HVubyfdG3Cl+rqmtMz2o1YP+J/pX4WXnVPTCz
kO+LPlb0gqpP14jku79T36OfJX6eC+pmcM2E+T36Wk2ZL+ha8qW5ov9Ef0v8
PLPt71cOXaQvUqPP5b+/zbbv1OF0OfkJ/S7xs6qgmU2BpvRVavS9zEcs3D1d
fBsRP9H/Ej8fVoz3bPoL8RN9MPn/z5ODey9T9J/oh4mfHy+8fT5Pm/yNvpj6
/rO9/9CxCcRP9MfET83lPwc/i5kkc/TJ1PfG1xdM6JJI/ES/TH5q56JR5qo7
Rebom/m+o903zPqSRPxE/0z/fsfc/tM1T+In+mi+75LcQytuHSN+op8m/yfs
7tOst6L/RF/N982xzs8clcf3RX9NfrrS3d2osQPxE3023/dD5cxxqYF8X/Tb
xM/S0yHWec7ET/Td9O8N074+NX7F90X/Tfw0Uv3ifMyN+Ik+nPw9Q9s40UrR
f6IfJ36OzNjpvcKL+Im+nO97o53H1YfnqO/Rn3um/R9mdWbJ
    "], 2000]]]], "Output",
 CellChangeTimes->{3.771512696114832*^9, 3.771512764662462*^9, 
  3.77151279537213*^9},
 CellLabel->
  "Out[373]=",ExpressionUUID->"279e6801-3955-4ebf-87bf-4e5cfe59652b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"\"\<Sin[Sqrt[2] x]+Sin[x]\>\"", ",", 
   RowBox[{"-", "20"}], ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715001595896673`*^9, 3.771500163401392*^9}, {
  3.7715010133592873`*^9, 3.771501016054721*^9}, {3.771501075141798*^9, 
  3.771501095072091*^9}, {3.7715015996278887`*^9, 3.771501605592722*^9}, {
  3.771501835734449*^9, 3.771501841691287*^9}, {3.7715021115644207`*^9, 
  3.771502112633667*^9}, {3.771510503118689*^9, 3.771510508051573*^9}, {
  3.771510999587016*^9, 3.771511000574464*^9}, {3.7715116214201403`*^9, 
  3.771511622820603*^9}, {3.77151220628482*^9, 3.771512228730681*^9}, {
  3.771514451351241*^9, 3.7715144612036543`*^9}, {3.771541446409835*^9, 
  3.7715414552059593`*^9}, {3.771541633833523*^9, 3.7715416357435637`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"cca3e3b6-6708-4303-a38e-2aac22bda7a7"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
9L//K+B//1eg/wMJVtOw
       "]]},
     Annotation[#, "Charting`Private`Tag$2761#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-20, 20}, {-1.9696378761231244`, 1.9696346323116982`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{
  3.771510460181175*^9, 3.771510509294816*^9, 3.771511000974011*^9, 
   3.771511623430797*^9, {3.7715121956405277`*^9, 3.771512229175838*^9}, {
   3.771513735058249*^9, 3.7715137872592087`*^9}, {3.771514457037539*^9, 
   3.77151446161831*^9}, 3.771518585460491*^9, 3.7715416366433773`*^9},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"130b250c-d2b4-41c5-be7e-142f5d7614c7"],

Cell[BoxData["\<\"This function plots Sin[Sqrt[2] x]+Sin[x]. This function \
has  a total of 18 extremas . A proposed description of this plot based on \
the derivatives and extremas : still a smooth decline that ends at x = \
-19.3542 then a sharp increase that ends at x = -16.8648 then a sharp \
decrease that ends at x = -14.3389 then a sharp increase that ends at x = \
-11.8286 then a smooth decline that ends at x = -9.44122 then a very smooth \
increase that ends at x = -7.69644 then still a smooth decline that ends at x \
= -6.09682 then a smooth increase that ends at x = -3.76467 then a sharp \
decrease that ends at x = -1.26326 then a sharp increase that ends at x = \
1.26326 then a sharp decrease that ends at x = 3.76467 then a smooth increase \
that ends at x = 6.09682 then still a smooth decline that ends at x = 7.69644 \
then a very smooth increase that ends at x = 9.44122 then a smooth decline \
that ends at x = 11.8286 then a sharp increase that ends at x = 14.3389 then \
a sharp decrease that ends at x = 16.8648 then a sharp increase that ends at \
x = 19.3542 then still a smooth decline that ends at x = 20 \"\>"], "Output",
 CellChangeTimes->{
  3.771501243004549*^9, 3.77150140557648*^9, 3.771501508294874*^9, 
   3.771501559743209*^9, {3.771501606457601*^9, 3.771501653449574*^9}, {
   3.771501783317622*^9, 3.7715018007782927`*^9}, {3.771501831818329*^9, 
   3.771501842438102*^9}, {3.771501922490693*^9, 3.771501940909441*^9}, {
   3.771501977739276*^9, 3.771502040025256*^9}, {3.771502074411455*^9, 
   3.771502082277137*^9}, {3.7715021132304087`*^9, 3.771502117651081*^9}, 
   3.7715023408394737`*^9, 3.771510460501329*^9, 3.771510509940139*^9, 
   3.771511001496676*^9, 3.771511624936899*^9, {3.771512196210116*^9, 
   3.771512229478136*^9}, {3.771513735370659*^9, 3.771513787590003*^9}, {
   3.771514457231687*^9, 3.771514461685164*^9}, 3.771518585572176*^9, 
   3.7715416372494373`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"d7ae55cd-b052-429d-8700-42f3509f39e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sound", "[", 
  RowBox[{"SoundNote", "[", "0", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771513869138711*^9, 3.771513887975979*^9}},
 CellLabel->
  "In[400]:=",ExpressionUUID->"e5ac5036-c2a5-421c-84ab-12169714c5e9"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[{
    {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
     RectangleBox[{0, 0}, {360, -164}]}, {InsetBox[
      GraphicsBox[
       {RGBColor[0.5, 0, 0.5], 
        StyleBox[RectangleBox[{0., 0.43198696602798653}, {0.95, 0.4438917279327484}],
         Antialiasing->True]},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{All, All},
       PlotRangePadding->{Automatic, 0.05}], {180, -35}, 
      ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]], 
     InsetBox[
      GraphicsBox[
       {GrayLevel[0.6], RectangleBox[{0, 0}]},
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None], {180, -100}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]]}, InsetBox[
     StyleBox[
      TemplateBox[{
       StyleBox[
        "\" | \"", FontSize -> 14, FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"\"1\"", "\" s\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False]},
       "RowWithSeparator"], "DialogStyle",
      StripOnInput->False], {355, -159}, Scaled[{1, 0}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{5, -158}, {29, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       PolygonBox[
        NCache[{{11, -157}, {11, -136}, {20., Rational[-293, 2]}, {
          11, -157}}, {{11, -157}, {11, -136}, {20., -146.5}, {11, -157}}]], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitMIDI[
           Sound`MIDISequence[{
             Sound`MIDITrack[{
               Sound`MIDIEvent[0, "SetTempo", "Tempo" -> 1000000], 
               Sound`MIDIEvent[
               0, "ProgramCommand", "Channel" -> 0, "Value" -> 0], 
               Sound`MIDIEvent[
               0, "NoteOn", "Note" -> 60, "Channel" -> 0, "Velocity" -> 127], 
               
               Sound`MIDIEvent[
               48, "NoteOff", "Note" -> 60, "Channel" -> 0, "Velocity" -> 
                0]}]}, "DivisionType" -> "PPQ", "Resolution" -> 48]]; 
         Sound`EmitSampledSound[None, "Preemptive"], 
         FEPrivate`EmitSound[None, "Preemptive"]], Method -> "Preemptive", 
       PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{29, -158}, {53, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       RectangleBox[{35, -152}, {47, -141}], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[True, Sound`EmitSampledSound[
           SampledSoundList[{{0.}}, 8000], "Preemptive"]; Sound`StopMIDI[], 
         FEPrivate`EmitSound[
          SampledSoundList[{{0.}}, 8000], "Preemptive"]], Method -> 
       "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    {GrayLevel[0.75], 
     StyleBox[LineBox[{{0, 0}, {360, 0}, {360, -164}, {0, -164}, {0, 0}}],
      Antialiasing->False]}},
   ContentSelectable->False,
   ImageSize->250,
   PlotRange->{{0, 360}, {-164, 0}},
   PlotRangePadding->1],
  Sound[
   SoundNote[0]]]], "Output",
 CellChangeTimes->{{3.771513882027809*^9, 3.7715138887173023`*^9}},
 CellLabel->
  "Out[400]=",ExpressionUUID->"139ee709-7eb0-457b-ae4e-8435c5acedf2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"EmitSound", "[", 
  RowBox[{"Sound", "[", 
   RowBox[{"SoundNote", "[", "0", "]"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[402]:=",ExpressionUUID->"d9a756aa-d141-4425-a3ce-dff8ca7ea061"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sound", "[", 
  RowBox[{"SampledSoundFunction", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"0.125", " ", "#"}], "]"}], "&"}], ",", "4000", ",", "200"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771513963597437*^9, 3.771514093150057*^9}, {
  3.771514151784965*^9, 3.771514152973494*^9}},
 CellLabel->
  "In[413]:=",ExpressionUUID->"f41ed234-f520-4f19-b17e-e6b583fc66f7"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[{
    {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
     RectangleBox[{0, 0}, {360, -164}]}, {InsetBox[
      GraphicsBox[InsetBox[
        GraphicsBox[RasterBox[CompressedData["
1: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
m8tZ4OEVo+gqiPOkEn0ES3/jXkKlbgl4F8Wlq14Gg4f8TL4TzX+zqXfUO+od
9Y56R72j3lHvqHfUO+od9Y569z/Eu9zV9x2t9mQRjT+2o6GaWSQig7W22D6L
+D/3OqXukEXCX9g4b0T/tXPEVm0XzAuVVDtomUVibJfpGJAs4lSrI+i8N4uI
XJmhs8okizyvemC2VC+LzBb7p3XJI4t05ebZ5OhmkfJ/y3oV8PvBo47XjuzL
ItLp5SLztLKIMqdt/lTsZ7t4514T1yyS5ypiarsui1w5c25/7M4sctQv61v4
riyi6vW59tvaLDLkns7ZhBxuIoad66yzyAv2m+VfkK+MZaSUhRwq0/vMjM2y
SIC/27KOjVnEvZ0tF4Yc615FmXFsyiKH6i7O4DDOIu+nntq9GjmOWfFl+2ln
kciWoXULt2WRr8K/ZrwCj3sLvN5kYt+waEnV+eAxVCgewgaP3X9Sy1XQFypP
2P/aGfcpl2bPtMoit64rsEZxH78XAdqzkcNffJ1JK+6bc0TlbAruH3rjEKcf
cjj25Zkagk/9MqFlAZvRbzo6NRY5qnnTZgZivZaN9MTu7VkkY3vOlnTwyGwh
uwLAo0Nnda8IeAzu/KWhtBvvxEoabACPhl6OM67gsfFR67xW8Pi1Zd2JW8h3
X2z7XW/keCCVlfsdPLSKlLfag8eXJQvFQ5HD3aL2Sih4dLp0bLM3yiLt51pn
eCBH8xIh/k7wUBhYE3fKIotcuMY2V0OOL+80prRjX/fxrC2BdjjXPcxyB96F
nZufIYV+wOvnHsbgEZv19E4JeBw6dXwyFveZLbz/WK07vg+1c2uCTLOIZbf2
ZTXwGA097OaJHCtuLcxuAo/RENmWHryLl+pykxrkuNxY0vYN63OSksfy8C72
VyNyxNzwDoOvBjPAoylfMuwo3oV3IkotHTy6JjVT2OBRPntG1yByyLmLnj2z
I4toL3Ft2oR8k46T0qrgYTIr//N18yxS57H6UPOGLPKy7nDyWeSw4/ktN9sg
i/SsYsnmG2aR43F+V6OQg/z6O2iIeW5fTwzXbAX/exeEboFH8CbzuyLrs4jo
vKSibtss4vFyvOQLeOx9sm4uP86bHhHm/NYpi5yVs7qwD+8ilHXS2g73Mezh
Lz4HHtQ76h31jnpHvaPeUe+od9Q76h31jnpHvfuf4Z2C3OyNAQ4Z5LzwxSeN
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
BqePdgazWIRl8SxaeTWLnM9Jd1j0PoZ8qzf1TFzCIsYDPdKcC1ik8EuNuCjm
t+dt7HigwSKPbwg6c09nkafFLreufI4hDjo5t87psMiGZFmhpvEYcsjh6vDA
aAy5zuebvAfn2T1WG3LqjSG7Hsj2pk1jEZHqLmN1LRb56i4mot0UQ46Ktc78
I4fzhss/h6uzyP9i37v/qf7f/4mijEKI7GjISiHClSSyKklDRpJCU0aRlURk
hrP3QbIqKxoUiRBFRlmFilSSWdT3ev8Tn9cPXz+5Hc45z+txX4/71e3WFQ0z
LXecY3Gk6B2xzcgzKNHlldC3VIlqegcXDJJWi9LMMuHi65enPgtlQn3VX5nk
D1xw8kvWH9udCd6tmuOMaS4o7XTLIf/kgs+Hf0/lbDJBeu+raMVPXJCUutFn
txh9Y6mTwGuRCQcjfRbzvePCijWP8jtkMuFyiq2p7dZM+FQ5BVtwDmffPbqB
Gpmgv7mcdX4t6rPgrUN0JxckAvc1NRuhj8vyySlimSDSIT4fOYA8qF0ADcSj
riWha/8cF9KVl+vdmODCNvV5wTTEgxkSxXNrmAsvwgaLVJdmQpZXjm4v4vH2
kbHRLOJx7s3Ks2EK6L8+7333dfHcIfzfYnCOVoH+6NeIz26PuqZwZTzPy+0r
dBCPzH6a59PtqB/h5Y5eIpngd0ExidbPBfJu858piMcF1vJygVkuXItRc7Ee
40KgCq/tLsSjfFOSivFnLoR3fMh6zZcJAyePORYgHrKLaJW3EY8mmzQPz1WZ
QH/S8eWUYSbw9ZcoWOEcbwOLdIw3ZgLrWpZk97pMsBqS/rkI8dDSS+ZO4vt6
68xtFSVwPoMvN6+gTvmenIlp2JEJOkK5883zXNgamrB73S8uPDvS01iGeMw5
SPPXj3CBZ49LCFEA9eYY4HEVMkHynYnEo24urOc85pmXw/xqU5uoRj1UH0pg
VeAcBotKL8brZMKv2AjRXpVMkPO+29/QzoXtZ/su9eDnH0Ns96Ao6rphyr+o
jwtFFlwpdcSjYcfeST/UqUFzj9m/7ziPgi6PF+LxRj77pRvq9Mm1P6+dFmVC
UkSRrMOuTKCmJuodQl4WfLfguwXfLfhuwXcLvvv/wXdmKua3FJZwYcz1plZE
OBf2XC9K4MpzgSB0c2uZDOqvXnsvRHBhp5xTj9xSLrxzbvhuv4kLE2ndykmX
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
ZOUfTqEGBVNGy7MWefOhdT68v+mC999XVJnymgPbRPL25yHf6LEu/hJbxIGl
D8yCG7GfnNUf0MjdxYfp+pupTeEk9Ltuey+5jweVlOG1D4v58OF4iFd8IgHd
m9WUlLp5cCx8oeBa7D32VSLMJ09wLxVfVP///1P0JTb0zi7iwaftzXZ+Qpib
3gW3/qIe9cHfiXLkwrENP6erkX9i7UqW/8V5BKQdWXdzPvqy3K9TDy5xIfS4
2sE4d8zH4SGVXMz5kOOu1199J8H8j8j5JGPMkwinkeF+DiyOCTfamc4BEZUl
vT8BOdGszPayEQV6YmUigXwuyL4P7hNX4MOC+Lzya6UEVA3vy9u5kQcn05wK
r75Cbgw5evHDDBv2vOv6ZVnEA8al0JYj7jw49PDe7Xg6+sv1PoF9yDfmFcmO
vzCnXx6Qf+I1QUJ3gaPjHZz3245Qu4r52C9vXr1Zk8WB+SsXS/BRlyXGdZl0
9An5zkCnxWe5MC4QX/pPEnvwphf8HtSN59+98/qNeCBTOX/uQ8zX5sMh9gFz
CVjS7xrx6T4PDn979+OCCw9e0c14A8cI8L1jW7gK76KKazcg95ALQQ2Fqyqb
SWBN+pc9MkKuzfn1tGYOFzp7vhh9O8UBjUOyjoJmfCjwsXsf5kpBQMKkkXES
+tP4T+7USj4YTeU8XvaKAPXGnVbNmJ/Gttbigagr/rlLFW0CBLSUKJTmXePB
puyzydLYx2rVgtdWHScgUuuNauYcPvgsl/vk9ZILTj/2jq1uI8G635/Ros2H
d3MzpaMluZiP/5K2Yt86npyqwtrEh7TD9x5dOk3BS+Hq4gYm9rwGW6+Xsqi/
ott3o4YJWBzXs8dJhwf376+lH8O93M4Dv6NCBDz3OCKsV8gDrYzoFi3k6/XJ
ZzyveRAgHHksYSf2UpcVemZhdVyQ4ZSumL5DgstkuNPzzXyY29m74qQYF962
3Vzs6YE8B6H2fTgPmdy0x/4RFPyZedrUE86FdSbxMbdV+JB+9sLqRPQVrsH+
ilXIfcMbJyynMdecM14EZiwgoNQ1Z9Ub5KTWg8/i6OiXcpyMxu1eBDgPVurc
xD4geXr7jsxOLswknKvbUo6cZHdY6OF6PsSNTS2Ww17bmTmxMNWHA0lLBZPt
8H2Snbqq9Rcp+Cp2n+55igtqGrYrgpcjN6pKHJ0UJGG1z53LvNU88Jo4VvEN
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
          "],
          ColorFunction->(Blend[{
             RGBColor[1, 1, 1], 
             RGBColor[
             0.27450980392156865`, 0.5411764705882353, 
              0.796078431372549]}, #]& )],
         AspectRatio->Full,
         ImageSize->{20},
         PlotRangePadding->None], {0, 0}, {0, 0}, {20., 1}],
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{{0, 20.}, {0, 1}},
       PlotRangePadding->{
         Scaled[0.017142857142857144`], 
         Scaled[0.1]}], {180, -35}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]], 
     InsetBox[
      GraphicsBox[InsetBox[
        GraphicsBox[
         {RGBColor[
          0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
          LineBox[CompressedData["
1:eJw0XHdYjW0cVgglQvYIGckKoYgbkZC9QklFSRGSoiRJgygNDbO9tffeu85q
au9xOqcoNOR7T9+jf7rOdc553+d9xu93r1qhoX/mBv+ECRO+zJwwgff7389F
1qOAoLEmlNV4nL2sKYWCfpFPqoMt5PU+iCeqa+yrbcMOxZtPprgogpm89UdC
cAd5/xS2ZLYx36h0weLts04p03M42JHb/6ejm3xeGZe3Xvz87TAbXWMnZteH
qkBAt2BX0MNe8v1rSFssszRcnwOJHTM+5ehrYPPywceCm7nketcRGPiyKzmC
i1r2wNYPNlrwunHreMogl1z/JqZxvf+ODHHh4P0t777nLcjazRO6mcol99ND
xILNd7nyXMhfzlQ5kngHx5+I3zGx45D730Vb+bPGTo9emNiwftvr3MPtb45l
o/fZZDz3sb1or/r5hT0obzksP2JogLtrPmpddPr3vA/wyrCxbEFHBzYj6bWW
hSG0AyNUFBe3k/E+xIrDC7tn72yFrcemKvobI0iteZ8vcKCZjN8YJ8UEXg/K
N6Jl0HPlnvePYKi9IDDQtpY8z2OoXGL0y7lXQe703NsB/iZouSerrZ7LIs9n
iovn+NRUl9PxLsQmbk70E9hf3LDQRreIPK8Zhnwe2j+UyEHflFG+p+lPqfW4
t1R0RRp5fnM4BNwN3P4gBr4RO9cYtpsjtrMnrK8piMzHM2x3qM18VPcBZ9Tu
FQWxn+Fi3pCpFL81mR8LWMi8vmawXw1/pwffbfxugRvlFSzTtTvJfD1HzOvX
/csnmSAksXXuvKHn0GtisYunuJD5s0T7tS2j/Sa+uHRzWdKxv5YYrMqxvzUj
ksznCwx92dc1c14SBOYpX3s22QrNU+v26lZlkvm1wtIPykFSNfmIzHo7OU7I
GlNUw1deMi4j822NPNlvuruUmBgf/iwbXMpK0hOYWUnm3wYbKidrvxyswXSx
yadWLrDFskePnmzpqyfrYYvMnx+lXhk1IaF47+DFZS+hs+T7zRX3Wsj6vMSw
5/vwXypt0Hps7PF61SssqmTvUd/WQdbrFabLO9cJ9HZijkQksiTtkPbJ89Ck
591k/ezwQ8/s40RuD9LLe1p/S72Gwlh98YX1vWQ9X+NC5dsNM7ZxcPv56peb
dr7BRWObvdP5/+3nN9gZdHbZPBcuFm1R23x9jz0cFLVvNnZxyXrbQyrY/fqC
v1xo6it1F69wQELnvpM6LC5ZfwcY29CCn9ziYpdCV3KHjwNauF/fj2ZyyH5w
wNWgFvnnjb0QWWplzy/xFkaT/17xyGWT/fEWUx71zwx41IOOHys1lga/xbRQ
mdv1Y11kv7zFzz8unmtUOpFSmCYts8kRkaM7r05zayf7xxHOxUEpzgmtcPZU
mXI2whEK5SzRffnNZD854pPCO7HSokbcMh6qvi3tBFcNjQkqbnVkfznhhZXf
ojivauw7yZsxJ0y2Sakxyy0n+80Jx5RjR5fNYWD+mm1PvXc543GvsHj6phKy
/5zxd+nvRuXMXPSOlp1OTXFGyMbSfRHD6WQ/OuO3yd3L6XVxyGbqrare54J8
h99ZMsVfyf50wZG4tlSna57wCJr260eWC3q3CKsmxL8h+/UdRmfm3zybfBv3
nvkVzDj8Ds/lv+Q1H2bu/X//Uq9vr1iSsvweDivLf1hX+A62fmn2100cyH52
xf1E32ah7V5YtrnxzsHjrvBae//8ueYwsr9dEbB0h8oD63gMTH6yX43mCg/D
Q9qvVDPIfndD18/VigFb8lBUu1D08Vk3GMQGr8gPKCH73w11hTNtX51jwDMq
tt25wg18nWLuJ4QqyHlwx+L4orWVXdUwenk2IeySOwqc6neFN9aR8+GObV/k
vvH1NeKEet+rwlp3mKtvo7F7msl58UB/1NXB9bWtWCXz+mqbmgci9pq0TEho
J+fHAyc1D2QOP+7EyAzJLRNaPJDY0MgnuribnKf3+OtRo13q2AN6W+7ExVrv
sVz/+F+lWjY5X+/BNhyw1P3ei4BkzYrtXe+xnv9KP4PGIeftAyyqtpQJPuDC
zGlC4Cm9D2i8bbnAuvpff/iAgzRdzUjqfJy/9dFEl/sBGn/ctw+0ccl5/AiB
TqMbUXZcrN+/64TV/Y9oaTj39Nwgh5zPj0h4LLJdeiUH/Asql3sOfsQQ25jz
cV4vOa+fYJ0z80tqRQ+qOAY/kow/4ZF+/hJn7W5yfj9h7yHN1dWlnfiaI5Jb
MfIJcjuEX3Bmd5Dz/BnxfyPfZexqw4sPoW79Zp8xFkdzCz/eQs73ZyTZHdl7
+2wTvsr6bhfg+4I1MoktSf715Lx/wbxdU96MhtZgoe+PT04HvmBHuNUGs4IK
cv6/4M32PJuSaUxYihyYusLyC0xPVxXnj5SSevAFp49IXPumnQ+uicO9rzlf
8K1ALGXh/UxSH75guezk777XE3Glo75m9xRPnIuSuTb2OILUC09o9UycHObi
g9wzGw8WKHpCbeyCuWeWE6kfnhCtpe1ZuM4YW1JNQi+89MTnrL7pJTPXk3ri
iS70Rkf80AB1OOa1Fnliidue8xcHbUh98USdrIG7isYnTHFZYH5P2AsauS3C
fB3BpN544abXcP3EebEwmKBNLbkXlnSf/e3ZkEbqjxcmdVZEfnHOQb1uzBk7
By84/Jx9ua25iNQjL6R07RWPu0bHkcqJyQsZXghg9++5IVhO6pMXBm1PrPnW
UIXoA2dW+8/xxqJ5Xsvz6bWkXnnjnO3dOumbjVj+9csb6fPeUDSIu9Z2o5nU
L2/YLz73lO9yK14t5P7KeOeNNRfkNZPk2kk988aC5QcCXgp04qflHvWTVd74
RT9ncDS8i9Q3b6yvCR09v60H48dvoQ/09L4v9LZlk3rng5F7lVdrQntRcqVm
260rPmDfjjbQe88h9c8HUY9KlXxOcCGTJ/Hx1wcfPHzwbigmm0vqoQ9iJSJo
BSNceG81EnhR7wPJ9RLFE39wSX30AcxUflsFccGbzdnLfcGfNbHzgTiX1Etf
zFFU29ylxsGjaaLVn9V9USua+LtPo5fUT19cTacxzaTYaHugcWCjty+ebC/v
u1zSTeop9f0zwgIi1C441RgenNjqi5G7KhvKX3WQ+uqHWzISQoaJbaAGI6q4
xg8s/vzYrYwWUm/90DXaGBpS04Q1ccfNyrX9sDZ1NdM0roHgBz9U/Z0/kJH4
DY4rP3RoBPpBeAf90ryySlKP/XAycesj8Uks/Hndfaqv2w/huoyZIjo0Up/9
Uexxa5f1gkLcHJJJfLLBH7RFU8Iv/cwi9dofp2mnRaWmpoB53Vpc6I4/ZNcn
LpoaFkXqtz+eT+LsXiscgL20cju3MH/A90NvQIwbqef+uL9/r65C5TME7V71
c3W/P1YlvrcSunWS1PcArM5/Y3VP4RTm+t9Xi9oaAIurpTushC1IvQ/ApCPW
njea3WA+OyN/34MAuA9c8RxeH0DqfwCs89jpdzKj0PNk5tbSmAAECBzYqCCW
QvpBAMZWz7j0ZmI2Lnapvr/yKwBTQgdTpdYWkv4QiD9sl59892jIPBcyqUsm
EH4e+nmO01mkXwRi1Vw71abKSmxMH7798HEg7iQP2eVkfSP9IxD8E0vHnNMb
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
TnwxCjUNOp8sLid+YTEEZ2m2uPZXoeODQalsRzEMXvwWbW6pJf4hdf9EzWNK
9xqRuZMnKBSjTr+qr/lOM/ETiyFtrXo4Q6MVHxmLnk+YWoJVdSn6iw61E3+x
BHoZ4jbaMzphzINLC0pg+9At5UVcF/EbS3DjdUkJQ7YHZ6by7lCC5wMnrA/b
s4n/WILd8vvq7SN7sXEcAJXgiub97cs/c4gfWYJpXwqsDp/mYupeHfbrIyXQ
ir61cm8ul/iTJQgozimQGuWipSpZof9SCVQXrRw+/J1L/MoSjFjaHgkO4CLV
QMTz3K0SHJb3zTdf/u/vSUpwd8FEvc4rHLjN4C1YCa7xL7D/odpL/MwSVI11
RrpJssGrJotfUc/PPRHondtN/M0SSN2fo+e1swvj5eF9CWYl3GWXPu8gfmcJ
XmW7bfsZ0YZ1DVcFm4NLcLDgy07Vghbif5ZAsUqZ7k1vwqTHkdcPJZfg/QPx
N0q+DcQPLUHEp+GipIBvaBAVSAsoLoH2FumTFimVxB8tQZ0rM/vwDyYoMLNw
el0JNqkLCUpdohG/tAT0jT3qe0YK4Hw01EC/twRPtPsER75lEf+0BL2yFQ2L
a5Kh3zahlPGnBL/2XJ553iaK+Kml2PHgfUB8mT+Omp+T2DGjFPTh8E++Km7E
Xy3FlcjZQYm6z7CaZ3cuK8XirCLZym3Hid9aimwB/a0C907jb8xI7eimUjw+
Pvx66LEF8V9LERohLXJezh01p07uvIZSSP857lqtE0D82FLwqz9TuNAVhZge
r7dZJ0vx6bz02ZfHU4g/Wwq1faln+Jdlw8HqZ8+aa6XY4xT73e5gIfFrS/HQ
0N+my5wG3RVHFV7eLYVJ03vFB0tZxL8tRdKt41cfdVXiUPLHL73mpVA6nZZd
Uv6N+LmluP0s/XoOowHj9s7bUpyt2Fol09lE/N1SBNby+9xtaMFI/8Hz0Z6l
SImSK9+c10b83lKsFlg4VO3agQqKrc2PLMXOM/KMTUe7iP9bive2q09pV3Yj
Yi17mklmKa5tXel1SpZN/OBSrNzhPHz9Vi9eZeJ6PaMUBmqBn5pucIg/XIpt
FoPd1Wu50FJ1St3fUgq5yzkTDodyiV9cCoUEh7o5A1zsHxeISwHlvSGrR7jE
Py7FuzN/N13L5GKJ0y6DqZPKIJK2XMrvKJf4yWXYFivyu9yFg188OVO0DJnD
CRUZfr3EXy6Da4tA/apnbNDzm9aWrSpDgqHjsNO6HuI3l2FEeJafrm8XQjR5
hLYMm53emCYO//v7qjIkhooIrpNqB09dcjlUhgA5hS0NSq3Ejy7DzqoXLtrK
zdBwr90xdL4Md04ef/z2ciPJe5ehaGjnCu/YWuyRlnqrolWGGey3qgdzqohf
XYZZWe9acvtYmD/egMuwL/blGyNFOvGvy6C2+Y9RW0wRvuvwHIAy8MPnG1M3
h/jZZWDzhV+Kdk3DOH2ncPv8sTi/pqoY4m+X4WD396rdlsEI+Gw23OVfBpOc
FQVtpR+J310GyYvb567faYPnu3hfKIO43JPJbYHqxP8ug7q91q2yailcLV8d
Fp5fhmOfXc1u7nxE/PAy0BV/WxvIOYOnhotWU5/XHKPl9PgQf7wMCjkzY6Uj
IzBHqETTqKsMRsnf/SX9E4lfTj3vo6m6Zm6Z4PguT60ZKkOysiFfgWM+8c9p
cM6UbXWSLANvtcUm0yAu/0w5eyWT+Ok0ZJWdtPJqqQCjVzPhlDANs7JPTGzP
ryH+Og0BO22+j2XWY1zOnEuDh4H5ssnqTcRvp8Fq7gPLqVdaEGozbiCg9mEt
fA63Ef+dhmThg/clxKj9cKEpvW01DZkRe57K1nQSP54GiVVT7/Xeo/CWuNCd
+ZtoEFTd5NrR0EP8eRom9JT23VvWi8E+6cVHdtCwd83EP04SHOLX0/CYT/7d
mmEONFKv8ig4EtTu27bac4l/T8ON8tN+Rh1c0F7ZGIYo0OD/eOVcCwpv/e/n
07AxfGuxdyUXey5Frqw/QQOzy3Km6V0u8fdp2NbiNOBXxEHQGh4DoUGvbsVA
bM8/v58Gw/lZ3pIsNhb8L7jAyXdz+lXbHuL/U3U6d3m6qUg3XmRsljTQpuZr
8sXtWvqdJA9Aw5qP6058DGnHjzeXKn30ach49qhcsqyV5ANo4Ia2LbCob8Y1
leeWFUY03L1hsVqzuZHkBWh4xOr3NsqpQ8m60C1TqTr4IdtEXKSsmuQHaIhO
LhW73l+O3b8q6mVtaDA9tXBl224GyRPQsKXut04+1RfHh+NAg5kcboZOySP5
Ahr00+Nn75HJwDyefOFGg1CNQPXlw/Ekb0BD7JN1yWsfheG52jhARczRsFrb
Vk+SP6Dhl+mcVpkZDujbwENkNFik7dHcd+AuySNQ60t+rg7779saQcOfR9GP
12vpk3wCDZ7bJBfceGOPojw6tUNp0BItjP0Z5knyCjSE+7d5XZAOg6zLiIdL
Bg31NsJ5KkvjSX6BhukqsmvzxDLgp7FaMa+AhlKZM6dXsnNJnoEGW7VDm9+p
lGCO1MnB33QaxDhbs6LXM0i+gQZh1YPrVRvL8eyPsZdkDbVe/nc+PUypJnkH
Gi5/56t7G1UHTuH4gYbypMTG29WNJP9AQ10rd/fX8maouBWPvu6mocFRwOd9
bivJQ9CgcsB16IFPOwpu/AxM+06D78sF53K0O0k+glqfQIeiZ9O6sWM8gEDd
v4Dhsfp5D8lLUPevallXXMqGz4Sjk8Qn0qEtaO6m2NFL8hN0TDgbe2tXPgez
Sg0izgnREfSTf7LYHS7JU9ARIyoSqVbBxVOeHTmHDpGq+cNXqPPxf76CjkNv
3Fbe7eRinK4spkPjyfXkX2+5JG9Bx9CXqu1Kfzi4tKM/vkucjkl23IdpGzgk
f0G9PxD/wVG8F3kUG1u8gY6T0buHOtt6SB6Dji2XI17FGXdDmn6Q58ji641V
2yKaOkk+g46afXbdm9d2wOsTz7ChQ2+3ss7iU20kr0FHv3XO6xLNFszUc7tN
cVZULt/6d0CnieQ36Ph1wniEzarHE9nMRc1KdIxG2UV51NSQPAcdH0SiVlYO
VKBbgJ035zwdbtOsVktvY5J8Bx07JHvttI6U4SJrruEhVTr4pOVd54Tlk7wH
HfKnj3eVRWQixxMrjW7QEb3rx4ZZzESS/6Aj4scPzbCKCGzV1ykLuE3N/4ZL
gumrfEkehI7VO1pNguyc8UXOybTGkI6Vicb2SuxHJB9Cx8Kz591u7d4G4XGB
i466WRsOn628RvIidNzXlA7wT7LG48p2nkOFrHPGisF3PpL8CB1T3+nd9JIP
RqePiKX+Gzrca7bUV4bHkDwJHa6Jofdf30zDuP3wjo7hocNTRE7nkHwJtX92
6G1ScStCFg+efKLDIWf6plfUuvyfN6HjxN8Qze8NLEgJv3k1yZ8Ow5OlQ4VR
VSR/Qq2HRKN/oU8tPtbEyewIo2Mtu+2i++l/eRQ6HEN+q1ufbIZQQFObdhwd
C4xeq+862EryKXScPtW+unltO4zHCQEd6fYmzt+/d5C8Ch1Pt14s2/+pC+0H
tu+jagRAn8BcJd5D8it0BIcELHxpwsZZEbXe0TI67nhLVM/y6iV5Fjouqkw0
EXfkIL3OhqfYY/fBT7//HuaSfAsdslxVBi2di03BkYevNdKhplp7I2qYS/Iu
dCje4BqmU/iLl25520nHfmmd3JlhXJJ/oWNNhERKnCQX0xQEvLL66CjkG5xW
oMMheRhqvYbNtBT0e/Hw/wIEDcMn9gvAJvkYOq7P6fMbq+tGS+Ol0TV8DJS4
dO8xOd1F8jIMuJ8LOJ36uQOnvz4PVJ7GwGbpCie7sjaSn2Fg7gT6tVWdLRjf
DrMYOLXuW9ny/iaSp2Hg0MQcz9jWBmz4P/CBkRQ9L7eObyRfw4CHYEt+xXAl
3OfxRfSuYCDV3Klp2SYWydswcFSImfSJ6hs8tCYmycCC3gRhe/VCkr9hwH56
0D4JmWw8oKrP6a3U/b2X9SiZpJA8DgOTZiwqqZoZjSYzs3iLXQyITTnGkvQP
IPkcBt6nHpvo5+KOk0oBN6IPMKAjWlm8qdOC5HUYeKy1gxngeQbU2Ge3H2Xg
k79A+6uFx0h+hwHv++anW/ifgeeWzD/LQL6B47T7k91InocBi3kR83Sc/OEa
PW6QodwvuPqoRhTJ9zAw467TtryQZEyyOLnIRJMByYmBkwQys0jehwEl078q
N+oLcP/ko7wQXQbuLp672u4IjeR/GJD9u8A4qJmJhiXeD+oNGJCekz20MaSS
5IEYOBI1O2Dw3Tfw0JKIKQO0QO8PV5waSD6IAVefpLyE/CYkxv0s3W/JwBYP
XVnf9BaSF2Kg7c/quU6BbVj7YrmpgR11Pdr0zc0mHSQ/xMCgxqr4Y1JdcOHF
B5wZ+MqsPTkhvZvkiaj553smk7WKDf7/BUXEPKnbP/FSL8kXMaC5+J1A/0UO
9Hs/Pp/qy0D0pTPijku5JG/EgKX3n0V0Py7qEvOkdoVS+8Pqc4BtP5fkjxgY
63M+/pbi70dt+inEwUD899GhpDwuySMx0PsyJbn2LBfxFPv+mMJA1xl140wv
DsknMfBh889AqbherBY/JFOWw0Byb95VljOb5JUYCF0768X2fT1w7LvDY7jo
F1Ni+KR2kfwSAw4b71uvmdeJCalujlsrGPh9d1T78vF2kmdiIDY3UF5dtxW3
/ydgiP2QZppu1EzyTQxMjLYalX/ciG/KbLZLOwO7fOYsSR2sJXknBoSKJu5c
OLEaimvmjR9JxrbPHlc3/Pv/BQyE/Yib02pO9dkfPEDJQNrzmlO+y4pJHoqB
5TSZmVWFORDP0BmQ/Etdv35Awl8sneSjmBB6Z+Kvrx0LhzdO1IxSfUnz8a/i
WyEkL8VEh27W0vS1nzF2JeXEm5lMLPu5MNJu0Jbkp5iY4SP36EDidYzbhfOZ
CBQQEhLRFCd5KiYGUpVPDxc9RDWPTogxoTQ7aVP+aieSr2JiYaxeTfQqHyhk
76JaEhMVmLdNZWsEyVsxqXUZZE0QTkTU2+sTz0sxcTj7Qe4DZJL8FRO7L8ad
3rQ5HyvGAzZMZDWenfkzpZTksZjY+CG7tLiTgTcb4lXj9zGR5yvF6fKrIPks
Jg7uPcC5+rIGo0NNgt2KTJyqf7PO+3k9yWsx4ZCufVt3fxN0ePDkNBM7F2vL
88m1kPwWE7Y9LzSC17Whwnn7jeOXmChbKREdw99B8lxM3HbUfZGa1omDGmo8
SIYT65dOYl3qJvkuJkzc0kftC3sQsdk2LVyHCe6MyltbpveSvBcT7xQVDKMW
ciD2J1Kv+R4T8uHTTZo4HJL/YmKqn2Sjtg0XdoU8Q5IJHQ/vi00tXJIHo74f
YW7YSOGtIVeBvEMWTMj6umsMfuOSfBgTLy+rvA8z5kL7htQDo5dM5Kt7RL6v
5JC8GBNHNp5YsWekF+PH0ZEJTrCI3KQONsmPUes3U+Xhvs89OMCzBzyY0NIw
lZy5rpvkyZiw2fdL8vDLToSVhJpM92aivWiavnpBO8mXMSFdp7tTrbcVS95X
SuwNZuJ0u9fsr3+aSd6MiQM/QqUE+Zvw8iZfhX4UE3OWrBtKnVRP8mdM7Jdx
5JwVrsGv7TwBl5rvCY4+wRsrSB6NGv9ooSMMGbjB2z1ZTKzZ79BZ1VZC8mnU
fulLod3WyQODZlY3qZi6/7GMtjX2GSSvRu2307K9hbXxwKeAlztYTNy/tEf7
2M5wkl9j4q9vrGbUFy+E6jJ23qxlUjii0nLFjLckz8ZEgqTsCE7dB88dc29l
wknrvJnu2oG9/+fbqPk5NfuHhIcubATWOBaxmXjDOVa3yOs1ybsxMVdU+OaT
318wyDyJPwPU/p1WZ3lW/ivJvzHxVGJq7C/bOGh4PmJv+sPE+XbPQwUF6SQP
x8LdYqf3Uq9yQbvj7X5tMguXuib3bPteTPJxLEQaGFd+/k4Hr9s5CrOgetzu
iaJPOcnLsZD05+qWM0+rETxtHNBgdYoZ9/yDOpKfY2HpeSOjzIRGjMuBS1kY
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
2qdVcyb+64zrE9kJHZ51e7PveB+g+VwuJty9tft59wC0aOnfcGEt+X1+c0fZ
ujykeV0ufAetEkyKewn34qQnbzdzMa6H01bXA8k0v8uFsE5T3K88DWTyX6Hd
xUVc7LlmY/OzaJ6XC/MGEa9sWSEW7GJ32NHMzf5F2+gSmu/loo/LyQ6OO7lI
spoUvewYFwdszBbU2pfRvC8XDp6bJi2aLcHQNuwKPQS+jQX5A+U0/8tF1grv
xbV9lAgsPW8Yf4mL2QUXp99tr6Z5YPL7XcN2m2k0aKYP7EG6zXnMwMcVNB/M
RWIr9y/XZlaB3X6/Q+6Hs1uXdvHVNC/MRd8NJeHvftdAONWg84LHXPTr1+7y
rXZamh/mwjqvz2sXpRbzDJkVQS6+Fk2e9OKkjuaJyfXs3e5+B5kOCdw1u6Li
uXQ9/gvNF3MxKN/yZVvy9cGPfHpK33FhuHzOlnDy8/q8MReSY4uGOZLPZ1bb
jTO54Bfe2XqJ/H59/pgL+8vLhz8jx/d3Ot/DtpCM3+2vz36Pq6Z5ZC5a/bwT
dYScn/7yc+E6cXVwG3L++nwyF6/fPaxoR66PQDCy4LGEPE83z+MkuX76vDIX
rR8vWFRIrq/dk5XMEigahXvtosj11+eXufhw2re7Ebk/cQe8zQx1XIT+je4W
Te6fPs/MxebC2jem5P4OJMXPlF9c/NnjP67oRQnNN5PrxXFcuZeMD9Jbk46H
3L/Je+8V5GXRvDMPhW6T+2Rp0vBH9Gf0XQMedkaf7VS8P5nmn3ng6x5/S371
EjvYDSQeBk75a3bK+SHNQ/Nwu6Prj/vdAsBj4rQ9edj4rEPppuMHaD6ah0Uf
3P+5aTtj9hyvSeMH8JCef3Pd1Q7baV6ah9fH1vI6Z1xEjAlbYeFbYBD/xex7
ND/Nw7wKg7rMlVHozy548TDKMV9tUZ9A89Q8nK0ILvQhz/elqF822VY8pOzh
xsvJ86/PV5Pz68BZtvZcPhq8Blb/nsHDqchPvT+Q+UOft+Zh3JWm4+vI/OI6
z56JLGI0t/3iuWT+0eevebi2zK75kIlisMvny3hYYhs5oWuojOaxeTg07Ity
NJnfbJV3666s5mHB8dELvpD5T5/P5uGk34EGfzI/Rr/MDkt14WFd5Mmfl8n8
qc9r8/CwJPlRMZlf+56oW1i3g4fDj/qPSiPzrz6/zcO9M4q8rWR+vmDPTCg8
9Jh07OURMn/r89w8zD9ZY3iazO/M25GMIIwVtqqRrvvPZ8JDcO2cTAl5P2zV
7F1x9jQPs0L8xqWQ94c+781DwjarL+/I+6XkVUjz5As8xFzc+qU7ef/o8988
pD6ctq0VeT/NYJaLAniQPNdIk8n7S58H5+Giq83RteT9FsXE527x8PLcmdVf
O9XQfDgPUYPh40Tej736MAlsHla5XT4zgrw/9XlxHv48OPbtJXm/nquckeD9
jIdpyvp9H8j7V58f5+FKssf85+T9/COBCUjy0Omw+5yu5P2tz5Pz8NN+kH0c
eb9v9gkyVr7hofxKz+VfnIQ0X85DxbAo50xyHYtJNd/1Iw/vTA9WcJ6U0rw5
Dz6n3j6YSOoLm/4VO+3yedj0/UjgHlJ/6LdDeRjwODBnHalPnrHtEQ8vVnwe
U9PhLc2jk/F7aaN0K6lver6emhEp4sH3xrdfSSnhNJ/Ow+Tkyx9ln4Phd3ar
h1BFruf7wFGplt40r85DUQ9/XvSc2fi2wr8/qUHh5qDNOD/SiebXeThdduLW
vYM+cGYDJeTf2qbyjbxQmmfnoXZy5ZPWZyJRqFMccW8ifVfRplZXSP2nz7fz
kfn6bMlDUh9OfdfB7EFrPm4beNpvIPWjPu/OR+OjSAchqS8jmdWHjnxYT3sc
cYrUn/r8Ox834ts4bST1KVsOdOdj9sUeXc+R+lWfh+dj2FG3pR9JfcvGZfrx
EXSypcVYk//y8Xz4zejjF0/q4691r4Tbh/HRNHJvTgOpn/V5eT7ELnNPmJP6
eoN+AwPYmLzvGam/9fl5PnbuXt5qPqnP8y8bTMqfRM5nYv3fOaR+1+fp+fDf
ked1jNT31mstlU3T+QgpuOZ+kNT/+nw9HzVvL1w+QfqD8OFMQo+PthWHfr4l
/YM+b0+Ob3R51DTSX3TVL7jA5auV8x/Sf+jz93yMOW677QfpT9jh70S+Hn1J
0p/0L/o8Ph8zlxfle5D+RneVf+PjRj4s3EZCRvoffT6fj9yDF84tIv3Rug0t
yJRLzv/u6OizpH/S5/X5KPF8ajOB9Fc5I9kCEa1F5bHvSf+lz+/zsXv9VqEt
6c8m/14ZtvowH95Thu88QPo3fZ6fjw8JknE+pL97lOnN7Lhi6Plh7i1J/6fP
9/PxtHXSuQzSH5oERf5+e46PpT08bp4i/aM+78/H4LMT54sPks/VD2iMfDTE
04n0n/r8Px92K0T9LZn+lIm/h/CxZHJju5oxeZQH4ON5SzMTX9LfrvkzjCk5
MGJ+8oyJpP/V8wF8zFv9uJwzOB5ZOUtfnIkk5/u61YUY56eUF+Cju3Bgaat+
tzHxhtfa+Bhy/ltkf5d38qP8AB/dykd3nGa+Dg+2PGpbnszHxeTl31R10yhP
wEfs2de7zE8fA/PdPT/w0WPf9GbDXlynfAEfkg+t39l8fYzj/35tWpDLxx7b
bR8mro6lvAEfvTr9fsTZ+wb67Qs+/vy927lnh3TKH/ARei6gpaBLDlaF2pOS
mw+hf2lU98QiyiPwkb7Y9Ej47lJkuB7cKVWQ8X+s0abBkkf5BD6KdwWv9TIV
YvzEsB6dq8n1lbq1vtJVSnkFPg7d29/3yXk57rXI+Wj7jY+/O0yeKE4rKb/A
h41N4vIee9ToWFy370AjuZ/9FolCZ5VTnoGPrn82PDH9U4Gjd/r0D28pQGhT
Rsu4q1WUbxDgrunMh6aN1WBnt/YCjBo6u+TBxFrKOwgwNW1aJ9epWjjqAzxo
bmEUvrStjvIPArgOd28+KkSHdCbu2keAxOnN9yVX6ygPIYBfl9aWzPoWs/hJ
OmZ0Vr3xT/6ko3yEAB8ff+x9fasOd+8xG9ICzC/9xNW+0VJeQkDmFcUhN14t
2PTMBAH+va7h3X1TQ/kJ8h5On/rqm1s1jkydKWxuI8CP4VvqH36ppDyFABsr
vavvLqyApu2uc+PnCPDau80+j7MaylcIsNXol2RshAoO7AK6AJ4VNW9XJCgo
byFAvU+98kGyDGlMe7pSgNVLRlZ3PyCm/IUAV7vtt+/qLcDofRX+2esFuNZ3
UVSHRxzKYwiwbBavvWvdJ9yebmLTsJWc79iMQblf8ymfIUBSZsW84guZMGQb
fgGOKBwr9+ekUl5DgOENY4O2nk8EKQaYigBP7kz8u8X2BeU3BMhwmu+U/ese
VOH+s/1PkO/PNUmZfO8y5TkEMJ26eqJ38C4sO5D8NdVPgAFdhtpOtf8+Xc93
CNDw93LV2uUeSJnJFCgCzD6ycveQTtco7yHAzBtDc9zvP4AFU47dECC834yb
mZNfUv5DgD1nXF86i5PAxtvCBLhzzl593D+N8iACwDQmoGhHFgyeOoeffSJA
WuE2zSxNAeVDBNAGfBMcPliCA+wFJd8fYlZUPopLeREBfj6d0iGgYxkUs+Oa
VScKYHgltfPfVhLKj5DrabDzrXkLOZaYSKL6pApg4p7bv6BJQXkSAbaFfZt/
vFaFt1ID5owhe11kdCJHQ/kSAT7veKB2uVCBEWy8SICRSXOum5lXUd5EAKOf
SWMcw6qhn37I8T+0qu1eXkP5EwH+nLjuvbCxFq3n+W5Sysj377p98glPS3kU
AY4WfolMPKwDs9rVrVKAeO3Va7+FOsqnCPDcb0gcsz9C5oa3dl8FmJ7y+5FY
qaO8igDHPtcvcD6nw6KXLZgtJ7wIujOQq9VSfkWAM95ffB6ZakGK4R5Pm5fB
yGBe//4dainPUobdFkZhXrnVGG7v+FFoWIYHz+5XvlldRfmWMvQqdDd6lFIB
djvdpAwLU7ctCGlRTnmXMnTv4n3osrkaLK7SqwwnDMMWK6YqKf9Shl8rzlXZ
z5TD/VVpnvugMsxfvqXlljMSysOUodb7y8MBF8ogPskGjOD6+/LhqHAu5WPK
sL7BsX9gRQnsmdX5cWVo7vzR8MK7QsrLlMFM+XtF3uhsMJtfraeW4fb2+vV9
8IHyM2UIF3O1rh1eY2il18nJs8rQMCgsVGwZQ3maMmj6wOrL4EcITGA3RBF2
WDMiYUgg5WvKMGF95IZ7OZ5gt48cynBn6zVJmuNgytuUYdPXq8/2vtuCPcvq
z+avLUPwrRKnZb/OU/6mDMaxXa73Ng+DsN+giX83l4G/daV/3K7nlMch5zew
NuCvawLm6RdwUdqs3rixfyrlc8owratjr8l5GUhIPujvcqAMyj5bWhr1z6e8
DrlfoYF7+5z6BGY3MfBYGZ651PYIteBQfqcMNlf6VTiSef3aipzKjz5lsM4+
167ph4jyPOR4vN4EbfaSgTSDTMNJ6oLEROkhBeV7yvBi1sNH3rtUYJdLr5fh
3rtbBw8t0lDeh5y/z5OCmd0rIGDi6XfKsLLVYNW795WU/ynDm/DNf+1nVMPu
gvvdi4/LcO1lobo8qIbyQGXoNjD6y4zEWsQ5sS9INCLLpuiBlvJBZSiR5RWo
HXQYOPRjvTa+DFaXj45Ly9JRXqgMabkRNwP+6HClrpZJgOKaYb/mZ7/qKD9U
hs/2py7mhuvwJ6WHw/LMMiSvMc4821dHeaIyzIr60UrppMUOPUCEokMlpV9X
/eejI+Nr5fOHL4bUgMcuD5Shq6unpiKlivJGZDzfjuVZjq0EuThryiVleNSg
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
4AUdSLPQZ9pF8vlB+/rrVDrKZ0sR972sOI/UW2zcPlCKyDm/Hr4v01FeW4qT
Gaa313rq4MO047ek4LuEpoz/rKX8Njm/jyWcwp+1YOnEh1KYWDjb35fXUJ5b
is0h7bf+vVmNjX5dmC11rJjuVd9mUBXlu6Wk73uuCzpdgXwHmxMT4qTYpRlY
OThNQ3lvKfJtWy5PVKlgPZBdYULraZku778rKP8txYjmVq4/62V4omU2OKX4
XTDkzY06MeXByfU4PO3CwUYBur597ZuTL8W/Qc+Pru/DpXy4FCG5FZmZW0pw
mo2XSrHcyf5xt6wCyotLYRrbJtNhURb05acUvXyXOA7zTKP8OBnvTUl+H2OS
sI5dkCXj2WBLSHWXl5QnlyI86HDI2p0PkPvVZcrVWinW3k5J/ZZ+lfLl5PO2
2R63TNiHySkXy9N+SPF2+fmJgmWa6XrenNz/yr1FgU/d8PhSfNC3Jikurijx
Shl1hfLnMkwurwt4Z3EfDE1k0lKGUlObetNzLyiPLsOZroq4rnGJSA1kAlky
tIyJP++sSKV8ugzK3S23a8Mz4enFrPjI4J5xY3ekcQHl1WU43NTzzu8WJWCq
8/WdZJhnbPXTO55D+XUZloqGBA+6JoCKwTG6yPCx8Vz3w35iyrPLMCBJPZ7/
QYZbTFyjhwztJ/X7uyNFQfl2Gfg7T2c3j1GBXc7pLYNsc+s8ob+G8u7k55pS
enuvIPU4c7v7y/DL7uE54a9Kyr/LYNSZV7h1fzVSmN2xwTKMyeuQYplWQ3l4
GUZNWqUxFNXiILuBLUNml3brfVK0lI+XYdKg3du7btfB4mVqi/YWMvTR/Yjo
WaqjvLwMVhG4rf6rg5L5+LEy+PwSzsuv0lF+XoZ2/kt+97mhQ8hxpgMm17Ob
Q+PQ1jrK08swOGv19tGTtWDSqSutZLgaN6HD7rG1lK+XQf5v5JXG79UwsO+6
fs80GTae53fKPF9FeXtyfAKLM4e+V+C9ZeT4szNkcKue0mbz1HLK38ugCTUP
27lVjQM9mSMiPz9i3jvlESXl8WXIr+9ee+SkHCPZBX8ZOrje3j6ghZTy+TIU
WQQOmGUghIKhQxfK4Nlnl7ntAB7l9cnPm8Y4xK0rBYtXL5VhqPOKx3NuFFF+
n5yfxQCn0J/ZYOPXK2W4MKkuSPb1A+X5ZYjrPPaUne0btGG2Z1fL8H1KmwPT
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
O/PjIqcO0WAETzxi2E0N9c9qMC9WGzRzXQWYbmfFcPLfP4T2/vW3kvpoNVDY
f+z+/kg1Ch5LHHdbaBD3aPbmqMwa6qfVYOjam/8CZLXwYeLDYzWo5dbnt03X
Ul8tOZ53DQP9duowlWkvJmjQvt2Jit2fddRfq0G56oKRKXk+GDlLIqkDkbR1
gJj083qfrQaxP72+Gl3XIYL562NkXr924PT85i101G+rwfzmQ279G6fFRrOs
s5UzyLh+OFUwe2Qt9d1qYD56nb9WW41uRoyh7n81nXdcTf8fxyV7hZI9MjKT
nf2yVwjJKntlfO2GXSmzpCgjK4UKqYgoCSVFaae97z3nnqUUZeT3Ocfn5z+P
x+3ecz7j/Znv51OFxt+77eWdNJR/q8I4xyJfnmcg0zy6zlXBJydde+ZINeXh
qvBzaAmTY0XmAXkuLUctUKHZLrezDfeWUT6uCsFHip7tsCuBcl1usQqz/rxd
WCUVUl6uCg6HjtSZ1uRCGU4tVAg5+PZFQptsys9VYXcjYXOD+em4L+OvVqoQ
pzo2hbf7THm6pHziEvw/5XzAGgWgpULXd4532315S/m65HmmJa060CES8u3/
kPUqDOjfQJdtHUZ5uyqs33J+WP/Dd/FxurZuwmYVspfebhzcxIvyd1U4xR36
46F1GE6D5AsNKtwz637vV3cTyuNVoZvu8Y61s9ZibDuZ2EXetyKyKlf7FOXz
qmAxet3VD4XXoVwP2adCXpfh89NKgyivV4WhkfuS3hwIxz25+diq8Mvu6NYX
Bq8pv1eFXZzl0YwBcVitHMCo0Gblsy/Sjo+U56tC1Os1K7x6pUJXAY6o0Gv7
pWvX32dQvi/5/uUP9x26+gWJnh0qbZ1U6FL32pE5k095vyp0mP6if4cZxXA8
GBTvflKFld936hpOK6X8XxW+GTezHm5C1qnKhpEKrzzEi5u7qigPWIWSFeGm
o9RqkMXXgTfnVbBdjBd7LrKUD6zClAMu/XZ25nBXPg71VCFj8rmgtvt5ygsm
f38q16numgAFZ+utAjdzm9dpV5Hyg1UYYp2lrp0uQcHd+KhgtHHBo/+iJcoT
JuVRzYT/qZOQIKfD3VIh9JOqbWSNRPnCKow4afTuWagEhw9Rdyf5kf7y1OxE
A2OJ8oZVOBre9cid3SLk0lx2X4WCxQGGV20Fyh9WYeyAHVbxs3kIXnKHJP3j
eoNUlVpDecQqvDkSONzGioX/kcMDTz9WYdhM9eibD9SUT0z696zs2t5kHFK2
/5+oMPrQ+z+Ta8oor5jEt7B403P1JZDhxy+eqzAvcFf/mL9FlF+swrPRX55s
b5iPD7KdKFKF936npzbp8IXyjEk8/WZjOH12Bo4pCW0q3Gm6brV5QArlG5N4
2t/U39ItEaPrN65qFEv6+9VnIwLXxlLeMXn/T2r14ZhX4MtryQyUPM/RNKde
855S/rEK0/Om6nRpFAi/jzKAUwUpt6f36u7XKA9ZhZ6Fu3J03U/gn35Shbp0
wzdBx5dSPrIKrw1Ko5frzUFbRU9B2vcwR59JWx0oL1mFhpZOX4acuIx4BV+p
wpFn4SfbjbtP+cnk85qSZuMGPsE/vAVpPyNGWjyxjqI8ZRU+5rduru3zDvLt
orBiFa4/1gxp/CSB8pVJO+06W7/RiBRwI1vqfCxXITpiy/6AhHTKW1Yh9iVf
0cEzG75d5AtqKmx0vvXW+Ege5S+r0PrhkZwl9kVYoQDLVMjqmvp9bmQJ5TGT
eBLocu/4kzLoyNe3K0k87NNyJn+9gvKZVXi+wOAhv1uN9/LyrkaFei3nOSb9
WMprViG+j9OYunANjigH6qS9WB9wruzKU36zCuMPDx16drGAkddP66/7o0Jx
3Y3/xMUi5Tmr4HRpX9MenSVonLoL9lpqDFn7bNYfP4nynUm/nHl06/qvEuTb
kB6N1Sja3Q6d/0iU96xGr21N/1YmSFiuHACokdx1VIOI5RLlP6txMHml58gA
EW0UwIsaC0bNLTCIFigPWo31bow08AYP5bpiOzU6GWYNSJ7LUT60Gp7jvo5Y
lcBCmc50UGOhfkRBkgFDedFqmMe3N4wjcX2EsmGhxiCzvp9X25dTfrQaE75E
V3dxKQUrp7P3UGPvhO/N4k8VU540+b7e+7cFti3ArYhYX/RW4/UXN+Nj3XMo
X1qN/6bfTEqfmYllt1aSJY8adV0XJGtfTaW8aTXsNwd0PGj6Ca2VCZYaP7rN
13P7Fkf50+T7o+2Tr02PwbudckK8Gmr/Ft+f+j+jPGo1fq1y0BuU/BDK9ZwR
aoTlnLNr/OoW5VOr0fft0GYuEWcxXO6+Y9RomHy2IrjrFsqrVmNw4e0Pl6q7
QbGXjFcjd0rfu0uTbCi/Wg0H9t2omaGeuNk0+7gwWY2RrxcslFL8KM9ajeiX
kRFrfofAQtxBlvyk/r7NXBrz8QXlW6vh+PDgivDOb9Eqs4FRz9lquCY7Oaoa
faC8azWeH0l+l+yejLeRXtpjTdUYFWvs0y8ljfKv1bD971VAO7csHLwzKHeR
mRoHVnhlRu3OpTxsNRJE1zu+1oUYJh9Hm6txIvBj2deRJZSPrYa2dvHHt0PL
oOCnl6sRF2haUdCtgvKy1QjX9Fzm+l0FBU9lqcbAk1/ytj1lKD9bjfTWrksc
zTRYKqevriXlwY92sH7DUZ62mszj24WvbCSgRV85I1SNkEVBufN0RcrXVmP/
14NeWhoRb1rIF45Je9seMaCvi0R522os/575ZVapBPvKiRH1O9T4mmJ8uYbM
t/7xt9UIql6V8qJAgrGcXrlHjR1v0md2OyJRHjep/7nB3J18EcrxywHyfMFJ
aYlaIuVzq3HnbKVJvcjj+l35gpQaOg0XFZ0M4Civm/SXzAnfjozUwFwBxJH2
0W5mUJgXQ/ndpH+97NXkRqYKzffLBEQ1nDInNhv/s5zyvEn5d2v1rrpFGeTT
1ovOapT8vvn8lE4J5Xur4c1mc5E9C2GnHOiSeVv/8d9V/XMp71tN2vWxK9tn
Z2Fo//Kdca4kPlw4fPWdWxrlf6th6OEz8b5uMpR0ogtq1A4butv0Yjzlgatx
bJ/afefTN/CRtxsvqdHlvx/nf3d7QfngZJ25cV9F750hWKJsQKtRY/eNbVp1
h/LCSfwZdCbn3FEPKDiaG2oYNT/a9ee4/ZQfrsb25Fddlxpq43XApxtTfdXw
mqh6ENFmO+WJk/74o6RpXoYrbN3XH1h1Vw3995OPrn9wm/LF1VhUc+LRrYJH
GKIsmNW4EtWg9rrpc8obV6PUeV3zFXdjUGZ1zsD1kRq6M2z0W294T/njahj8
MT3QMO4TrsnX50PV+DS3h/Wq3FTKI1djgN41s+dnM7FYXl6Hq7HP4NDWvE05
lE+uRjf7s1M3riyAYjd4QeLbo3ytqQ+LKa+cxMfrY6f3CixF9A8ZQKDGocG1
bmt8yim/nLTnfI3D6MMq2BTuX9LsrRq7SiIwYCpDeeakP/1eaWWgYjE4rtlA
g/ckftRb9XHfyFG+uRr87uqco0/IeviB/EBqzBz+zflxikB552osTo3KCXkm
4qrniKwlyWrEvHBszK2XKP9cjXa1b7TDPkv4p4dUQwj5PM+sXqI8dDW+//fI
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
+urez86gvj3SH1KsGaMHX/DFQu7xPMausZ5c75NP/Xs8Rv7Rb2G0oBjuE2VA
IY/CX9b3DE1LqY+PzIsiLcK/oxyzlA0FEj+uNvP81EdF/Xw8+OrMbV0lNf7I
1yEvk7irZ7s54hpLfX08HHpkzvvRk/s3XfLhcV7U7xdHyuWfv49H2oolp2Nu
CdiuAJV4WA/v0Nbsgkh9fuT5n6W/fTxLgoEyAeJxqVty2xYxEvX7kfK+5zzi
4E8J8ulvxH0eAVfNXujWSNT3xyPyQ+lI6bEEmQab+oBHg+PGX3oOkaj/j0d6
6u+RT3eImKkAIHgYjttV83CvQH2APIasN+W/kn6n4D2e8sjtXL1/UomG+gFJ
+/g83VnXgoVy/SeChxjTNNzXT019gTyaZOSfe5BegW1yeIjiYXujm90uvoz6
A0l9fU0oca4pQS8lYZWH9qbWAe5CEf75BHmEz0wdsfZrHrK+OQZvieXRVTsj
Y6v2F+oX5GEaYjpsxZgMuOXquxz/wOPa0Nb7115Job5BHl+79rYq2Z2IGW8e
WF4hcSllbenY9jNjqX+QvG/fHC3W4xUUXH0K+b9Y/ry091PqI+Qx/tS20U5x
AVDS2TNIfTrv3se+uUr9hDzaHdq59miPE7CWj7u/8Ph09fuhixPMqa+QxyaD
4NvHO87DP30gj+dn9pT4f3ag/kJSn1bWy4JyL0OmIeiVkHhdu3vfe5v71GfI
w2lPtLmX2RO4DpRvkJH449nQxN47ivoNSX88O2jV5PB3mN42etwslscMLeHi
sJQE6jsk8SDayiN7agpkO9FagUdBwISjh3LTqf+QrIubx87388tGiIxnruSx
mp1qPeJ8HvUh8hAqzT86nS3CVjl9s4bE65x205bGllA/Ig/u+k/DFVFlUI53
6ni4TDriv/tuBfUl8ijrvI2ptVMjw0MGuPM4Km6f8HAIS/2JpDxdhui/iNLg
nGwH1hLAmmxYVWLAU5+igL6bK6d5LhMg01uqGwvgj12+/9NCpH5FAXovek7o
0U1C7czNYqsWAtoPnmNXcVeivkUBvk2ivg+slPB4iHxCLmDtno8tX/+WqH9R
gL6bx17bDxK2KBvEAox2JjYysJCoj1FA1X+2juf8RSjpSvoCJkxZtMTuxf/9
jAIuN0o+7076fbq8ndlFwNCv98xXkXXmP18j+b34rSGGb1mclXVhPQQUJM3e
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
iBj6umv1uGU89cuK6FPS98PWWg0UXcNiEZ7jNl57u4ulvllSv6d/VO16rYaC
cyDzxgVfQ0v6V1ZQ/6yI9lJil74ty3FMvu6xSiS/87hfnV4p9dGS8rtR3/ao
fjGU5rBGRGi2w9yFxvnUTyvCO/N9z+IpXyDTY0duEHEodkqvTXszqK9WhOZ9
taFuSgruFGcazd9C2sfgR9PyshKpv5aUZ9NEaN+Jxcr47Y02bxehs6fkddqo
aOqzJc+bMGfF3IdPoaMkjIkYsrXrgb+3A6nfVsTeBmHztmv74L2MJ99H2lvf
tI4nHjpT362InyYHVw5PW46jcvqyrYgnWp2Kq3ZOp/5bEV8WjJppnnYMyvHm
IVK+a0xczB56Ux8umWdX9Vy9xe8eNHPkC+4i/ITnhnsSw6gfl9TXf6WJe39E
wteYafnTSURGzO7+zVa9o75cEQ2bxb17sj0BMu26/SkRK6o9L8S0SKH+XBEn
tSy+q26lo40i+BFx9PgnHN2STX26IloM+Np1l1ke4srkC3kijBuO+tPF9P9+
XRE37e2Q5F+CIzKO9yLpH8fyfx6+UUZ9u6T9xm33fnGqAkq63mURqv8aBRZZ
qql/V8TV25Nb3G7PgpW3831EpP2apdX7rob6eEW07nH/ZvfWPG7LOs5bImY/
8UuvniFQPy9pn7U/SxNIO162Wc5IFpF0d3WqZzuJ+npFiON/nhp4S4J8Gy/n
Pol/OvesV4gS9feKWGSyyaDsj4TYETJAmfRPoen1c0kS9fmKmHp6/Pf2ayQo
eskQESuHNTk2JlSkfl8RtX2l6IAEAQp+8qmIdM3qyCZknf/P9ytCd82Wowkr
OTByekoEKV8zr7Gj8ljq/xWx/16/GRjN4Ja8fRUlYrPxlakOu1TUByxCS/qW
rHO+HBbKBg3pT9xbo/98SqkfmMTrkOaL1t0sRiufMSTCiSi+FOkSPqmA+oJJ
+888X/F4bg7eOX40vf2B9NeiTR6H9mRSf7CIK1q+k2zepOKgAqgS0Ux8aRTs
/Yn6hEkccAqqVJu8h6JTSxHxa2TchhYOMdQvLKLMsjIkt+VzqGXcWoaIAR9+
X0y0eUR9wyKiZy27k2t1G8p1bDJPfZWWur6okSv1D4vIfO/nPsPZGspyrUCE
e9rWqPy9OtRHLGJT9e22DYYdQEulA4hIfvrJcn+lB/UTi+DDPgyePcsPb1MK
Bi6sENH2jUWDmDsh1FdMvj/GuHbi2hewf76PDEmk/zxt0DE39w31F4vQa1IY
tzM6HsZKAjCpjxVaHVOmJVOfManPhlO9/9xLg0rWB1WS9unouKZifRb1G4vw
OPzw1djpuVDwQjWkPZRqe9pNKKS+YzKv0Z/SYWP3EijXD+tEVA0at8i7Uxn1
H4so3M8t2tG0Ai2UhCWyTih5u2xgqYr6kEUY6i0u3erLQN49/60l4euLHQuG
TNZQPzKZ18y0f9g4jINM09NrIuGl4HzG8AdPfclkHlWwqf0RMq4PVYRtEg63
HLP6LSnHf/5kCUPvrtzndVxCRbp8wZp8X2ZS9rEiifqUyTr+RtLWv2Q9ougy
2kswMd1m6lUsUb+yhBOjR2tFO0pQcBr6El75f99aXS5S37KEHf4GmUFk3tBc
EcxIGFIct3Dqb576lyV4pdfo1D7noHTHHhJmRji7Fc7QUB+zBKOrlZNfBzCw
tbgc9ba3hFnilCPNNCrqZybzvpNDk8J0KmA0USb4SvgWsaJtP4My6muW0Ly7
H6tvWILy3jIQnzyPR1Fe2fxC6m+WsG1xcJtNS3Nxrbl8gC3BNWtWr3P7sqjP
WcLaPlWz856lYbGMhx9JymHkD+8j65Kp31nCqmbfsi/mxKOZnD5uQualyV2n
63x7Q33PElSHvbs2PPMCyvHyBPI+Ds3bj4sLof5nUu6F3V+7HfaDjbLhLiF5
+bPIv+M9qQ9awpsP5iaXkw5gyLnJe89MJ3Fr2t/+r1fpUT80+fvnfWbd8tyK
0r3yjQAJ67Rn7Xl54hz1RUsYvULXvmzwbci3EyJNJRS1ndaRHfWI+qMl2C/X
X/+97BkWKRsEJG6yfXoFW8dQn7QEm12TVce6v0dTGYdsLmHR8+O5vgc/Ub+0
BE/zrTbZoalQ0iVXSNi0o9hVe10m9U1LsPQq3u47NgcHFECShPtmuhHmQwqo
f5qsewuj7QK8ijFYmdBICFoWa5LqWUp91BLsjtzuGeZSDtmGu4isC37onZrh
tEVF/dQSOl3xV8UYMbhy/9Bva2sJVhndt5tnsNRXLaHz56YRvuYczBSggwSD
9DqvkLs89VdLOOtQf3ZcnABF77lHgvh1d9VrEvf/+awlVF5yZ+5YSlDwnwck
3F6IhMGfJOq3ljBodHWTq2T82C+nB9lL0Av0GtpPkqjvWsINr2m/m/uSzykJ
qBJCKx4dOE76zT//tYTGpx40eU7mWfLsvN6B1N+89R/S5grUhy3hzrCu3760
53H5u2uuvgtpr/3effZ7oKF+bPI7eaOWJndmsVARcJLyDiiMvrFRTX3ZEp7+
6X2Wca9AIyVhRsJA/3Ndf90to/5sCVftBZ9Dj0qg6Ow8JKR6aHJcrYqoT1tC
k8+Tdoauy8M+GXfnJSF73d7WC+yyqV9bIvMJx04NQtKhXIe/SspnysiI0s4p
1LdN3qdR49EeJxOgLJdvkP6wq9V2nf3vqH+b/L61za+WfaLgPVMmTEiYb/0n
XS2GUR+3hKnq7KVC/j0sGDLKveCuhAt/vNu+qfemfm5S/zUjHZ0uHYe2Ijgh
/eFe9ga7gTOpr1tCj8ubWzo6LcPLOvlCkoRmzVdb2U5ypv5uCfHbvTeOCbqG
vbK+KUzC+gUTmCmbAqnPm9Tzk6Qui08+hYJ3IvNm+yCTcTlNo6nfm8S/Pd8e
rj0dC+X6J5mHu6yymW/3MpH6viXYMgMfv4hJgZc8PYwm8fTc8KO91mdQ/7eE
84VL5n0z/gLTw/KMlfzel92Fv7rnUx84KY/6qsB3rYvRcEPedP/3Elp5d9u6
pFUp9YOT9nq7z6WwhuV4MUfOoJWQOS9lQWu2gvrCSVy2XhP68bkae5QNX1I+
VpxR+FaW+sMlZAzpsrpVlQaKriRN3mcKlQIX8dQnTtrbq7vTOhwTUCDjTLIl
LL61cvw1G5H6xSXM001oZUXi4iX5ulOehASdc483kXL75xsn8cSg+cOQ7+Rz
ygKVjEc5QYNM6iTqH5fQe3y6nhgpQbZtLSmTYBhjNCmRxMF/PnLSfyoD3SJP
ioi47FS7XU3WOU7W8+5eFKifnMTH3ydOL9nOY5cC6JEwcn9ik606HPWVk/rs
Vuk//zSLfsqAKiFm9fx33fPU1F9Oxjn3PSWubVTIl/H830h8su9VkDCwnPrM
JXTvv33i5lGluCin75N1VNkmv5rhY4rxz28uocTkl+X8XflQjvd/SWi4qku2
7bEv1HcuwdfWb/+NhxlooPz7iumPGzs0bJaK/wHIGoVG
           "]]},
         AspectRatio->Full,
         PlotRange->{Automatic, {0, 1}},
         PlotRangePadding->None], {0, 0}, {0, 0}, {20., 1}],
       AspectRatio->NCache[
         Rational[6, 35], 0.17142857142857143`],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0.75],
       FrameTicks->False,
       ImagePadding->None,
       PlotRange->{{0, 20.}, {0, 1}},
       PlotRangePadding->{
         Scaled[0.017142857142857144`], 
         Scaled[0.1]}], {180, -100}, ImageScaled[{0.5, 0.5}], {350, 60},
      Background->RGBColor[
       0.9568627450980393, 0.9568627450980393, 0.9568627450980393]]}, InsetBox[
     StyleBox[
      TemplateBox[{
       StyleBox[
        "\" | \"", FontSize -> 14, FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"\"20\"", "\" s\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False],StyleBox[
         TemplateBox[{"200", "\" Hz\""}, "RowDefault"], FontColor -> 
         RGBColor[0.5098039215686274, 0.5098039215686274, 0.5098039215686274],
          StripOnInput -> False]},
       "RowWithSeparator"], "DialogStyle",
      StripOnInput->False], {355, -159}, Scaled[{1, 0}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{5, -158}, {29, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       PolygonBox[
        NCache[{{11, -157}, {11, -136}, {20., Rational[-293, 2]}, {
          11, -157}}, {{11, -157}, {11, -136}, {20., -146.5}, {11, -157}}]], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{
      "MouseClicked" :> If[False, Sound`EmitMIDI[None]; Sound`EmitSampledSound[
           SampledSoundList[CompressedData["
1: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
v8Qg/g/But5u
            "], 200], "Preemptive"], 
         FEPrivate`EmitSound[
          SampledSoundList[CompressedData["
1:eJwUmHc41e8bxyMN0qAoviKFrJSStlspFJIKDYkSUtoSyYqGkUglIakQkhCy
bit77z3PXh9F9vh9fn+4zuU6OMdzP/f79X4d2Us3T17hX7BgAR/5Fb1ywQJN
3hNeMgvBWWykmZdQB2sO3Tflv90Gw4sM7jGSe0H60DPW+l+DsCIIxWfqqPAx
cJlNZhADeMKCQae5LKj9JnXMqo8DAQdF5tZY8iBSU6LV5TIB/o6q713ZBMRV
3JsfHyFA1/vHuno3Al6NpNJ7n/JAN72BNbaOC61blnc07GRDwlB90SSVAfs6
8kcSttMgpbJu+XeFIShbZz54OaIPph8X7tno2A6yvrdeG3bXw/mWDMfdq4rg
K3WhkPPsSwj4bCP3LTUHJ04LbBB8X4Myl7Ld991txZD99xx0sAc3LnYa23ts
EG/uDkosvkbFZOnunl+7GPiiN+XGnxgW3no8nVXwiYN3qseUN2/noad22QGu
HoEj34wM8voJtKJM9GpMEfifk8N+3isCd7zr/+f1nYec1OUBnie4+DmwZZuN
GxsPOzZSXfcy0TxF6HjFKxryjl2No4UMoZrm0MNGnX7Uzn5n+9yuAwtiUvz+
DDQgoyDTtUmpBHNF/xX3zERjh4Hu+8wHmbC/qlR7+fMqeOZ4Mazvbgsstvwa
71vTDVuf6vGv6ByApUKORUsXUyF8pu3ykl46ZG1WzvhmxgI2bL8mZcuBbckz
T9YJ8KDXp0pbVZmA2ODIhoImAu41q1ZsmyPgYZ1idGM8AUE9ty9MN/OA2Fyi
M+nLhd0P1kQuLmTDTMfFdo1AJsxOnDM6MUKD8p5q8bzZIVArmwkyyuqH4K3C
mgpWnWCmfq/jFK0RcPBqNv+hUvBaFOZV4/IVHm7+HCp5IA0lDocEb3CqQJ1T
xR8X3G3GAFro7oKOLjxlPPIvyn4A+0NbnjRGUVD5vJV+rDcdO2Ndfr9YykIx
neEsZwUOJozKmnCauNgnPju+W4hA1WiHdU9KCGS/UrvPnidwn8Jk5cMcAqPK
dFz1J3h46NVWowu/uNg4dlMvfSEHh3/0/JbtZSL30nrNPSZ0nEowa1a2o+CX
K23j4Srk65+8t5Fu1oXlU6mbrZlNmNYdein6TDnm1MlWP5hKwZayqL7DC5JB
/VJRkP3FMnBL9v+ZcqsJFv/20hegdEK8hUz9v3/9sPMqHyhqUkBVddtMhDwd
Us5slA7PYoJQn5d0G4UNZquCeV8+cqHFuvmTGIMHRyzdtq9II2C5SFWpzTwB
vXeVrzOqCPCxtq+zlSAgzUlM8CuLCwfXdrjZH+aAyzO1qX1bWMAb5F199I0O
zKLa24p1FDDTFHuVGjkAft2ZZdkG3WB5yXHHEnYz+Esf//3EsRKKBc97tWv+
BE3tDUd3+XzBJA3RDiH93zix4eJSfsdG7Lkgr3yZ04HbBl9/kfTux7lWawOR
6iFksOnL/5bSkLKh6FKLLROLrs7vg49slAq5xNJ35KLKs0NJJcU8lB+eP3fu
A4HG1p4lETME2jVdOb+2k0DPiFNLTu8mMC5hyVy7BA9PZfR/k37MwXCKxOAj
VxYqSK+2F1/KwOKtRHjyTir+nd5iHrBiEA3eeFKCtHrwRP2/ph3sFryWG33q
pWc1XuA63v11+xc++bd4/NjycKjz+ae4ZWsxWLRH0BfbNwBnhZ0J72876Lqk
Rost7weDlv8UXlsNgcLJt0pJtjQ4vT7JTHc1EyrLJ5vTz7Ohf/+Ff+2aXJCZ
8o3Wj+RB2+Dtf9eeEyAs/ujjq3ECZC8Xhy2hkbl1Y9HoclMCKtd+amfq8sC7
TPBmI3KA05aybPA3C67mM2tmrRjwZjtDLCOcCm9UF5zY4D4IE9/vnjfd2gtP
T++ebma2QrL4jui3wbVgWn7sRF1CHoz+uvEhZoM3mi4bNv23phBtTEWzGqzr
0eGY/KnM8TYsex/J17ulD/9KeF3KGRnEzcOH1zUK0HBfomfP3zwG8j+Sq9+/
ho0aN9OoZ+c4eElvRvPzPR4elvYNPHybQKm0iKyjwwQ2G3UbZhEEdsqpB4Xc
JNAxuepa+20erlwj4eIxxcE/+1MULq9ko0mctfmWLAZSYwaLd81RUfquVbQt
ZxAn/Gw1ptb34eWrCzLbaW34TeRfyr4T9RjpKT1CGy5As5z3Xlt/euDyhy2R
oiN5kLTuIpOZXguiFyeG6qZa4XT0+R2W0AtjDk+T/H0HYbr4Ljp8pIKPfPFU
vy0DbDRmNbsrWdDKzMuoK+ZAn9ofw86jPCjgW9JGNSPAW886EMk57JnsKFck
5yLCs57qe0rAtmxqysdwHvy5dumr7A4uDL3uF5gxY8PYQoe+qOVMiLbz/Khq
RYPNIXHe5meHwPZuea3mon74gPu3bxlsh9Y1R/b5mjWAP/tzqMayYpCd9BU6
xwqDnSUr1KWzf+Eezp1ziz9XY9/CkdajMy1oxK78knu8B+12aJUvFx9EekXs
hkf7qdh02bFBfAUDZRm3doZ5sJA7nvZM6ykHxYcdaFwpHs4kFXwz2UtgkiKr
6h+5Fz5nvJ+cIffkwEspj9FIAle6CJcfKuShis5q/p9XuXjQ9254XAQb9eSt
rQytmXhnwfmywAIaVkRpHWWXDKG3quV9Y9d+9JrRzijo6kBZq4S/r883osZ+
3Qhlud94RnnsdNPfz3hvPzX0rMdPmD45JigdXAkteVZSu2aaoUTpxXEhi26w
vXIo+OiXAQgLHTyzqpUC3Xxen8LT6GAf6C5xfzsLls1ZRSfocyB1YGTLIJcL
fs6mYn7/EdBfT9fnVhOw+9JBRT0yt56bzL2o/UHA0MSRiSwqDzQzXBN2RnHB
pcNyzqqfDfuVvEa3pjHhprinw2kZOig9V7oouZUCHx/trtfi9UP4qUVJXk2d
cIZouHX+YhM4PitT/7SvDKaKy5Lmb3yDGtOrEiI6P1BWkX3JzK0c32t6F3yd
akJGVYD+Gbsu3JK2bUp3xwAK/1ONVrlBwZ77bxrumNPR82LbyYdDTFR3arNd
t5SDmibW97JzuWjzTnpP8BQPSwYC+OJyCfSL3+oySnJkbFlH8fViArM007/z
LSXnNHyc+FDPRWP5nw6bNnJQ+/KxVp2FLLRYxul2caPjCmaQfs9bCq6MDEqZ
sRrAWOrlSMuKLsxnFtgWWzejs2b92wcmFXh+5TXXgNFUXBi48PTGZQlg2PLf
3+YrpRAZrsdKG2+Eoiv5jZm3OkFNSVx4RUE/aOcIHW0VoIDiIofOL5M0GKhw
u/MthAkm5rJXA36z4ef3t9tcn3OBtVjg+tU2HkwZuP0nl0AAb7W4oxXJ9Z5r
1X01jQR4uhU/llQkQG6YODS8gNyn3un9LGsOgDvbytuEBQs8+F+Mt9Hhn8Dh
T6rzFPhrvonPq3EAJGpPaermdUPvuHRUzqUW6GCGqPleqYKfSWbrdbZlwu9b
Ii8NX3zE8gany2hUgpligp12Iw14wHfk+N4HHWi4o48aa9CP5WHTuDZ8CDnP
bc/tDaeh1uR5ZVFtJjbz88yXebGRu9JwXu40F5Uen1QUS+WhXGQ65cprAl3x
xgZ/smedMLeoGe4jkD5pqs6nS2D7x7gDm7by8Oic+1jKBw6uNolbRYtk4UCh
wLIydQaOCupv5rtCxT3T1YXFhwZRrUJWd/P3Hmztdp9Sv9SK8ufv3f/kXIN2
D5ZYmjvk4MGUSLF7G0JgybC1xz6NInD2PcBo49bDw9UR2n8etQNdzc95R1If
JKmN+o1vGYLLO9WW7dpDg1BJuuF3NgMWvj+wJHwvGwSmimLypbhgy36x8q0f
D7KcHjQ5uhOwbvxS+71Rsv+6+XxoZhGw/jUnIs2aABkTeuTO8zz4sS5m/90u
DkhZ7n58lcGCbVuezA88Z8CuayZxpyqoUP1tpWDej0FwsogtGI7qheX7v7iu
sWqDJtZ30eSndTA21jnhFoMwbKla7bHtJKp/lVS8KVGAV4ctl26prcMH5v4G
PK82LO27+60nvxfHjVv1HxUMInuHbHFMKxW9jJOq/V4zcBdb8MaBvyyMexfA
bzDEwal8XdYfKx6eU9R4cuAKgYnmpfzSHAKHF1cEPxghsGO4unHrQwLb7Lz1
5Xx5GMdV61AV4+L8mPqDJepsjDTv3Xmon4HJF4+JrFelYa16nMAVmSGcvuaC
wQF9uP1ezR4Ti3Ys75uhYmU9yub40nZwClFRX0XrT3oQJmzhS14wnQM+G6yv
XM+vAfOUX9t1fFpB8WLs5gt1PfDUm56SYjII3icG7/ncocKBi6ychAMMWNzE
+TIVxwI1Ay2V2jgOTNJ64hR3krz2sSpuPUqAl8hKzacDBAg5H17aPUlA2We5
JfdCCDBxoelzkngQdeVjdochF37MWjZkO7Nhtcy7twMaTKDfa7hhFkiDEX6x
qTT/IVB5FVw4s68ffjzg3Go164C9G4IqXOoboKVm8R/qohJQ+/AyzPFaNCx8
07lDuTATn/x+I/EqqQrz1wu08fm24JP7V8qKerqxouxIyLuBATz7rkNtSJiK
9SqbDMUodPx+sITVep681wFKxw0dOLiy8Kyl1hIeRtdectmnSuALIwP1H80E
Xo9ODZqbJf3ki9Ib9zjyMfREg18jD/0mb406eXNReb/0K/dcNt7woGzJfsrE
BWqZ1AkODfvKVPRixoZQUkI+2z+lHxtC/jiHGHdi74W6g3+bG3HfC6cMNelS
9DlxMfo+Ix4bHQVl43zTQL6J7lYaVgHdScyd+32aIVqn55UMqwsOZ55rglsD
cGXlT8nSLxTYN5JYU/+MDjplp8LblrPg4tlVhRXKHLC/rXRMs40L7fSr+Y7C
BBzPWN0d8ZvsveUPevpIjox07xI4nk1AQPf83tl/PLjmYY6zP7mgaZhLMZpn
g6vajGxpOxOGv7hkzR6jQ5Xwu0uKVhTg87kZwt00AMSIQNld3S4I8pUfEW9v
gj6ZGgeGRjlczSyW6fuRAscPicU+DU7GWXAUUn1chkX9uvYC3k2oNsvL8hnt
xIpRw9uJs+R5XKW7aRyg4B2bfd+HVOioXTS0gz+fie+GW2ePMdn4wINds/oL
F1lx+vU3WTyUkX+oa5BOoD8roc6D5Eg0nT3bX0kg9dyVxQfXEuhh9trFkc5F
QcGqVXLaHAz4F5I3v5mFJ1TzdS3j6Jh5wLFbq5yCJ9VjFCXfDKARf8m4/b5u
1F7IedfS0YxIUbTkHq3EwSWbMk156SgXbeH5TiwWVpRUX2Be+w2rtqz8eN29
Ecxkp30XznaAvfAtD8rzfngwJpe+s2kINF46PTpdQ4OL23rNLa4zoW3Njpjm
L2zoKNx2p/MWl+SF0ZrDpTw46TQdnxdNwLJ1Kxx7ZwgIFdh3RrODAOm1Jl2n
NAlw5W2PKxTngafPfd8Zdw5cK9xzzdqJBRrN5cvX8DMgqPWjZa8aFRTOZt8S
XDIIWscellqp9YCxwa9lUp0t4Oh8fX7thWo4+y827qTSL7Ci1Jfv2fYehwxC
tsmdKsbudwKqT10aMHrT1+vfFnbgkfxUhZE1/ZgQ3bu7wW4IqXlOg0qONAxT
ulrGXsfEB4Vnbl6zYqNz5H5q4F4uHusWX8v9wENwv2jzz49A4F9HnR4nMF3h
2SojKoHJ1lLPd5wicO4z/B3T4eGoS1tzYw4HFaxLMqgFLAzg/Ilfd56BbRj5
bf4VFW9piTql3R9Er9kLq4/J9GJgRNzu9vZWzHFh9h66UYsRmbqRzy/lYdBm
zSVJtj5w/sRTc/49hbAs3vG67d168EhJmn+1tB00n689hgf6wG9zTsSK6UEo
UTX74rCMBsHC85czihlgaP356BoJNryNKJpS5+eCGe9KgKMzD0Z2JvCN3iFg
QTQ7qH2YANiaYShHkPM507C415EAgX/LVYRu8mB4t87PmDEONHESjZ4KsaH5
rETjlVQGuNVmxr8fp0J01bDZKuogdLOyh1av6IP2oXDViZY22OTjdeazVj20
6c6ot1UXQHpKssZapYeQ4bvK89S+fEyVfJW5p70WQyKe/Slf1oZP91e+szHu
xbeBK/z+BQzigsqfX9fHUzHzssDWousM/Oh3aHdzHQsvXfqYWFnGwXcbucfL
DXm4Y25KPecM6evjJ3n36ARuN9p1PmeMwD0RxndNnhDYP3Jdf+ItD0X43/HZ
b+Xirpob89on2ThcvvbSvyVM/H4h81jiWRpmBq81XndyCPe2q13+NtWHlxJ8
Vjk0tGOUiZ0i/5EGrD/17P5eehH2KdVK2pW9RSu3lE5P/mwozF8k4lpWDbzX
xqstl7dCZP0yQbplD0xVGhcHrh+EXZR9xFEd0kf8zh8VW8MAab0WmxQfFlTP
h4tZ+HPAbNF6qwUbeFCy/mat4X4CEoUzvjZ0EdDgKZEmQu7J6wM3xAIiCKCu
7bPLz+dBdH3AL2lbLsRc4OUtD2PDlrQtJoXnmfBm8mTC5mwapMsYJxfnDUHN
Goe/3nf6IWv8i4pUVQfcUztrrXisERZlHk/QX/AbapsivjtafwbvMzR2e9lP
DPM7qJSWXonLky+durKc9JGYf37m17vRqDpgY1/SAKpSJYLHuikYIjn29+cv
Oo5zxf9L3sXCkWShhyxDDuaOcOnr/pDebr+gPWE9gVc5K0KJGgKfHFo1qkDm
Vmi9pEVACoFFh2trzg7x8Js/wVcczsWzspWRjC42Jqvcyiz+xkRh0W9TghJ0
fBD/p0dIkYJFfbvuPKH148iqOspMUSfeXun5XuB4E167bDXStbYMl2wzlMjq
SUK6bB5fvP8PUAvi2gtFl8Pfxi25w8uaYa3V1K4y5y6oKesO+7N3AD5L+v9W
dqLASUUbv4QLdKC9cS1vZDBh09TbQ67CHGAqxWmIFXBBQ9zauW2GB0conXF1
eQRYGz6kTZEcUU5z6j1RRMAfiTxq2SICnrwblTOp4YLik6zW6vUceHRjR83Y
LBP8kmr9De7TwY5714r2kgLUhzULz54dAJe5iOKprC44w9Z94nOiGbZPe4fU
bqmAQ65722cSUyE5gbLMKSIBbybGnvvyvBRPHh+8IyrYhIpvfxjqeXUi/W/9
lpqyfrzw9mQPdxkFtc2tAybnaVioWjm9KYyJw6foYysr2Vix/lP2RAAXaxua
Z5o7eFjfvnTp3UQCf/k6PAycI5B4yD7f3kBgtofTocUKBH6tvxfye5aLLVt6
in9e4GCd0l32aUMWxgpvqKI20FHKhtNwfIKCeRecgv5WDiCrMP22wLdufL/l
C/O1SQuG9nZQpw5WYfU0FavpGVhxWeHPL5kYyN1+Lv7r7RIotN6a0S3QCHrp
0YrMZx2wM2ZozuVUP1ju3KWj93EIymsuvvoaTQNfhSKbuCNM4FPQ103xZcMf
ZZE1ZeZcmB1f3P8lnQdtJZT5zjcE/Fz1obp3ioCtIQa5sn0E+N3UiBI9TMCD
QrV+KVUe2GZJUaLec2Cj6+6A9jAWvDjWp9OowoDXgWGM/ZZUSC96vtpg3yBI
KszkLP3QA5tv2MUpmLQCKgZe23e6Bg7eLrSal80B71rrhJs6r9DHMmrdgTNF
yBCf7Laer0fPF3xG+S/a8Vxu1aMFuX1IKXr0UGvnEIqIiJgXAg1p3ISmS38Y
aGBhxW8FbGS+Sl/gs4GL7at70TCQh4MXFywU9CTwvctzKWKUQD1u10pVFoHe
o42drIsEbjktUHnqDA+PC97ofNzGwbHg2WNuQyTX60I/CPkw8K2TldPXIiqC
wqIv5xIGkSda/2rsRS+uML+fK2fchqLXbpQ42NThqhOLnfTPIYrG/LfKY9sl
+Ja9NMD3QAFM/JRMsP9TBz+Dn5xvD2mDGG6rQ31tL1hftt7UVTYIIg2cRL0e
KqRMEbst3jMg706LjNw4C5x7oq/soHMg/rXhperLPBDnrfs2Z0uAyNIjrfkc
AmYmrwaN/SXAwprDF+hC+knGzu123jzI51O6YSXChS2LV1L3qrLBLdk39lkn
AygnztgEytOgU1rklsS6ITAw3r0qz60PpD7+d8jdoB1cHhp1qf+qB/nrmZwt
5YVwyzW+/c+NQJhyWfTPRCcXgyaTdWoGatD4g5TY0det6H3wmtu9vh5co+Y3
LHd2EO9+++mt40JF3YT0z+90GOiwbOQn3zcWJjwbMexI5GBQhXT65t08NNs3
VZhnQODH7S8Djw8S+PTzmQjPSXJPsviOjL8kcOb1O9nTCTyMTTjpv+0omXNZ
rD0r77LRsGWTtu5WJqqpa+cNPKFhbNirLA+fIcwyCsiU1+hHi1VHbsrqduCF
4uVhC7AB/9GPVowNFOOflXo7JtI+4NabewbCBbPg0VG5DPH6KvDMSTiz8U0L
+BvuDp7ldgN3tXfKJuYACM1M03NWU6Gj01ZXlkWHl6uN52atWBCxzZ/qcoMD
yiKl5dZCPPhQbLlFX40A/p1Fc1EtBNg/SSyomCVgSDd8dnMsAdUfGsvW1vOA
XU47NOzOhaXmEQajmWw4vMTt7gFvJlT/5vv8gUaDpsvZnb7EEIg83epfHt8P
lWd/v5vR6gQl/wK5oOJGsM3cxDwz9RvGm8Vz15vHQ9a3fInttWmonEeYOeRW
YFxknez9183Y48j65jbVhS/EFfX7nAcw/F3UwqwkCq47aXx98gUd/z66dlp6
NQvXiOR6S2zl4Oxl2c5HnVzkCdXwR68gkFuRt+JHKYFbd6383kByZKet9bf1
vwh8pef98PsID9Nbpavep3LR7PZaoE6x8W30Rzv7JibqblA9W3CYjoSwr4Hc
WQr+qntbqSU1gMldIbvmdnahniXIVZU2kbt4311NpBzpJ1QlD19Nwe3Xb46W
bfwOsmGUKG5sGTzdG/nU7FUT/CsYn+Zf1AWGnbJpFxcNwN+ao+vgMAWkxmUe
K26ng/Q70532xUzQn+aLyOWywUtSR98jngtrNt95VMbhwRXBgUrfnwTEY++h
MJIjXncPzrVWEHC1+kH2OjECai0yPLZSuLBcJMiiZx8HfomvsyncyAKRe457
D3ykw8V/hu9OFVJg8sqTk54vBmBeRKB/jUo38Ktom8SUN4NGhW2biUIl/Pi4
bn/Dl3SomeDwJmNj8an6y82lQb/x8MWTOS1BjVjg7FD+cXkn6kcaLPwW3I83
DUe9z3QOYTzdQ+xnEw29lurAwG0mWuR/r7ZLYCNvica7q/dI33OfnC8o5+Gb
63/tpWMI5Nuq4Lme9EMZ5sOik+0EVj4cVDLRIFA3TnUwbjUPQ7sqV7a7cjB+
696GQ7dY2FguVLxyho4eMQbXhRWpmBfpLuY7P4CxKYJGW6V70JcZ5cFf0YLD
oWlWkXuqUVXgVROzPwu9Mi7bK5yKgP8CX8VLOBeD6D3RJYv9G6AgNd7bYU0H
ZEQqWNVJ9cPGc+eyl90cAvat11Vf7tJgu52qepA0E1QEI5pkrrBBkp72QFuL
C7dyrdcExfAgaUJIzy2AgEqTmFfWEwTc+pQ/GkQhYLfanTdmJgSk1C8M5ztI
5tZ3F0Z9JgfSGVG76TksKH9jGqBuyoCOPTJP9QKpcFHFXOrIzUGwM7K12L+y
FxY/+hLZUdYK9A6LePaxWvAs+eB3UDIP/vPYUJGW9ARftkyNLr9QiKWP3ldP
+tQjcPfk3JBoR+0Rf+Eooz6c3uh83Ip/CPlGAx34RGn49f0VlnMFA09VVYUw
17OxR3o8c8liLkYK1F3TcOWheMgjdvQ9slf55TXa/CGwykAzK5BHYOrUs1GF
66TPy8ze23Odh0K5XuHFfzn4apHbka+L2Ch8ROZ4RBIDVWWNymaHqfilq+JJ
Vs8gPnk8tEplrhfls0x+iv1uw8M3N6Us21KPk6vuipXGF6D+GumMmYj7qFcv
/yf4cT4IsEeXPJ2uhYrVfhsLpNpASP5eoP3FXrijN0O/EDoIBfmbmmuTqfBp
aIfDxzsMcP5PcmVlMws+D1obFVdxgHvhXG+aMQ+WueYIvDhHQGbN85zNDAJK
GZFnDMYI0JE+b1XgQ8D3HyftDF/zwHHJ8blEFS5QtBf/fmzEhmdeyn1H+Zmw
8leRvOIpGlQn8wW0HRsC04c+r1isPrju+I77uaAdFiQ7pjza0QDyP542aBUX
wSrORbjz+Q2Y6bg6DBzLxt//ud1js6px8/mEp7ekW/HJ3Kjwyps9aJJUpics
P4i2A7KLxY5RMe2DdZ2IJAPH43tulj4ncytd+7RzEAd1Lvc6rNpE+sjEzqtH
tAgcyM0cTegmsDTE4Fj5NMmPNaLSsu8JtL3N89+Vy8PddhIiTy5x8eTautjb
r9gY7RC+U8OMiaJKpzMxjYaRhpsfhmcM4bL+c5I/HfpRxSnJ3ym7A5/xmkx/
7W7Eqs8ii690l2Bnc6PN4vpPeGXvY0+zVRlwdMp4g257JTzirWwLlm6B1i2R
D2PcusHkjbnu3fQB6BKkSXQNUWATrc68DunwBP3nhvazoPSYu7CiCQeW7yrU
NBrlQsj2A2srZAgwZ/oZEbUE0Az2KguQuTUzwH6n952AnBNRchP9PKjp1vxn
9JYLPxQ2zDq2sSHH+6KdaTwT7mns+ZYnSodPZeycyQ0UsN6cl1Hd2w+MYI1R
p9RO0H4/o5m0vwlSK2+1iY6Wwm1NxrYbhkmgqKTtcaD5B5aU/bqdW1yO6/xP
SGiub8bDWleJHc+60PW/A03hhwbwqWO/jqIbBbspi6z6L9Nx3dAZBUUeEw3o
Zp0dqziYiDmBjsVclNXs1vhvnocPdlXl/csn0G9qVf4cyZHTPub22wtJvpQe
CfdfSOAKM/O/8xVczJY8PXtXgoNCtjEJcRNMTFrxzPS/W3T8/UWkjvucgkco
x4bTTAbwn9SrpND4LpT/94vvMDTjs+UBPhuFKjC2m5d27XIqfjFyj/y9JRGk
yD25+60UCjf03L4p2QQZJkExzcGdID8aMOpX1w9fKkWaFq6mgKVk/iWDxXQY
FWq7GxbJhL/igrrBtWxw3BY1cO8lF55tT12p1c2Dw/ZpVzCJAPknCqOZcwTg
mxW6/fUEVAQIPyI2ERBWVe0UNsWFRbJbFnic5QBvr6qZvB4LBDYn/9dYRQc/
udHjN/9QYLqj49ulYtKHbKQsCiLI+/HptNsN7RawC3W9ekO6CkQ/1T47/SED
ItLudcn/iMHxXe66Ia9L0DMwe/0J8Ub0N9T/+/pdB7b+PF5qcL4fj/s93eYU
P4Q1jrcnxONoWO4dHLrXgInN3MfTJ/3YqDskUml7not57HIpjUweEuXdgUZh
BLaJPR7aSu6HzTrVdSd6CXQL9fORPUSgUFal6BolHur3Knr7veUgtlQPlL9i
Yecg7VmXPAODvwsP3zen4mjXEU79jkEUij1RQ3/Rg7LPm59IaLfiD4oyf8O2
GuT5OGz/0pGNFkp1KVdtQ+FtyGPNA25F0O6/+w5rVQMUP39z4fmHdhAWaBmp
rOqDJ8KtvY/3D8EJtf7Wo7o0qHoQa7ZmnAHDuaKVmw6zIezpGQE9OS7ct7Gf
mA/igbCQYtxHLwLot3qrbP8RIHBBm+PJJGBwz58gGUvyceiT901THrT2NmwK
aeJA9LN8WkAvCzZopRxWd2dAscd9r9kcKvy9wIdjMYMgFiBKTLr3Qm2VntQO
rTa4/3sJV+5gHZSK9NqLiCJsSpgvzNW/hjY3N0WHWxdgBSu264RQPQZsEfIp
+NSGT2yVEwt6ezF9c7DLrrpB3MX/rp41REU5bct4lY+kjxxb/HnpDAuzE5be
lWBz8HUJ/cpnWx4u0f50LM+ewLVe78UucAnctunSxO2/BB6LV4+lOxN412vR
lzgPHqa6rUgIXs7FB2FLNlzfzMbeowfEapoZuOLcLe60NA2jr38+Ub1qCDWl
u1qo1/vQYXjJ6a972/H4uZr7MXH1KNeg8VjhcyG+3ustOqzoj07S4SPR/rng
aySapbKoFlxUH8sZxbbCjPx9u+dEDwhSi9LfWg3C2dpHzQs8qbDAuODtk6MM
2BZ8PmpxKgvoUWXrB79zoMr9obHcPh4krHDcE2NEwIHxApPVQwQY1u1/v3GS
gLV3N4w5B5FzCt3q+SuOBxE7Hed8jnBB+kSHg/UNNnz1pPXFKzHhuk33nmue
NPAUcB06+mgIrvk4WRqp9sPl6ZlLDjs7QL7v9bjvtwaQ2WC/eHF+MdSld34R
DY6CJUPPIgVPZqHs2MvVYSNVmLP+z38H41rwwJFGAc25box+bGWRNDyAV6J0
uSGSVGydlz+pMkzH5lVWwxttWRj0e4H6lzscXPFrQan3ch6W8722OLmNwAhR
Yo9fK4FXK/+zCCH71lfLN621nwk0/Kx8MKaGh/nXbmy1f8jFpYmcUrs0Nqoy
337Nd2Oi9tL8Z4f7aWiYt6zRjkF66evchQIf+zHLtTfCRq0To3S+P1ZObcS6
S2dNvVp/48VNbv1Fv+Pwvyb6gxzxdHBbXCEl3F8Bi4lVNsmxzdAv4ODbJtQN
E1V5px55DMD4G/6D8WkUiFhftWnDazr0fz81cmkdC5QOhc/a7uDAk+nfC4p7
uKAnNllSt4qAZP+TKUVlBEgLjLAKSI4cM39RysokoCFxat/FPzwo8q+6tes7
F4Zfdpu5jrGBmNv/dmktEzQ7fq7z0qJDDyYGSZ+kAEWBiH6xZgD0bO44PZHv
AocttrmPfjbBSubd6DvcMlCZ2V0YtyEFrvz4k78o/TvuWHrk2LfKMsx9qSga
97kJdfj1VnmIdWFH3lyo6PIBtJp6s0rfgILphyycr+2m4/19SzdWlzOxXTJu
QuUvG/uUTC4wErnIuLEhUYogPfFTKOZlEFj9xmZDMsmR8VfajpXlBOafrGNz
RQk0eJXzH9HPRYWIR1ahuzhYfVaZ57mehWXOD49Ivqfj8MxMvG02BQ35LopQ
nwxg9o8Kr3zJbuR/WnPOMbMZ7/zH2JHOX4mLr6wVN7iQjkXrVz8/szsOVjDu
7/iY9htO/ygwPfCxEc7l/Td8QLoTXsU83XbvXT/sPbo/02VgCGJFH7es7qSB
3zP3dTbOTDCrFs+ZSGaDeNXGi2POXPA2XH1zXxUP3puXh7t9IrkeWDx7lvRD
haG94dfbCIi4oD5isJ2AxSMa3/1X8eCozQ6jH/fJ3BL2XbPxGgtGbU2fCY7R
QeG9S8luWSo83yuuOz8+AEWfXF2ml/eA9OGl6vTMFhDIPeW6Qbwauq4tm3UP
ywIFP8hfdT8SRX6KvFj+vhjZURbOjyMaUPz9shB5+Q6sCrxmmCDXj3zPJr8e
vj+EaHaLIuNK+oiW16ttckzsMbvE13iVjfyf738fPkjmj9K2MLUvPNyGpyMX
vCD5Xbv6W8kEgY0y94/UDxHofG6LlLMxgTFlqvWCWjy8raeTUJ3GQU5aXDAt
g4Vfq1880DdmYFHIeEzgEyqKRdrrttgNotOb9l2q8z244FKwSkdGK/7Hbz8f
vLkW096rSo835OLxfcoZv/4+g/AD1irrvApB1XZbm/+berjqestHT7kdxJNT
9Vwv9IFI2nrnFMEhmFxkY/dmHQ12njxwa1cdA7orNBNzN7JB+ivf+i5BLlyT
nmuecOOBdWD3MYP7BMxLL/Hi/SHzq8Y+aJRLct7n4RlHBwL0rjQdtb1Kenui
nNIgjwN6W3xXVCxgw+M17Kr6WAb0O6pssGRRgeX6eNvF1kEYOKGUB7xeuC3s
fVI9vQ2SUnR/3f6vHviSr0en+RRAWtOfy/2r7oCGE7BrqvLxpn9CW4N0Hc7+
iXT6uaUNR1VXLHe42YsPHTJ/l7wfRF/tHVruP6mYsrs90f0BAx+fXp+T18FC
NcNv73/VcfC6+8xUxEkerinYaGxpQWCA+fhoG4NA5XbxwvZ/BNZ2fC5UfUzg
PvXa5VEhPPyTXvuBu5mLCcNLzUr02dh5fa15xAwD6zcp7fhkSMMHlOk9r3WG
cP5X21b5LpIj9S2VPd/bcYNtUfO4bAN+EfePP/ihCLOrcoIeer3G+duvyGXI
hrX/TXqdW1EDwkYx2722toKt5e4UDY8eMO0TMn2uOghJetU2vSeosLpj4WXh
DQywGNhg1vmCBeHKJw6/fMUB4Z83F0sr8KDehfNonzYBC5N6krx6CLjiJm3o
Nk3AMnv5d2nvCEj4fUMj+RcPym0WCrItudAg4GTa9IIN/OKSK76cYMK7xUM8
0280sNhzPuXm9yFI4jXwqJf64e3vpLbqrx3wSPZxg/7mRjiq6JTqkVUCFXQz
z0itTzA+2G/YeCYDXy48xGmdrsTiC4tic7e2oN/QDhl2QDdqCS+eWZQ7gKmu
WX/zWBTUPvKygfabjjo6t4vXHmJhqKzN6cumHKTZq0h6jHNxQLC/kSJLYKKM
nhOnjsBMo6LK3jkC9Qr99RckE5hynj7zqpeH6zaH+bS+4uKKZ3lSfxrZOP0Q
BagxTEz4Fet9U5iOnUsTJmkSFFwhZh8l0taPAmH+XZyPnegGyYdPqjShVW53
v159KVLVz8zL5iTi3COxgAapVOCmOLpep5dD0z7fVhe1ZlAo9nWMCusC1qG0
+EPHyP5pHSEp95gCogenTdY40MF8auH1hyNMUKj5tWWXGAdcaWc9iku5wCdv
fduCj4D1kro6EgUEvLo8PD9PckT402trEfL7QWe3GkPy+UP5OeZJ5M+Llw30
riN/v1J00U0z8u9RFMP2Mq/SwXL3ZOiINwU+sL/cX06+vsX5d2dVyfejXOre
yUe+v3LRmlv3aOWgVmmzukMyFdyDV8+uJm2C15Seqt1QiosWN1Aryf/3gzFf
08WYTsxcl3BRjzwPibqfSuskKbgyetbiPXleoW+3dwp9YuJHZyWzVU1s1G7T
/sIjz5c44fD5M3neXrLWGoLk+f+J1W3rI+dhVno0ikrOZ6QlbUcrOa/BF3u4
9uT8XnYd+nuEnOcKntfHkYMstHBW9swl521my5R8Qc6/UYVr0ZAzgOdEusZc
yPuhKvLS/Ah5X5o3nc7tm6rE/O3sR51mGXhW94DOy0OfoN58eq/LrxJIzDu4
soi8f52PghO0EzrAKtd9n9TlfuDbeObpx//fVy/x597k/SV+m/2qIu/zqPtB
5xHyfmsdXSgrcJELhb6Xe5G8/5Rs9xd55D6IHlpzxZ3cjwUdKwYekvuy9KUn
ZQu5P0mHs1uWkvu0s3q8/i65X+eFa0QyyX3T73nTOSjDgFaPbVrfyX1spLw3
NCX3U6Xm+sMS9x6QKlUIFyL3d4CmdMBmeQ2Etna26wdnA7vCRuTS89eYKKXU
ui+6CFeeCo69vbEB54vmb51MaUf2o4vtIWRedKTYppeR+WF6b41fPZkn4gts
WorJfEnb+fcClcybi8usvy1R5GLrkrGsFDKPNtypxV1kPoltP0PrIvPqdxRq
NJH5lel+PdeEzLP11Xzlz8h8+6ooIxFF5p2i8YDZezL/Mq6bEKZkHn7xWF9t
TObjM4VI82AyL9MvZDVN3ejFP5PO74HM028XTIO619dh7rNdnW0V+ajW3S7j
tu0OHI/1tE72LQD+qSBxDpnP0kFZxbFkXvPS5RyTyfz+aldzLITM86inEdsC
/p/vk+6Sk2Tepx7ZNcUi81/j8l3lWZIHXo96Rl1IPrQIfbd0IXnhMJVbMEHy
w3h3bjWL5El6bT4CyZePEcofqSRv9v6nFlhA8sdinYfSe5JHA+kPvVeSfDpv
JPnNnuRVpdhE7COSX3X2X0WESZ5duMW71ajUDkbh9F8iJO+Ch2lJ6z0LQSkk
R5Iz+Az0++ifuE25WJTzHZ8q1uK0a+BF48xWbPd0pb8neWoSMz6z1H4Qlc2+
X80leav8OyT0Nslfi/B8S8FMFtZusItkkHwu0Mlwkf4/r7uDlXxIfnu4Bnu3
kDzfHTQhUETy/VHFB8mxQAL5jXttpEj+87H3r2kj+4DTE3+bH2Q/GN9n6ixI
9gWPNBXqXxcahly88FCU7BOsW0TGXbJfyPQ6Gv2Q60ANykumINk/LsXrJ64O
L0Zvt/PRyjci0VKeuHQ/PAtoYXNqa9dWgwM4yVhmtYD42NCG6yt6oNXwyOsd
EwPAWqmqZU/2n86soRs7yD60oCOg4AjZj2LFNLbVkn3pwaIK049kf5I637X4
HNmnZGn5g3fIfjVAXXLpDNm3fGr3yN4l+9d/bv4HlMk+NsE4kd1D9rMEfcdF
HWRfu1f2tf4A2d+eXL4ZSu+gwX6+tC36ZL/jDl6X0yL7XuLaUO/K9Z0ws22h
VUl0IxT+mp6NS/0NrFFDCVuNOOBnx+/WuZiO13pDqhIXVmJewNFpCtkv51oF
Jbb9141up9z/STwdwEeBJo1vyD46tTF65DDZT0MdP9z/QvbV+BET9VSyv46F
NeUtGuAip65AYJbst7oDOQUNZN+19JMP/kb2X2fXNuOfZB8W6w9zEyb7cVPR
p5R6si+7C9ipLif7s8G1Az9iyT7NmHs7DmS/Xm4RtXUt2bfVfdaI9wgP4Gmx
CS9hso975s7nqpH9/I5MfFN6RRkqXn2xc03Kdxw6M+wWvTEFjpkmCl7jlcGi
Du/FY2Tfl+1/OjpB9n/f64fFS0gfyHQ6cMWY9INn1Tf8k0hfcN8eMLmF9Icf
7xxWvyN9wndznbAx6RefDm06e5P0DeUCN7kR0j+aE/faF5IcCZqaO5ZD+olL
/uvwAtJXXmoyjJJIfzHXJaSOkj6z64ymhRbpNx5Sdvb/Qumg6Ccs/ID0nw9G
FVf0SR+KybDtvUL6kQl9PFOT9KVEs8D7a/oqQJN/+ljxmnSwXyqi87MiDiPv
v3d3bfuNfPv/3vhE+hfNJXO6jfSxn0ceL95L+tkp96sn3pG+lmI+nXuL9Ld9
2dJDFNLnBJoEHZ+SfrfvU1qxJ+l7eW/trNNI/+vlWGm1kz7YbzJAfUX64cRz
v77HpC+WPbbbdZj0R55swApH0id5Y4u0npF+WWzts3P+CgsjDspb8pH+eYOd
ZXeZ9NEb+VILH5B+elttvdHv2W78ss5ctjK2BQeLlI0//q3CuTimkuiJLOxO
oqROhEXB0An53nnSf7/cdHk4T/qwGdX5XS/px1EyfazHpC8valBY4kb6s42n
p2oY6dNtB0e4daRf6wcdm/AifVsraPfzKNK/71ENYqpIHw+6u97Om/TzOicb
dXnS18PX5vOvIP3d6OM9ydekz8swx0NXkn7/1vipZCnp++UaukVDP1hgWbr2
xoWjDMju/8HX6EEFEYv+kctWgxDHxxcnQfRAaE/lUOuXVuggqLSdArXwWLLk
QsLzXMiZMf6Qt9sfN+g3jG/4Uoh3hAv9pOLrcXZy5Kz0vnZULdKZOuXYh6ZR
a8XnVw1htN6J90oyNDx+auW/0WYGjod5hQRuZiNP+pVS0nIu9vFnl2V78FAs
87PMiDOByQfywp3+Epgqeq7xDJfAvdHV23/YE7h/W9XXl7Yk//XcrOdYHFTa
pfqVNs3CiYhRg4UfGaiW1JWWO0TF79E/TwvUDeJn7xamSW8vRqo9X2TwqQ0X
HDR3ahWsx9KlTS0frAowU8Bmt6/gNeQVPrVfsgbhkXrnJslDdSDkf4UZr9UG
/50zWnvVoxeS6bEblT8NQrXIObpKLhVkZB6MnHVngEY9dd/3XhbEp6i/+dbE
gaOn335+bMoDZ+NlIqqWBJw/GxjuyyTgn0Vi6OV/BEheNXr7xouA7UPi+7lB
PDh0z56mKscFmmBHKv9hNhSPnKrkjDHA0PH2XSldGiw9HnHWZP8QXEu7sedC
VR9YlYR+XfOhHbob697cWtUARRmuc4ceFsFP10ubHluGwvbATfIRXdnYIRCt
WaZeg6v8WkVfardigdCzP+ZBPXjQz50loDGI9QXJQrHmVHwTWrpwkQIDTwzv
XMt5xcKh+HvU2Lcc1GgP3q6kxEOyVApvPUTgrJd4o2kvgWutw7K2TBOomPf7
iU4YyfVnodYbM3m4/8zrj0bnufgzFiq3+7FxRYJM12oDJtZv9TFhxdIwU9Lj
uE78EAbm3roldr4f023mV21814FU27qWVrFGXPf0YmpYaAnO0unLd3yLQbqz
nIHhxwyo1Njtd0WmCspm+/Kp2i2gIHT1nnpkN9wNnT709v+fvzby//fhDwV0
tX9dnKmigwrt/NWjeizITrU5GXGWAyEPWMHJU1zYa5onNLeJ5IbU1mX0egIq
DRNbMuYIYPSusc9IIkCsvdNsSzcPHkmcT7F4yQV30fmZ27VsoAQteHknkgla
Ag8eyiymA/17/ttGUQo88W1XMq3rh6siyhHWwZ0wXT79e0yiCagWz0QfJpWC
adKZl01KiRB5wmqjzZVUFD212VNyWQU+HrL9mwPNeNdlJmXx1y5MIqLXMU0G
UC5Q7ai0HwXDJ4ov6t6i4/b85e+qJ5goes12f4gEB4U/7xdcW8nF24cKVd8v
JHByfsfuvYUEPnSUSPr/5/HjdnqV3HwC68ODPJbN83BJhK2pWTEX90flPMxZ
xUGBqxWSC3lM9Jbw2PfzMh1/crNTxx9S8FiJ29srh8jX519YXfi0C7VgSiRf
qhlFOzefKykqx13/HswcbvyBO5EubXUiCSwdb0Ys+1cK60XNa+QONIGr849u
RmoneNs/u8Hf1w+HtZP6lWUpYGgV6coUpcPjbdfVHsYzIfMhWyGwjQ2Hdugs
sn3LhcvPqrKXDvAgzGr87onvBBz/Xia3iOTI4NEfNoxaArwK39hmyxAQODUz
oTnKheUpTuFCJhzwTeyrwf0sSK0VnfyMdAi6fk4zcYgCq+sNIrXSB4Bx8qCO
uls3dJzMdpOUboGvjUcGjrdVQpWV+BfLFRlwWrZQarLpEy5QYXtb9pTg9p0W
z7fvacSKmE0nmNkdeFqm8QLboR9T49boVWeQvUe38jAnjYYbG6Maz5kxcYmq
7K/gV2zcERW+7sMlLqZsiJE7msvD6f4kPpX3BPJpGZpUkvtxYkJg7Zdu0g/z
tPJ3aRHYfWa/0vRGHu5a0Vt/LoiDFX8/Sn16zsLv6Q57GBIMnFV/2UQ9SsUX
7xR2tssNopBJVFnUjR58M5g/OLm+FSczbWX+MatRPYN1lqWfjZZdH9PPJL2B
ZUmxo7tLiqB1POzB+I4GEJUd9JUobIfJVjnlM+w+AKd304IGQ/CUULhleooG
J/46Gt/mJ33uekTeZyM27HriOf1bhQth5435Lr7mwZfKRsMqHwKi9LjXjo8R
kJ9tx9zIIIC6ysHK6xwBtsvOhX8w5sGx2LjsuCoOeMpUv49rZsEy5z8fHtxh
wIOgPtPoZCqU37p9Uzl0EDxPCOtMWvbCH7sr+45JtcH7qm3JwVO14LaTUfve
Kx98f760Dcu9j7lnNWsKvhZgq5OFwJMt9bj4kIaE/+827L/v9v3dXC/aLHd/
w+4ZxNW6N6pU/lBRXaXzRUkSA9uvLNxYtYiNo2Ev/Xv/cnBUbmSF0XUeRt9c
x9x+nUDhgYi2YB6BrnKPha3/kBwRzTj++h6Bfit7FWRdeRhS2bqWu4iLqes7
+MrXs/G/z5k84woGyf3eT00iNBzU+HR3C/8QJoywSrYa9ZG9QiV8cl07nnBa
EuvhU48neRnXV1sUokSW+QZaxBM0Slm7YLdUHhSJJZkPGNRCc1NXiXF5K5yb
UJlOXNkL3h4vyh/cHITSZXjwfiAV1nz7EX7OlAF+z9PHBHNZsKPBvYqTyYHZ
p8HbxQ/ygJFxMOSyCQGNwn9lXlMICP7xqsNygoC19KjU2wEEXK/vqnOL4cGe
/uU1ClokR45e2jxvw4alhpTF9tJM6GWk4YO7NHAbavTsuDEEfXYRhWFS/SDw
9M/WsdUdkGJlfzPArwFKmhqzZe6TfYSpv1fbIAI+h4SoDAxm4ciWoEWhe6sx
A1qsXSpacF5OmvJBugedi0PP/ZofwDMLZTr3KVLxr8GmiD0zdEzfde2G7S0W
mkvWDY66cvCMU69z3moeprcsUb2oQaA3RXryTDvJ96f3Gv8j+5Z/UnTPmhgC
zTUU876X87DiQdvQiXskR264LdFPYOPEjU3M7NtM/HftXdmzJhq2P9LhKXQO
obbqAPd+cD/edj9gqLa8Ew9IyeVYBDUin9AwtfrFb3RR1ruz5FMsLpBTOFUR
lw6PPly3Orq5Elb6itEkKprBfsDZ7olKN+jrVqv+fDEABfIzGY8LKVBpZtxl
95EOaiMDPdSNLEg777d+eh8HlOsWi+hSuPB713jhZjECvKlD0FtBwOpz8R/f
krk1XWt69NFPAnp4AQcyOTzIaeD62cVzQf20aEEklw0vt4tmHCpmwmnaqbEZ
dTpQ9vBUVhymQNNcrLLyogGo/PTA8qVAF4z/u725N6QJfh4ek/z3pQz6N1w9
2yr9HcQ/FlTvv5aCe69rdCqIlmO7ku5lnbImbI29EndLswsH605p3pMaQA9G
opjpWQomarfmsw/T0X37nZzAJtIfhofZC6fZOJl/3ywtlYtb3x17iiM8FL3k
OSn/i8AVty5KNpIc4QaGvP1aSuC6NZOlL1cQKP3TQ9yuk4slnftDptU4KNQW
nzwpysL0G98/1b6go/U/oeKnSRT0S710IsF5ABvktowLTXVhlNYmh7nQZvSR
3RVzJ6cC3xh86N9TnYbcdkWRVefjwfHlusUnp3+Dyi6PRUtLGqHcisa8CZ3Q
WhXpMxffD7ejGEaZxBDc33SlqopGg+6GH1GXvZkwGKo8uDqLDT5nI0uXenBB
/nRxq2I9D36tjT6lHktyo8Z1dxXph2sSHoWEtZA5xkwe26NGwM2MOwsMhXhw
5n3YoMUNDsTZxGh0WrGgcfX44XEmHQIH3pgFrKbCqdYtRgRjAKQCtCsCuN1A
6HNNEl+THEkWH5Spq4JDF5ZYfVqSBXaRTWq9OR/w+gr66+HBYqScmRdxxQbc
VvLq7WvdDtSZ791rodGP92YMG374DKGDnPanFU9p6LNlhbbjViaOlIxkbr3L
xpzQb4uOHeViPNV9u20CDw9zjnzmCyZw36OADY8nCazdF6t6dJBA1p8bwSkG
pJ+UxjBEd/MwYfG7PXmJHKQIDlb2JrEwleLgeEuHgZ0XOj6tcaFigPEZ+T9n
BlGCpZIo0NeDVXE/yhpDW3G28Yd1W38NXj5+wPj8wVz8GPjCFN0DYWmjtbli
RSG47xqkJv6qh7Oa9ntHDNrhwvXxjSqP+mBDVY2y4bohaC+qXJQjT+YJ2+ZB
SicDlsTo61uossE61KLHVYQLAkkVOq7ePJhvTLsa5kLAptlmmam/BLxPEffK
5hBwYGv047+2BOiul3mddZkHQnPtOuvoHAjY1CrGP86Cc91ptTveM+DwBM1b
oocKiZcnRuLKBkHJTT3MurYXpENL6i6FtMEbO++qu8N18HPzyyy//QXw7VON
i94fazi5S+mylgXiT90E5sUrdfjsrLdbuHEbKlJpCVeCenF9nfpcYMIgnpVY
UddWREURt3DtHT4MbDRdHhw1xMJek8j9H9o4eH6Q12l3hof5XcbHxi8SeLn6
QNI2FoGyPJsm9iiBK987Dcx6kLl1zebvnkAe5vTZN17dwEUfenuXFrCxN950
z74/DJTx20h/BTScUHBhL9s5hEtyg36E5PThy8vq/kdftGPq1QUT9Ll6FBzS
aj1kXoQltc0iz/e9Qnndk4fHNuXAD5PQIHXTGkg3pSlEmrSCtfGbugcfeiDu
z9MlHvsGYafkgfFrllRw+18F5xmX0//GcaFJiYzkl4iIIkoR1YUKURnRIg1R
UlqUkVHSFKFQKEVKQ5S0u9pDe++67+49T4okjf/9f3SenQfnOp/r/Xm/Xud8
Lbd//afCBPX537L+vRJw5IPV7sLXXHg9IEzsVOVDglvQ8nUGBEysOem4eZiA
nBh8MjBFwL1maUbLCwJu20bJRH0TeKSQXH+GBQ9epD0WjnzIgVLDtW/vG7JA
07lo2O8dHcwPbTZfkUABNqknXt+MBCv/Tu+5HtILiX7rHS8sbAP3LbliXzwq
YUGrweqaNYmw38D7eiXrO9oZmf35ebAeW8d11kme6sT/ZLk3r2cMIDfrtdzm
ejI+b9Z6dneSikdEG4Wk2xgod4BE3DBmIytdWaTdhotOwUVv+2d4WJj5qWT5
JgI3J25fMtxKoP2DyaOPZgV5ISVMXk4jcPRKqnplLx9PR9XcID3iYUjZgbjR
Og4W2T8Xn33JQr23aq8a5+ioqlj0omgRFVM8P1u9rBH4iOyl3R33+/DNRuOi
GLF2bJ6wcE8Pqcb55z8SAa9S8Q6hr/M7Iwu0SAvvV2+vA53EyCvTJzpgYvWt
PNf8ftg26qT42IoM7ikizSufUkGbPxzi48OA5/vEMtbMsuBM5nwRjjwXutQU
VJwbedC5vulStzABvU/vvLEsF8xD41H5/7+PL7ELTKwpFnhKa8aXmmk+CHHe
cGaQBytG9nWcXcyF0yE2nzOYLGArFVvesxHcfwdDeeoaFQKL3cyK9pKhO3iD
8BnffmA7PP10Y1EH/Hfurv6y+Fqw3S52PTP0KyiY6v35RE5HkZueaR2yNSh9
U2zzHdN2PDtgVOJe0YfhoiHriugkPNjv8GefMhWj/soVaq5moO95GQ9WBgud
LcZyRQc42PvCRqg/lofdTh9OuVD4GPL97MboLwQOv/44sFnAkZxoqxhmI4HF
LNKKN/IEpq2zipn/k4eX18n/bTDmYqDo1/7Q3WwsVKIFheczUPNtZ0L1ABVV
7Z+5p6aTsY8Sf5B+ZQCdnbR4vMWdWCmj1l+Y/QPDxVQWkqtyUNzlwDm7ix9g
2NVpzUGhKrA4kxCWcLQN6vd/JD+p74XoC8mq+V4keMBQdv9dTAHeOjGV0wV0
aMieGGacZUH+9YrSba8EXD4d8WX3JR48OHqCaC7hg853I0b0GwIyGBtTZKYJ
6GlWKKjvJ2BTBm8p6BDgLRspyVHgwzK7HQEQzgWdsG/zIwLZoLV4KIkjw4Rd
8nlf5PRpUNpx/6OV/Aj4yGpk+5wfBIWyGXvG4i7YsrQk7UF1Ayi+8yoMnVcA
g+nCD0yaX6LCkuVPdjHLcaUijX7bsBVXfRuJHWrtwRs/hxhy/4bRGHqyj56i
YGRrZEiPFR0LGKaV/4mx8IJWJtP+FAcbn1zm+6vx8OqoTqvEKz7W3lpuei6I
QFvPqHMlEwS68w9JeDAIzPBa4vfZkkBWG/NvtjEfbQ8Xi2XWcNHTjpbztZmN
MwniFjGuTPzOO6RAJAs4YrxKtPzRCIrbWen9Nh3Cf+VXZ04t6kb5fm9jg+4m
nKqvMrbRLsEYU4XurCO3ISbemtTaWAo2l969XwstcPuvwgO3rm5YfpfpESA1
DPcVF53Tp43A/MMP39X9oYHlvMmFj7OYgD3Caz5JCDgiJf2ieIILB0/xs+Xd
+TCvspDFciPAvHu7tTJBgIpYeW7HKAESNG0zphcBHsuttKx9+XAzxeLoqvk8
SHS7+WlMlgNRv52sH1cwoWlcv01nER12L9TN7Z8agfxcxugJ3WG4Lbymda1Y
D9D2v9LherXAo0WPq0T3lAFjsfWpIfNACMk5Nf++YzFesFW9s8e9CceTpMxM
e7tw2FEvIV9hCCe/8VYyfEZwXt/6c9ujaJjcnPjpwFkm/uJ1XhQrY2NvYmEy
v5CL0bzmm4sM+BhDPeO930zAcY32LadoBAprr1z99w+Bj1V0S9hhBN6wPF/W
F8/HsLOqW67t5eHE95Lso3Yc/Kwg9qRSloXBv6bqpl3paMN2/xXnJPDSnrX3
ipaTMJBPXqS9oBe3zgsKk7zZiotX8ndvPVWBk5mK4WbKr9H2S8xPI5V8sCQ5
RkmdbwAph0zys75OuFy706R1+yB4WGWn6YqOQIHps1JJNRpobHbu1Z3PhMyN
T/8GXmdD/PTtI6vvcaE9f55q90o+VKaN1ttrEUD1nfbT6SVgfdSljAFBTj7r
MxZ9e0fAI8ldperVfHgdeCy9zIMH28JuNH5L4oBit8+4pisLlg+gonIjHUIS
Tyxf2E4B6yMFdp9DSeCjrP7vyXQv3ODdfDF+pw0eV62RHnWpgq/1yn8+Lv0I
mU0Pyk1Gv2FG8/Ue6tEf2Ce2dINJXwfqnHBw79s3gF3WEn9NX5BxYqs3/2ot
FaU7rfpCkhl4OeWz8kZlNj4ZZpcd2M9FssN/Uw8YPPx4x336+CoCDZnftjF/
ENi1585///8/dEmoYvbBbwSeWSl6z5bNx0EYnfv3gYdUrb3LVFkc/NKw9eNA
MQt1Fl1ZkafCwC/tqg8X6FLR74fh8PUZEvb+PLJ42a8+XEJTnAn3b8f2qAM3
NQJqUNy/+G90xGdM1Vpc1539BdrtZ/JImrUQXbB485OedpjfEr6ZfqgfxPkR
vxQ3kkFF/uR6KzsqiHgtXbrlGAN65I45cXpYYFQ75O86x4EzjUJ7V3zngeLb
S5qSE3zYWxqkZ15AwL6wVi2SgCONl5eaRVcRMBu+yfP8YgKsMquuK3TzIMMM
S9O2coFfzadlSbLhYGL7n6QQBoTnBzdFJ1GB8q22VcKDDLvU3BszWP2wPDHb
q/JBB/SbVOc3vawDCU3SwOcH2aDT/YbhzE3BXZLiNZsVqpH7d27Vlc42/O/k
yXzhE31IjdZKLftCwqA7mzLbJyg4LKY7T4lHx6Pbq4+Sgln4ef4aubgiDpox
Xzg9DuDh9U/jTa/b+Hhu8nJfcDKBDSHhv+cEfrjJcHN2ageBoSU7d25TFXD/
4paHyqJ8pIQc2KfmwsUJH6Nl2WfZ+Kr0sC6HwsAp/run2YtpuNKEtvEimYyx
yruIk4MDON2nWhkW2Ilbsn9rvkmrR46lXpI65mJr0KEIO/d3EFjknjUsUgld
7EDt8ZZWcI8SDj9q0SvYH7X7NHRIID/WJUoPp8Bk3JYjDyLoQGbYhIppskBj
zwz0+3LAtDV047gxD0JOPT8ym86HO7syT999RgDdJPDW0F8CvnvpVfiTCah0
1/evMyLgptKVehlNPizprxfNSuaC++xIWncyG+Z9ne/rr8sEJee/oWe8aHD9
jku/38kRGBlIMuQ1DcLDuKSehgddECaZ7OVT3AhXr7lPiv8thDzayKeSyieY
0bnl8HZeGS76oczQrm/B04qeG6vP9aDQ2qDSuUfD+A4+fXupQEGPj8c+HlWl
Y2Vkzd/LJCY23VZuUN7JwaWmS/YcXsHDzkO/jux+yMc7vQzlfbcJXPRJX9pv
nMBCj7TXq7kEjhnKHdt5UbDHpsUXD9kJPNI9vEWNwsUuBebpNWNszP/77rRD
NBNJz7oirnXRcO4vRepo6QjadATVXS0ZQnrv06wb/t1YepW8ak9jM0arPj52
TbYUd25xiJTOOonKYaadXh8Q2pwPbHof0gyDs9Hbwuy64bt2ZLVt/BDMHEeL
0a8joOtQ9cu/jgaPbaqfSYQxIah3W0E4kw2lCXGPH/dzYdP5mrdGZ/nQa1w/
hfYEqA1PbellEyC6x+SO5y8C1L313jncJeDGO/6OwDA+2JfLO374jwfzll1p
vbGXA7eOPPsQzGHCiqiKx+Lagrn/UB6t3EaB0zb+MVVpw2D9U8TT704PxBeV
/LXhtcDIolL1Axrl8A2fe0XIPgPOrcPqpq6FKJX2NzTmRiMmyXq6pTh0oeen
FUYvMwcx8MajtD8HR3DEgLNlx0UaWrejy+hOJla7qyuLx7ExoixVuzGei/cX
Ruzbo8bHYdvVL6QOEWj6yO/CxDCB97/FtoZMEbjgycaCs9EEtiu9P7ogi4+V
JwdyFp3mofRomSjnPgct1UNPc4CFijHSsZKxdMxRZ9bQYih4XCr9jscxEi4/
PXui2rcXG/VG7vDHWpEW45BXZVyJUcWqn63CErA9b6xqr3ouSG39tsPvUj1k
hOTXql/ohKRs1+25xQNgJn40IKeNDOdPVVucm6OC3JhJ7voeBjTJPjf/eJIN
qnxLd1EHLjQzbXVFhPgQxrzJV1YmYCp5p39HGwE77DO22s4S8DDeZEoulYC2
0eBIy24+mH9SGrIP5cEWHJnnVsWB58j0DH7Ggu27TvTe/EuHCPquPx8WUuES
P3R7D5KA/iv6s4FHH2y0Fdmy708bPJpSm+p3rIZI1VnlHaKp0FhDaQ+cyMLt
3zb6epyqQ1r+2/37HDrwa3haQEtdP9aruVTttCfj/sdRaZKvqNin0tzwwY+B
ZakPk50XsHFj7q6wA4pclBgvon5v4eGFMCuFpWIEvshY5HGtgsAtokb6/z+v
RuaEIzuuiMAnP4Xt/af4GN7zXu59kaD/Lihm/hXlYmqh2lZzCgtfFrQ9O2zB
wF8RUpNTblS01l+VtlSDjDORpiL0S/146synxJ1T7fi3IEvt/O1aXOBIBMge
+Iq9VOtbP70yoONv18BrnRoQfXL3Z7ttO3CLr/n8au8DMS3x69f4JGi+e9jt
mBoViB2/5O8rMGB+Z27cmWwWuLqRxe6TODDw8EiMSRwPmr5WXKmjCfovy9uw
+ysBeXGk2f+fH7TfzEKH3kAA97+SA7fXEGBpGNlUz+NB/2CkVMQRLkiX29ef
VGdD1xuFrR7ZDNjuz7IhdVJh3UubjuVJZDj++fDEq7MDoOrplIr/OqA3iEjf
FPkD1m9dmGB/JwdWOM39rpr4gHH/QoU2KlVh49uUpUvOteFxsTKbXQO96LHF
JvnhLRLebZo3918VBcViju0rKKVjdgKH5GXPwjqJuoiaNxxsW/KU2XhZ4HuV
2nqny/jox94Ns28JDDv16rL1tMDT+R4/iD4CTyh+H9bfS+D73l8BPf/xUS9D
n7Y+mIta865WXrvHxv2Zrut4kkzcV7Sry0SHhqefGCb0rhhBl303wdh0EHdf
Nljd/q8Tef2LaUveN+AXnWMLNuflo2f2kov7x15BikZo4vbFFeD9YtHorHkr
BOR8/Jww0gO3xjaEuAmToHF5xECoFQUcPOvbrOzocD7xqUa1JAs+P68d+s+C
A8GjTQ/3afBgfViw8rdYPliu9a5gBxPw8oNBnsofApLTr7wsoBPw1TpgSa85
Ab5BbHqVER+SVLIWfKvgQlTS86T8H2zQOSuzIu8SE1bODCrrJNCggLlZwfLh
CEQVsKv5ekPQMzQ2YjXVBc3hk66/sptAUeOj1X8/i4Fb4CdT33EPP3xa8Ir8
sxS/84mxnBMt6BS5dp4poxvntSh8cV47jHItA7Ex3BG8lWeZeXGWhr+b7PzO
5DEx7G8vNXAJB/d8TzCKneJiZHMUhePJR/Fn1+3i3Akc/3bpSBFB4F7twCbD
UQL7ea6NezwJvCfb2Rx5jY+bF8xTglkuJk5VrFuznIN5XxZU/yhmIn1Bx54P
C+k4NHjOK2R8BGGE8cJ92zCuEJJbdfBPN6pdFb5nYd+Cdh/PFEzJlGH3yurh
DukAjNUv/1CVXgzrms9si3jWBGZB1WLH2F3wr+ViT6XaEHTG3GaY3R2BjGbj
PGosDa6t5ZZusmfC3QeFaQur2eCX92MnHwUcMdp1fPYQH2xIyQ1yZwgoTFV6
t1gwhxSbkIpIwVz0VGJ17UMJeG/1RlvrrYDrHVRl1OIBc9V8iaizHMg8rimt
IMOCf5yghfcu0aGJX9flYEeBKNPVo0OLSTChFTNyc6wH7oWb6UQ4tcK9BQFK
GtsrICDLOdVROBYytqlkfvHOx2MSiT1B/g1oIJX4NpXTic6iLdbzYBAxTjik
VGoEvTiTo4OaNCwlaW7aL8bE3ooo+4RbbJRaQbPb94CLpt8JT/5qPr475kq3
30NgDBhelRfk4s9GylisICc5MlvTT8QT+PX2yKHsCj5KJE/I7HDjobFWqYVC
Agd71q8c/XyJhUFRlz5WVQvmMef2briegjpbY+5Q/UmYWlAXSXB6sSLNdTzE
tQ2vBjjeW3q4CkVEvmQb3E/Crefp91v25EDSuqYdd6/+gG9Xer7c5XRA6l1f
NVXjARh3fG3FeEuGubDNNyybqXCMvH80OYMB6etizO22sSFNZs3aIAMuNB5t
vYFsHhiLzGRfX01A+NXVYUS9IBfrPwr9/7xGylKLCOFsAoxrdx8QZvJBqfrn
kscJPFj9bO+GPCoHUgcm/K/lsWC9tO0ZTyUGvKji7PujSYXDuyN3lf4mQbtU
yaOnlD7Iz7kBezza4bC320/38zWgonBY0Ww6A64U/L7iOf0FZb03vH9lVYsf
KB4nelntmD//o7eVRT9+YpmdaFEh4855b4LPOlHRzjre3/EkA2UmkqcPDbHQ
eqKno22BYB72W3Ov5fOwJv3wBctJgbcf8h1/UCjwwq4nxf8/P/Pf0NM7dysJ
dH12LGaLBIEBf2audLbz0KGvOcVqExdXGlyf7yLGRsdlZhdvBzBQ/toytcQ4
Kn6aeMW+7ExG7933HEx7+1HXSLI9xKsDg3vWlCpfq8Og9hhDxX3ZSHhnFuCd
T2DDCi75d7Aavk8tTmqgt8HAmQTnGLs+eL8uw+dBnuB5SEd682coIF02Z+03
TodZSzbdOoIFvvvuLN9UxoFTty0+Lg3iAWWsymhxJx96KIlt/SkE7DqwRF5d
wHWxZ7EHCtoJELkkx5DfSgBt+c838xfywXmTxZG5i1xw20RtCjVnA/VU1OHB
QQacS3Fc3StMg/uLhsN6e8mw7N3h0uWNA9A96XvT2bsTEtU/mqwMqQenSOc5
9MmF3WNHMlvmJaDesZ4djVsr0bj93ajLSCvKDnp7zTj1otPwFFfMgISuBWqp
ss8p2OWZKzfxnI6W/lfrEvayUNtCJDLQj4PZz/xpMSd4WBVsRn2eKdhHj/be
mHxOYGOQAewW9KyB7hfVuSQCY71Ws4cPE+jy77HuMnU+Sl3xfvjhPRdVJL5e
bEpko+qgVXjkbibe9X/7LeoKDW0lvq4UPTqC82MKfdtLBtGySkS2yqsLXTUS
/pOJbcTxyZ22378U4uzKpO82wk9B8cr+SvWl5VBRviWieqAFrHuzVr506wHx
OymtrW+GgbteJpu8iQLah4759ajT4fNI6Y31dCa4sovlxzU5oFx2Tnvpah4Y
aAh1/wwW+MiftTb9fgT4lM9e+TdOgMopJUUfDgHPt9mGul0gYKipWkroPB+u
ulBFDYe5Aq7UXFLnsUHPcNfQ4ydMOELW6GxspsG2fOmP7LwRSDyjcO/m5yEw
rDTNfOTRDYFbPrT9/dQMb1OubshnIlDk7+xoeT1X8vK9Yv4HLqKQS3UXJa0Z
L+gf/Ofr2Y1XJmadLTKHMD3v+/aT+SM4vGbCYmsLDaOmAljDT5jo4Ef+7sNj
o8tBavjtYS72q9G4yuf5uA4tFYMuCPbW7+8y9zgEOv539dkvgZd82FLXXukn
mMcj3p/6YEFPXtX5ekCWh6dh7PkXTQ4+yru3uI3GxM0/+l3uqNPRJ+eAs98m
Cg6eCRv7/XoYFfs8zmW49uDCW9fftvW3oE0pfaXeknK8cnGdTeTvSBzVUmG9
/1YIZznjinOvG6HLbiXtq3cXvKzJO5eNg2D47mfn1aMj8OTMtsSxKzTYNDCn
RtnNBCg54rv8PRvKOmW4A++58KiSuUpHnQ+Of6cipw4TkCgX0lxOImDT9R13
1acIcF2nMI/6XOCHzN8iHpl8ILtsVnc6wYOcu9qt+n4cOEppFzq9lwWFrcL+
b57TQc7X/MO3ZxR4uuyRxBt9EqR5nrNe4dQLL5NvbbxBboVdD49U9ipXQgb9
fA978h3kutZqZd7KxZW82xoLw+qxTHn8u/m1TqRlxUZONA6guIXLzYN9ZOSc
33BljwgNze+X3Ns5xMAJG/G3reZsJB7ERWhf4qKJ4nOP7Qv52DZ/QezerQQ+
st5oX9NO4NnwxmtqswT+VNFwq0shsNU7yYPdwceXr4tJpIc8rLwASoxSDmon
etZJRbBwKu4cbByno3tSYX74DAULVRd9WpVHwgOrpRdk2/bh+qSnkv20Ntw6
+ytH/EA1Ltoqf6T/+iccvXiBsgyygXI6yUHWpw7MH2/xuOHdAWMUXSn1vn4Y
/C4u1OFMhk/7jgzNj6fCq5GlKq0BDPBylw3JFmNDelNibfQmLiSHtGou6OCB
gq+m+REJApZfqsmKqBT4yNUT2wX7V8DduQTvQgIOLayJ3DPJhy8VpSOG+Tzo
S4jJj17Ahd03Pz+eHmSB2JX9bMmTDJiXU7Zu6hIVPgytir+oQoZZorvlmnk/
LD+XPMtktsPAgeT1KRa10JywSPX+5Bc4aO3/RmvhZzRdXbTN3q4Gr9SeUtni
2Y5PQgYW+FL70OmE6xWVCRKaq9QesNKi4uTPj4m1Sgx86cXKxzwWzjt+bvUE
lYNPc4oaihN46HRuUngTk49h40rdK7MJtFXwDr8o4MhKezQh1xNoYmPNtlgt
4PsQ9dUzNg9Jtcr9Rw24OFlt83bVNjaK++2nnMpg4K7KjVcmm6h4/fDRhjtv
yUiuD7U1OjaASTlfcp6wO3D35CWrJ64/UIbt50/alYOb/XWGtoQkwYMeV/WF
RlXQni4uf9utDbo71lR0cXshQ/VU44kAwfvpIjZxsIEC989LX19bQ4ef0xKd
/y6xQLy2TcE2QeB3H86W2rvx4MqDrUu7Kvhw3sFa3DFe4Oc176LjpgkoXSVx
ZGkfAToryjYf2kMAb2NqaMVqPlCk3aaEHnAh7PNuB+tbbLj69NknrigTzmQ8
M7inSQNv0pJNllIjwJ+Pbgp6g7BT9Jd4MbsTWnbuaIq51wARtia7y93zgR4O
+jtXxOLUprWqm3dU4BWtxGf3nVtxT0g7Ooz34K65xSeNJUnYvkbxeo0dBQ2P
nTDtvUTHVVJlb9xkWEjJDorvPCvYNwkXysa0ePhMYVLk7Fs+Nj9sSvcJJZCx
6PfdF38IvPWWGjmfTiCRzZQTOkPg7aLX9p2H+MhO7En7joJ8ZepewSo2HtYO
6euwY6KPgZp3cCwNtz/XyePeGUGxskVDtO1D2Jhzgnee1YVt0jHLEiOb0DLQ
9l9PSjHWvG0577EjAL5WHf5JrCiDdSbDo8ccWuChePtj1cluEPrYe8V4+zCM
nD97ij8+Agd4tn/mFtJhYMXbX3IlTAg6sebe+eUciM3+nXRtlgu9Melvc6/x
4eQrRZMTngQwg/YkmowS0H2w88Q3QuCHol7FQe4E1BaGj1d68uGIlUKK4xQX
XKn/OR9YwoHTIvPVhfOYwM1d2SM+S4PYfbFJGtwReN+hkRcuPwz//ga6XaB3
Q1NowdWy4y2Qrf3HhEuUgtm0HvE8+h7sJT0hi/0uxkNNJheHc5pwzY4PVMN/
XRh10zy+EYZwxYc4bXw4gmkKOWdiEmhYkC1DEndiYr76bM3sDzb2OFpd5lRw
sS/BP4tvxEdbq6VxY+YEPrDvC6gUzOHXo7EeJcFcdmV27ugMFnj7zYY9T2L5
mPvzQYOoBg9LqBFb+805WBJHCvOVZKGaxJD7nC0dG8N9lJWsKGhwdfuKecIk
vJHumZNH7sES5t6gReatmHbCJ2ivRAW+F3qd6T3yCr9S3M6vKMqHi5qXm6c/
NEB6y7Go0ulOaNZOXbTt+CDcPTDKP7ByBPQnqlzSdWjQryUdsF+KCaYXF38s
vMeGRs43lbPBXLh6/4rRAnk+lFqcvG27lwBlaUbDP0EurEOJRHNBTva2Pixh
vyVg4yankzvL+EBKU1zz5jIPfHWyPga/4YDPa+9hJXtB7t4sNbMvpUPIYbXn
+ZUUCCKtNVx9iwQXhc9JmfT3gtwdx/b/zrbB5alMrZ0bquCHyutsEv8DBDl7
hZz0z8Fp9+hLK579QNGNYo8/T3eg2J+LH2+fG8DaMyMmd5PI6GEeZra/i4p+
9If/VWUzcPEaTadYdTYmFZbvrD3CxSeZI48meTy0d/FmvlpD4BX16dO/Gghc
Z6h08pBgb8WKSvZUfSVQO/V4YAqNj8LHtQvl43g4ftN9/ACJg7d20I0kslmo
VfL1u7ICAx81Fp1gbadizlclFXE+CZfs3kaWau/D2996iZHz7djuYhOUurcG
WyvKhiSvZKA4Kz5T3PAr3BKujDa9Uwsv1koOrf/XDnEydmE/nPpBer6okZ8G
GRa/+3f43FUqXJKbWxJnwQDS39W331FYcOl+IFVLjAt7C1MbW4t4sM66RDph
ig/UF9qymUUEZF6K+fxLwBEL762rLlYQcL8mGsZECch66vo3pIUH+jU1R4UV
uaDz4tNChQVsiDuQwTX1Y8Bi2l5a+ksqzGl5vq6xI0N3Y2Yut7YfOBFRj47Z
d4ACSzbv/ok6iD6Xsi5qLAv0jN7fXb4kFQ8f+sJqvFSNXs16aaqTbchPujex
1bMPcxbas/RLSfjz6rNYUWEq3lLZ2t/6l47LRTK82p+x8O2j8Za0Kg5ec38R
8CyUh/IoevhWNx//c1TT2ZYq6FssoUx7AdeLptm6NW0EfvR9LrtYmcC4IYkj
ffP4qCWxQ6LRnotNqoMu50+yMWrGyrGxm4EhVe786Vkqasnm3jNuIyOp5Idu
Z9EA3hnd4W3g0IlPikVUHzvWY906u2vHtudiXfxXT3iWAGsatKXyTSthcJCl
SR5vhYfHHxp/vtELZthmMniMBJ53y3ONYingbeAo5xRLB9ddDXN79rNAtuRz
soq/YG9ZGB3RO82Do8vDhDdn8YHhVCflEU2A+XTV1QhBzxIvQi3OsKBvBck2
jBsSIOplDFJqfGgIpGRFxXPh/Mlvk+Vv2RCtz0l9u5MJr46f3NjmSINr2tXd
Tw6OACwpOJj7eRCuG2oGF9p3gbaEn0OGTyNM+5wLtXMuBJ0Ruzxr5Wd4ubao
XlOzHM/p3Oo6yW/B0PjWJZfu9uAax1VnEtKHUSLvmtLW7RSUWnMw2FGbjiap
fb+6OEz0GE7SKdzLwQvPJ0g9//EQFubxPoXxMfjxbpGbdwU+MvdP/cYvAs+E
Pl3ewiaw+sJzvWR7AU9+RL5df5aPO0Z3sS36uTgy1HvsMJONSnvoV/JDmbjX
LcRKqY6GC1euKgj9OoI5MwYF/nFD2KJnVRNn241Ctu9n84Ka8SSPsyb4HeLd
l5mixOdT0H7CeaGLXCnIn7SbXN/cDPdXbqFeCOiGVTxmpDEOQY3PvYAvpSOw
JHblZEsXDeSyLQyyowU+8qg8yHaMDdtF5HddonDBYWxxrbA9H8wftJcaXSSg
McXxsiKXALOs1mXXBV6ipLLbb+NtgS+6xhxe+pAPDxYP3ly2ggeTp1o30Hdw
IEMsylOOxASXyLHbhAodrgZYn1ZXoMCimJ/FGx4Nw+7sH6YDZ3sg1PUJ1fBH
C/AyXj/U5pSBPPdP64akJ+CarXThz3Qh6qxNtnDARownX3+UH9iFi8LUxRub
B3FQTD6IenIEvwX62mZ70RC8vOd16DJRP/5xvHwKG6/Q9puyk7nYXNH3QFeT
j9V+C4SpRgQ2619IeUQmsLgjOLr3L4E7B9fmX35GoBiz7EhfOh9Z8YdOlBrz
UCzyjEOsr6D/TngmFexiIfnQ+ugtEXQMqRfh+odT8HuX3OHqfSS0u+Fh7mDe
i6rNZlbzWlpxXsFxNe7CSnyWGPv+ltM7rJWXK19fkQv3uuqnQzPqYZtjMOvG
w06YWbMpXmNoAPbctJtrJJNh53+l9cskaeBmlWANVAbs2tZTPnWWDWJpiXaX
Xbjgz1m++7QoH+o05cqMVAU+uGb8c24HAb4D57bMzBDwqM7t5PVkwVVTs/1m
Gx8Chrvv2wQI9pxWziLbIo7gfvHSUcEsGOvt/tHApUOSMmXIY4ICr2621Z35
QgINJRUtheN90HbwzJWbHW2wvjg8SVO+Gmael1oGUlPgz3W6Y3xwNgZ5JUFJ
TB16JDVPZgd2oPelIaun7H4sS03puOZBRqWWp5cmkqj4w0X5/b8QBjbJmplO
S7JR1nO8lLGVi9eKZdeadPOQsnLXojuLCTy0INbxQxWBLza+fzAs4IjhJrc6
wwICCw6t28/7zUclXW0Deg4Ph8JVD6vNcdDN4cjAux4WFvwMsm07ysAFvk/f
/7Gl4tguqR15G8gokiRzSehQP6oMjZbEdbf//zuA/0Y1avGg9F4feuYXdPr+
++TN6M9Qs1n39cbAGphfsLbdL6AdvDpVLv751Qe2zUsXkGdIMDbf7NpFXSpw
TL8eWaLKgNj9e8o2lwieX6EI6zKLAwWLvV+rJPHA+unS9ffZfNAVtuw1+0ZA
Q8HZgPsCjlDbPjb2/iBgBZm8RH0VAW1RMZPmDB7s+qljK7KfC03blp7q38wG
tnp1lkYyAzp3rfwhVUuF7Rd/W9CiyRD0MPfen70DYPP2uvT53g4IsbtO+X3k
B9RHeqTZcL/BmP5e8UerP6Ky8ta0EdcqPAPn0mh321A247y070wvxhjQ3sqF
kXAFJ83MqZ2CHw61dd9vpKPEyZHCAFcWuuf5+/xK4uAT2fe7xz14qJHJdzpT
zUez3VGGNe8IrKrco0qaJlDPcEZ9Ry+BG7N2sw21CFTIIdanr+RjQ6dQ+fBd
Lh5ac3tA9zobw5rqD7CFmKiXdX7683Ya+s3c0uwUGcEZ5ikY3TaIclw3zaTe
Ttx1Tthl/bkGdBQ9ZXN2cz5mTS8XWbfnNexdyVFee7oCvOZB47xbrZCbJ9W4
fmEvbCGJNm1ZQYKKWKE7C5wpQJ4XM2XuRocX+53nlq1mQeN48NZHdhyobuh7
l7yXB+V9Fq5z8Xw48V1EYl44AZaib7/M/iHAKK504jCNgJK3znGbzAiY0NV2
GdHnw+JtD4RyC7lQ4nJUtKKUDWf/kZMJayZ0X62abXlOg4I8fts9nxFoFxF7
2Ld2CAKdGfIOPV3wuEVtv4lbE4guqt393K4Y7N+XF970CcQBG13WtHYZru2f
/4bk3YJ+T0jbxMV70MmtMXGb3jCu2034H/g3gu3nlt14tYiOanc03YYqmLj7
+UWW5moOSlkXpRrP5+EY6R/5vi8feXXxmXNeBD598sppYJTAcFqp3jqCQCF9
1w1tbgTubv2eMHGVjxNWwh3BE1wc9WXeuyjBwcATfXG6WUy0j4364vaHhv3f
H50cpI6g88bl5kmSw/ilJq8zoLMbC/dtkNyq14Jj5849GKgvxWfLOp7eFr+N
uQdpWUa6JaD5V1tRrbcJ8gKP0PQWd8NUY+Wv9uND8MK5ePGWiBEg1rVoGKfQ
4GpbvAjHlQk/pXcXTDQLvH3rClN6jcArdt5+P2DMh3UarowaS4F33BlpvckQ
XC/bWOVNELA5Z8mrQ0EECD9VQtpLPuyLMF9uqsaDzRUVK9ad4oDb37tzjaIs
CMgMWnzXig65fovYtJMUODsqNARTw9BeWfXwd0sPLFzz8XKIQStsasuy2U8v
B81e7az7+BJkukL++i4swEG5wesetQ2obX2sskOyC48xPc9b2A7imGTPcJn8
CNplum67qU9DypLbXL3lTHR4+Li6PZCNKXtepNwI5+J6u11ZK9bxseSjT5i1
DoFG482vuvsJpBg+LV4iyEnaxVX6AW8ITGb8Hk4v4aNU5Opy4Us81IvKKOC9
5GBDgVB57FkWOioYbvmXT0cDY2Xe02IKOkVzc429SHh04YHrKT96Uedj3e5M
ozZsl6DuOT5XiVrZKfNv23zAI8nG7S11OeBWw/FJzfkBavU6+QOSnTDqNdBW
6zoAY/sOdspkkOFD6eL7mwapsMM39TwpnwHmASut23azwexH6LSoCRcqOJJa
aj95EOjzMSZfnoBVG448nmgkYLn4jMQmwd4y1j3//MEXAnZE3ztiROGD64Tk
/LRYHmzdqfmgrp8Dy8qcZ99msMBSmKY9JMsAw/qdlb2bqfCiPKniBJ0EP9o5
EmHlfXDSNH3JI5N20Nv2ey9lZQ28v8zaW92bDlGvtz1+F/EV5ZKnI+Yn1CKI
+DU5L+7AuYWXXLRv9KPuc7GhTfvIeHzbsP3Z61TM/5tZ2GnDwE3B6iN/mCx8
EBv05dViLsqY6N5RLeUhx+W1LmOajzlBOendxQTm+fPE/wk40kz+qWBUTuCO
OXXHPGEC27PPrN3byMOshHnJn+W5GLXjL7d1hoVFvfaP1/kwsIgf+TMnkoqr
TxHUDVZkVP1q1hSS148ruBnvFp/owJLWuA9dqnU4osT0XpiahZNrCjc7vUuF
By5vDePCqiF22/Yt4eLtYPIh2r7Avw/SJ74KLaglAak5doPCYirQTbTvK81j
gOXytzyjVywY8lx3XO0HB/6dWjQtHcGD0y1B1bRePvzd/WulXxoBx1Nt0x7P
EuC5STWltVWQD6yp+qMk6MGSeUGZMzxYNKXo/8pG4Pvu8fQdxmywX7MyqrCV
AVfXn1iqMEmFry/FF5b8IMMdf8nLz9MHoFSjIGvtyU64tGyifcGBerA0nRPv
pH2H1r1ltekbEvG4V8bh916VODM+IWou3Ia3a0irbEJ7USj9s80XMxKOBk+p
3Uyg4D9K6qGud3SsvbhAtcmQhT+0XgS1POTgp+ZoY5IFDw8VCKXnfuPjBk9d
WdoLAk/mCYmTpwScT6qT+W+YwFtXnDcLGxD4j0puEVXlC3jvERnwmou1G89c
zHnFxsWMnV0pKkwkXr/rlTxPQzdXA4VV+0ZwqQM/+VXcID5ye7r5y4kunAqR
OWxo1ohNudV+YusKcdG79wfNjz2HnAPfrXdblUOeW2ZZ/1wL1JM9pTSe9MDH
kXCjq0XDMOO0e5GnJgX6ylOq+UAH0744t7CfTBi4eUfZHziw+vXj7XHreJB1
j/TINoIP33dJb1x+n4AB450Xx34RMH5vxmszm4DE2H6XIVtBbizf54ElH5J3
NPk6d3MhYDBwoTWFDRnX1GbJD5hAptqsuV1Og7cfnhzbnDoCj2cO+AU/HoID
55ZMfzbtBp1FeXHXLzTDpsWXg05ZIhi9V/z43d0BuzgHbO/rlSLVSivEZqwZ
8TGXbvK8GysVF+pC8xBuX+V/Sqp2BMXOvO24PkjDjdINiYGvmZgYeGXLoT9s
fEH8CTJlcPGc9wI10gU+pq1d1SXhJOhXNRNbK7gEHj8UMDs2RqD46tQY/5sE
bsncuu50AB93zTyYNVzKww6bK/6rVTko4WXYYdfHRAmPJ+W2SnQUxCuHvoqC
csdnp039hvHrXg8j8WM9OH3LtyU3rwV3vqvx16gpQ9WQ42c32kZgn4Vt7BHD
Iqi/v1upYqQR+r3VHDC6C4rma5lQhweh1uNaoaXVCERs17P3ukkD3+L4/nJ9
JkyOvn63MYMNsxuHbH+ncaG+f+M9nT18GLBbNPbjGAH8/Bme2QgBNUIpq+7+
JSDE7CCNG0nA+Vc60gdT+dB17aH0KiMe+IT5FPK9OIKe1Q0KaizYYcbs+hZE
hxyxx/EmgRT4dX5Kg9AgwZb854cyDHshmtMlH1zSCi+VbaenSRXQWKO3e1l6
PCz7KunwbFEenrSsCpVsrUc6X8Y25kUnblNCy6v8Aex0iZSxZJHxUIfUTY4M
DTOMbx4+xmagSnNUzXp7NhY1SzFfXOXi9u0fIn0l+JjNjbpgvp1Avn+YS1In
gSGOtkdqZwg88lM2ee1HAtemXs4TaeFjm1xxSfddHtpzEr515HIw9/PI4VUB
LPwuaujnTaejw1k9p9MEBYd17z99lkJCLaquUaheHy78kKe/sqINV8j21tv+
rcLrbUmXVMxScHVl5KmtLdnQwtBf5FBcB5Cs0suL7gDvh3sd+VP9wDP5BMtv
kCEugqzPTKeChMHzXRufMMDXvvbvQRk2vDjS6LVbjQtSkaZvo/p44NCwWS9T
igC1+W4P86oJeLvmoH6rgCPRr6vtVuQTULDlgHv8OB+OiJpBYBYPvpW0PK2e
4sBvfVcZ/XYWyO3YPB5lwACLGin/cUsqBIrFnBf/jwz8wTM14Zr90H2BQz1V
3Q5lpdaKWtK1oPbLwumY0xe4pTH9OH9TJsa/8VGkJ9egxGo/RtPzdvzqIhlz
XbgfZw5b74sWJmOwkflCDwMqfr7/dMlpdQZe8N71LaKChamJgb79PA6+eL9R
+GUKD4U+DxV1c/m49MHoscc5BF7Wf0V5JeDIjZ+KRc11BF5Z5p8lvoLApgM/
ebJUHtZFK73GfVzs12ay3iiyMc5SLWZZAgPPVhrf3lBGxZx5077HHpPxlpmi
5futA9icvbpoa20HvqZOmVgr/cD/wgo29r7/hmtt917hpn6ELPUBZ4ysgoU7
9xSaRrbBioqdBiuk+mC543VZylMS9MdbrArro0C1seQFcjsd+GZzUaJeLFi+
wvdpcCoHUhLlTQOu8cD0/amDbbV8iMutHd+cSMC2WettCgI/3J50Lty4h4BL
Vvqb9XcRYOIrbPxMhg9OPhY6hbe4kDeZoKHgwYYHqVEs2j8GyH9Rmh3YTINJ
bcWWE3NkuPzqQU6J/CDERsi8Da/thOUdlws/7mmA8zbqt8eG8mD4z5IXi8++
wTemYi9kblSgtPSNuHvhrbhhZqZjaHkvXv7pOSssT0L7yehxXXcKHrVS6G7z
pqPHzWVnv69lIX3Q5d7+ixwcbWBssNYT7B9ZD8uERD6ms/71BT0i0EJ1l4nj
JIGFZVJ1YVQC664oxxqdJPCOyDwh3n6Bt99cKJyTy8XKn+tuVRay0TM09o7Y
GSaaHlNpkI2goRSt232p+wg2nFQpbpAaQqbuSp8LNV3o6/hy8rdRE240+L78
mGwxltdEevoXBUHb5JSf2PkyeCJJjHk/bIF519n9lNU9EF+TZbbYdBhqSfO2
PJ9PgRvvGTvUltHBviuLFl/HBMsPpzcsWsuB0G0fLRRFePBE1OjL4Vt8uGH6
Izj9GgHvD91+5fyTgD2rzF6F8gmwpdydk3Ml4MX5yD4lVz58oQp9Shnjgrla
uHOwMAeyli2UvJbOBH/rrvLmURp8EmvweTg4AiKvWz2LZoYEvWrZyXeV3bDj
cNrZp6ot0Fpx1aY+uRRE1M2E7e/4gMNp7rKQhyX4QmG/vd90E06FnxbXku9G
EY+L3d22Q7j5tZ7d06gRfGoqc2rmMw2N6St3/fBiorrdnD+3g43VRWnDQ/Vc
1HCkrq89zsfbD5+lxFoTaGmtFqHKJNCpodXgyASBfu7O3jmBBDLThhq0o/n4
35dP856p8PBekHCDgwkHt/g8vKo4n4U59qL9U6foqPN27X9JRyn49LHTtB97
GO0URk/vKO3BSwfnGAs0WtHcT+GzQXk5xsVV1YW/eYE3NN7f6jEugNL36+rI
nAaIug+qjLVdcKeh5+Q990F4xl9vvV9pBLxu2e0xOEoD11tTjvvkmJDR8LWc
FcoGSYpG9/MnXHjXLJGutIEPDvrZMmZ6Ao5s5rd+GSAgZnnTwep/BBwk/mmv
ek2AdVP5mFIRHxL9lcTdHHhgfGFp1MnnHBBer/FK0pwF5zwfbnmeTYdeId5n
5+8UiHn8vuuuCwnUhlqqhQp6ISpsoeL+PW1w/Bs95Ep/JdzWfJku0/AeaH9i
zpou+44yNj/P6/b+wCh5mZ3iCp1o0x+aLXNnAO/pryWSv5GxTGHdjASViuEm
O77/RQYquLVuF9NlY4297F3Dk1yc/0j62oVfPDRScanpViBwxJGpOdFEIE9s
h9oCwd6aV+iIepkEkqMnIxgkPpaJ51I1X/JQZAuzzbSbg6ey+PFqKSxcOH1r
+OkyBu4oHXhRu46Kwku+zL4YIuGK28cXLcjqwyhpi3caOu2o8Fx2mdx4NTrr
3DrodyQd/9SUCWl1fYU5KU7It8paaDG3XPdZvgPGRByXfQzpB+aKAqmWg2T4
NJXTYelHhclLOwMXOTJAYuuDnSZ8FrxODtwzKc2FBwVvqgIreJDYk8naOscH
5/XtX2ZKCNj9Ibx5VsARe7m5l1vLCDh84KSo3wIC4qtm+ph1PJBe11F8ZjUX
qr+2FgZMsv7/v8PRUXcGTEZ/OF0cSgWNA19r7p4kQ0pTcbJiSj8UCZVIN+h1
QK3Uk5Ct4nVQ+kHT0Ns+C7wGtFNzd6aheLlLs+vnarRge8sz5dpRjvQo5fCz
PlxWM1dS2kzCxRErpTRlqHjrdKqRrwgDj0UYWZS8ZaFl9MfHX5o4eJ/mtiwi
koc6/y2tNR0Q9F+zLofadAJlyRuX5c8SeJvmeb+3hcD6fSN80gYCH6zdaxUw
xUNJTlCGvRUXDYReHBQ6zMae7Ye6k+sZKFnwPAB+UnFLg5fs9goyXlhup3/8
zQBusfTR/gOdaCdvdsRXvh5lAtdVn3v7HcfD81JkcxLhzzPjvvAXlbBG3vZi
3co2OHFsW7t4bC/I93LXBJwlgesB/WXJKRSw0BeJ10+mw/4P70zsj7Fgb/45
Ve8wDvj3rxm7d5YHKu4Puw1z+TA/6EaUxSsC/vwdlVQX5GPAtMrm6JAgJyt3
TsscFPStkYixWWU+GNxxW3v1JReShKbTkp6zoXUsRTJLiQn5Zqs6D1vQwH9D
Ne+NxggE0pJSfB8Pwtevt6cSoQv43fqNfWqNcDvrCHzuLoCde7m6J65G4Tsj
g6u775TjvNTzJo5LW/G35p6ls/E9KKaLGXsahrEtt/LCdx0Kps2b1PY9RMd/
j1+O7PvDRBWREZKBAQcPDnett9/Iw7C4g9+WRfKx6lvw93R/Aht/RM13+U3g
0k4fXT8WgSl556RkzhPYJ73X7uwZPpo9Evrq087F7xe2P3UZYuPy6pBosbtM
bJLTW9NcSMMjsjJnKxJH8ES+XXXY3SG0NW82LdbtRur5why1/c3YuLbQeY00
YlP7jmO/gq/ABYaGS7RDKbyeyj1QL9ECY6zt87U+dMNws4ir2vAQrDq0Ic6l
WfBcWPMEvYIGpRVOC08nMEFU0jdu6zQbru7cGLiLw4XN2RHr8y7xoezonH2d
MwFNp+0s7XkCT7cOO3N1jACdOn3VAV8C3k32+kfd44OLr+xWX0ke6MVtyDi6
mQM2FhKaSR1MAXf2QtNaOpxpo4fFSFNgrOPPF1/XYbC0KDbZtbcH9qa8clBO
boGc+2ZSqu/LoOHG0YeKq8PBr2Be6MuIImzzrwtZL9KEMysojhUfu9D2us/m
v8Qg/g/But5u
           "], 200], "Preemptive"]], Method -> "Preemptive", 
       PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    TagBox[{
      {RGBColor[0.9568627450980393, 0.9568627450980393, 0.9568627450980393], 
       RectangleBox[{29, -158}, {53, -135}]}, 
      {RGBColor[0.27450980392156865`, 0.5411764705882353, 0.796078431372549], 
       RectangleBox[{35, -152}, {47, -141}], 
       StyleBox[{},
        Antialiasing->False]}},
     EventHandlerTag[{"MouseClicked" :> If[False, Sound`EmitSampledSound[
           SampledSoundList[{{0.}}, 8000], "Preemptive"]; Sound`StopMIDI[], 
         FEPrivate`EmitSound[
          SampledSoundList[{{0.}}, 8000], "Preemptive"]], Method -> 
       "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
    {GrayLevel[0.75], 
     StyleBox[LineBox[{{0, 0}, {360, 0}, {360, -164}, {0, -164}, {0, 0}}],
      Antialiasing->False]}},
   ContentSelectable->False,
   ImageSize->250,
   PlotRange->{{0, 360}, {-164, 0}},
   PlotRangePadding->1],
  Sound[
   SampledSoundFunction[Sin[0.125 #]& , 4000, 200]]]], "Output",
 CellChangeTimes->{{3.771513987452306*^9, 3.7715140555721684`*^9}, {
   3.771514097280511*^9, 3.771514099642267*^9}, 3.771514153572173*^9},
 CellLabel->
  "Out[413]=",ExpressionUUID->"93d0154d-0eba-45ea-84e1-981d149de404"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.771513876081264*^9, 3.77151387680742*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->
  "In[399]:=",ExpressionUUID->"107f57a4-ed72-4e85-ae85-c829873ac336"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"\"\<20*x^6\>\"", ",", 
   RowBox[{"-", "20"}], ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.7714574182089367`*^9, 3.771457424792953*^9}, {
   3.771493751599331*^9, 3.771493753765924*^9}, {3.771493906637953*^9, 
   3.7714939110106573`*^9}, {3.7714941240083857`*^9, 3.771494146788376*^9}, {
   3.7714943423481216`*^9, 3.771494346071151*^9}, {3.7714945030240917`*^9, 
   3.771494512628119*^9}, {3.7714946964447393`*^9, 3.771494698423581*^9}, {
   3.771494918296019*^9, 3.7714949234757347`*^9}, {3.771495069193514*^9, 
   3.771495072012928*^9}, {3.771495351637217*^9, 3.771495355120861*^9}, {
   3.771495608027664*^9, 3.7714956101509247`*^9}, {3.771495782144449*^9, 
   3.771495786796492*^9}, {3.771496030657259*^9, 3.771496032117106*^9}, {
   3.77149639012103*^9, 3.771496441940113*^9}, {3.771496513219487*^9, 
   3.7714965412331457`*^9}, {3.771496598976096*^9, 3.771496610555605*^9}, 
   3.771498664067338*^9, {3.771499794540139*^9, 3.771499807808453*^9}, {
   3.771500012120637*^9, 3.771500035844273*^9}, {3.77150007980552*^9, 
   3.77150008089893*^9}, {3.771500165852832*^9, 3.7715001780293837`*^9}, {
   3.771500247700925*^9, 3.771500276465137*^9}, {3.771500769044363*^9, 
   3.771500778423832*^9}, {3.771515721047426*^9, 3.771515751685198*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"71d1e208-620e-4608-b066-2019979435d2"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1e1VU1d0X7aGlu0G6m4MgEr+9RUEQlC4FpBH5EFBpEBQRlVCRDglFSqVE
QOVsWroNulukW7j/O8a9T2vMsdYc62mNOdfDFHC4bexMjMPhMkhwuP9bQ+YN
Nk5O8Ih1J7u0m6kfzgWxbQ8f4dHx6V2dMVw/vMIwvvt5H492dQLXD1b7IL+q
17/bm3j09EOFtW17H6x/+vLUxBwepes/ieuI6IOnZH+eRp14VM3bPKJ50Atf
3b1xOSwNjxIv033Q/NsDi4juvMGp4FGWO4dP0UknPGtSSJ6Cx6OBO9b9A+Od
sPnNpJuCPB51JF9x4EKdcELHUMZBAo927IKq98M6IVusTGUDNx5x1QfxU5B2
wgdcCy2RODwq47Z/fpm+A1ribZZp2hTR6jl39k3VNkjmrKPIaaOIxJvfh74e
boZ9tgoWy1aKyNNQIma5oRlmWnIHfzNXRD9OvnLpFzdDZf2/TfaGikif6k6g
XkgzdMEnWRVqKaLXpdnoHH8z/E40H6YmqYgorpoJj95sgtGZkd02uwrokzpl
wXfqRsj8q8kj54UCmpHv4jR4XAeRVHZURKwCuttBQ/b+bh30uB/8xuWZAjo0
0vTmdaiDzaL4EclHCihLszhDTqMOBt7Lulzur4DEhG/jOLYQnGIKkmy0U0BW
9vXdq04IlhnIL8zKKCAqc+v+1je10C6bmvS7pAJas1XyD3lYC2m25/gKxRRQ
vl6E7lWHWuiSnmHhKaCA7ClJuAz4ayHXMlXLDosC2jJ+yPAx4xt8EDX7luJI
HmVL5LvvZ3yFxg2pjhJt8kibu2OLqaIGCg/MjLU0yyOS5zzV4/E1cGdG1tql
QR4Z0Fwd77hTA1PIGwxzv8ojYgG+RQqlGjihu6zB+1EejU9jPMefquF/PWoc
jK/kUUlW+IMBQhWMGh3p2LORRzsaldH+S5XQelX0UpK1PMphm1fm76qE0ide
DWcs5NEPfOnp2dJK2M1PVuNjKI+2Ih9pNwdUQjYnmXcr5+VRZk22+TRVJcxd
CgmfEJNHrvdo395R/ASD/mp4PJ+WQ9aLjQ66ieUw3V5lAYzKof9uMPEy3y+H
X/vlndZ/yCFha43vm67l8Piz0HXjNjkUkZyav69aDh+EUeqzlMqhxzcGkljH
y+BTxkGp5FA51AOCIkNlymAq3mP5NaccWv2Nf5gyVAK/vHV2NWSWQ1GDkken
m0vgCLvdNI5WDrVJl5ypLi2Bp4+Mhu1xcihOi/2d1JMSmNOo0i40L4vE3//3
gVy1BBaYkRS9q5BF2vc+v6RV/Qir/FLdP16VRVRPnUUCZ4qhoJP321+XZNHt
L3fAnW/FMMbw0gTReVkkiHtskpxYDB0kdsxMlWRRUrRcg7NuMaQeNoL7HLLo
WeETf8rSImirScmhNSWDTgpmmIyjCiEJmX/Tj7sy6PGld5IjZvnQc/0KDucp
g9hbKzwplfLhr1ERNQlXGdRm927BhikfFlf2lwRZySDS8W8rQd3voLmbXDq/
pgwaNPwOoi6/g/ntcz7uFDIoSKKooV4vD155acZ/nCKN0mM2C1qd3sBARXpd
nXhpdPUXI7HApTcwr++79/NoaRRJWb+eIvUGHjOpNwjel0adwr2caxu58H28
oIuOkzQq5jThk3yYC2kS/hY9l/0fZgofrS7IgW1JT1SEGqSQlu2dZ3fosuGO
itYNj69S6N9ZG7f67Swo+Oso6tMnKWSSJ88mN5oFAzm8hnTypdC4lIW3fXEW
lEgxD/GIkUINGk9IxPSzYFSqUMMnCyl0Nf9dgqrga6iT8e3KpRVJNPbu0c1J
u3S4FjNyRDoniTrki37YnE2HqaGHhXXjkui6bIDEKcZ0uGKnSqHWL4mUt28N
ztanwZeCnwgyNZJopuJrDhJPg2PviuWZoyQRbV2SafdRCvQtS2MaE5JEVppj
/ApNSZA/twal8koivaXGFs7cJNga/9vTgl0SORBIVaTCkyDPPfb2HipJpL/m
2teikQTrVeIfNqxLIC9cy7fpqkRI9+3pVj5BAn0wKW2LqEyAeS0BP+5ck0Dy
9p3hTl3xMEXRV6vAVAI9Z/JZevshHkZn+JSMGfwPVz5pZIyLhz53bj3VBRLo
rpgnu5thPNTgs9HkE5FAZIHPLlENvoQDviCvbVUcxU4s9P2bfQGJRSl8BR6I
o+F3EuVeIs/h9nOSafMgcVT50nynkOo5XDg8uRp9Vxzd+HUqgmUiDnb17kns
uoijM8mDGZ6+cTAlZGm047I4mjDlSIjJi4Xyg50X/VnFUWp+i6Q8Swy0jXjF
2p0vhj7eTXaeEnwKu7AdCv8cMcSl9KBib+8JxA4tDvjTxdBvU15Wne4nkN+H
e9wnTgzFqhpzPwt+AqfscvLZfMUQMUnxp4LfUdBFrUTNVksMvTz9N5Y28zH0
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
fjFaLfgID146qxt9Pe6D/y+/Cf5/fvP/AKRKWdk=
       "]]},
     Annotation[#, "Charting`Private`Tag$14448#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-20, 20}, {0., 1.2799996865306447`*^9}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellChangeTimes->{{3.771515716014886*^9, 3.771515753039631*^9}},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"f42a9e53-c649-495e-b450-5e3b326e4c63"],

Cell[BoxData["\<\"This function plots 20*x^6. This function is polynomial. \
The exponent of this function is 6. This function has  a total of 10 extremas \
. A proposed description of this plot based on the derivatives and extremas : \
still a smooth decline that ends at x = 0. then a very smooth increase that \
ends at x = 0. then a very smooth increase that ends at x = 0. then a very \
smooth increase that ends at x = 0. then a very smooth increase that ends at \
x = 0. then a very smooth increase that ends at x = 20 \"\>"], "Output",
 CellChangeTimes->{
  3.771500624900035*^9, 3.7715006735302763`*^9, {3.771500771492627*^9, 
   3.7715007789142714`*^9}, 3.771500927254318*^9, {3.771515716132573*^9, 
   3.771515753136859*^9}},
 CellLabel->"Out[8]=",ExpressionUUID->"38b18bd1-2d9c-486b-b520-ef878d9e7fac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PolynomialQ", "[", 
  RowBox[{"Sin", "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.77149527677639*^9, 3.7714952825087147`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"2a81a0e5-97d8-40a8-af7e-4116dea2259d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7714952834061327`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"82d4f242-a161-481f-9038-4ce125548b50"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"na", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1000"}], "}"}], "]"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771530692156358*^9, 3.77153069385075*^9}, 
   3.771533714354165*^9, {3.77154599604602*^9, 3.771545999045192*^9}, 
   3.771546694484679*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"35f69a8f-0918-4224-9863-7ab3063e88b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xa", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1000"}], "}"}], "]"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771530682764185*^9, 3.771530688123837*^9}, 
   3.77153371003417*^9, {3.7715456288333483`*^9, 3.771545636610162*^9}, 
   3.7715466980603456`*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"922fe8a3-6b46-426c-b61f-71881d4fbc0d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"da", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1000"}], "}"}], "]"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771515141500264*^9, 3.771515157541945*^9}, 
   3.771518590782901*^9, {3.771530362767036*^9, 3.771530389215591*^9}, 
   3.771530449659503*^9, {3.771533699034891*^9, 3.771533704666216*^9}, {
   3.771545640609272*^9, 3.771545642238864*^9}, 3.771546699516486*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"51f859f3-dc58-4fac-82cb-5c8d4abb8b53"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exp", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771530802683272*^9, 3.771530831048503*^9}, {
   3.771531038113867*^9, 3.771531040758966*^9}, 3.771545645032937*^9, 
   3.7715467006118793`*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"dad391d6-7f1c-4fa8-965a-28373874e2e6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771531509966896*^9, 3.771531517479849*^9}, {
   3.771531643210189*^9, 3.771531754730267*^9}, 
   3.771531895813488*^9},ExpressionUUID->"28f6415f-c926-4d42-8b7f-\
78ea4b960586"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetModel", "[", 
  "\"\<Inception V3 Trained on ImageNet Competition Data\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.7715320780467978`*^9, 3.771532078048554*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"13ec4645-4bd9-4d53-8e0e-c5a6f069b197"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["33", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 80, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 80], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 288, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 448,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 448,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "fc1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1008, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1008}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1008}, "$OutputSize" -> 1008, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1008}, NeuralNetworks`RealT]]], 
                    "part" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1001]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1008}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "$Version" -> "12.0.10", "VarianceImage" -> None, 
                    "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1001}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> {
                    Entity["Concept", "Other::nzvm6"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Skeleton[998], 
                    Entity["Concept", "Dumbbell::qjh33"]}, "Dimensions" -> 
                    1001, "$Version" -> "12.0.10", "InputDepth" -> 1, "$Rank" -> 
                    0]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "14", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "20", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"global_pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1008\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"part\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PartLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1001\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1001\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771532101001625*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"cc2276b8-e6fc-47c9-96f3-8dc3c95c4a4b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "CloudGet", "[", 
   "\"\<https://www.wolframcloud.com/objects/b14bc770-5d09-40b1-a4fb-\
19c9de229548\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Evaluate", " ", "this", " ", "cell", " ", "to", " ", "copy", " ", "the", 
    " ", "example", " ", "input", " ", "from", " ", "a", " ", "cloud", " ", 
    "object"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.771532134992209*^9, 3.7715321349952583`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"bfe7a582-90d7-4752-95d3-834a20ffd696"],

Cell[BoxData[
 RowBox[{
  RowBox[{"weights", "=", 
   RowBox[{"NetExtract", "[", 
    RowBox[{
     RowBox[{
     "NetModel", "[", 
      "\"\<Inception V3 Trained on ImageNet Competition Data\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<conv_conv2d\>\"", ",", "\"\<Weights\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715322054479313`*^9, 3.771532205450086*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"69c57ae4-28d0-4fcf-bbda-69d0f048626e"],

Cell[BoxData[
 RowBox[{"Merge", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"association", ",", "association1"}], "}"}], ",", "Flatten"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771532226667705*^9, 3.771532261634988*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"620dba13-6649-4dfd-85b3-4f31d6d03067"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.771532174032789*^9, 
  3.77153217905097*^9}},ExpressionUUID->"cd056fa9-9045-47a6-9fd5-\
a6f12f47c809"],

Cell[BoxData[
 RowBox[{
  RowBox[{"association1test", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Binarize", "[", 
       RowBox[{"Plot", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"da", "[", 
              RowBox[{"[", "xal", "]"}], "]"}], "+", 
             RowBox[{"(", "x", ")"}]}], ")"}], "/", 
           RowBox[{"(", "x", ")"}]}], "+", 
          RowBox[{"na", "[", 
           RowBox[{"[", "xal", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
         RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1000"}], ",", "1000"}], "}"}]}]}], "]"}], "]"}], 
      "\[Rule]", " ", "\"\<Hyperbolic\>\""}], ",", 
     RowBox[{"{", 
      RowBox[{"xal", ",", "1", ",", "100", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.771533653973061*^9, {3.771533736840577*^9, 3.771533739847293*^9}, 
   3.771546725226585*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"08091b7b-9d6a-4381-8470-918b741b8f0d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"association1", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Binarize", "[", 
       RowBox[{"Plot", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"da", "[", 
              RowBox[{"[", "xal", "]"}], "]"}], "+", 
             RowBox[{"(", "x", ")"}]}], ")"}], "/", 
           RowBox[{"(", "x", ")"}]}], "+", 
          RowBox[{"na", "[", 
           RowBox[{"[", "xal", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
         RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1000"}], ",", "1000"}], "}"}]}]}], "]"}], "]"}], 
      "\[Rule]", " ", "\"\<Hyperbolic\>\""}], ",", 
     RowBox[{"{", 
      RowBox[{"xal", ",", "1", ",", "1000", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7715307530396748`*^9, 3.7715307762019253`*^9}, {
   3.771531373475711*^9, 3.771531392203377*^9}, {3.771531484196781*^9, 
   3.771531484491333*^9}, {3.77153177094668*^9, 3.771531780442149*^9}, {
   3.771531900494236*^9, 3.771531914433022*^9}, {3.771531954540859*^9, 
   3.771531961018804*^9}, 3.771546169937861*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"a302113b-174d-43f3-8144-dff6a42c3ab9"],

Cell[BoxData[
 RowBox[{"Merge", "[", 
  RowBox[{"{", 
   RowBox[{"associationtest", ",", "association1test"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771533857337096*^9, 
  3.771533884805635*^9}},ExpressionUUID->"41d36ce1-8333-44b9-aef1-\
dcc2ad0a8e20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"associationtest", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Binarize", "[", 
       RowBox[{"Plot", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"da", "[", 
              RowBox[{"[", "xal", "]"}], "]"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{"x", "^", "2"}], ")"}]}], ")"}], "+", "x"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
         RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1000"}], ",", "1000"}], "}"}]}]}], "]"}], "]"}], 
      "\[Rule]", " ", "\"\<Parabola\>\""}], ",", 
     RowBox[{"{", 
      RowBox[{"xal", ",", "1", ",", "100", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771533628949263*^9, 3.7715336298925533`*^9}, 
   3.771533661828018*^9, 3.7715463455328083`*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"a0bc9db6-1d31-4eed-9d11-4038d9699af3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrainSet", " ", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"association", ",", "association1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771534667338311*^9, 3.77153468289924*^9}, 
   3.7715464576988373`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"d7e8a01d-2a67-45b2-b9ed-f07dded389bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TestSet", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"associationtest", ",", "association1test"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7715467975759706`*^9, 3.77154681371621*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"0a10aa89-e65e-4e4b-8b4f-9ecfe0dd007c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"association", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Binarize", "[", 
       RowBox[{"Plot", "[", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"da", "[", 
              RowBox[{"[", "xal", "]"}], "]"}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{"x", "^", "2"}], ")"}]}], ")"}], "+", "x"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
         RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1000"}], ",", "1000"}], "}"}]}]}], "]"}], "]"}], 
      "\[Rule]", " ", "\"\<Parabola\>\""}], ",", 
     RowBox[{"{", 
      RowBox[{"xal", ",", "1", ",", "1000", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7715159020193644`*^9, 3.771516018746298*^9}, {
   3.771516068920443*^9, 3.77151608681641*^9}, {3.77151612431886*^9, 
   3.771516199232518*^9}, {3.7715162335774813`*^9, 3.77151626865908*^9}, {
   3.771516398756854*^9, 3.771516410550322*^9}, {3.771518127664442*^9, 
   3.771518128014882*^9}, {3.771518593112831*^9, 3.77151873573346*^9}, {
   3.771518790854702*^9, 3.7715188162084713`*^9}, {3.7715188824897423`*^9, 
   3.771518920132197*^9}, {3.7715189560264587`*^9, 3.7715189647551937`*^9}, {
   3.771519001982997*^9, 3.7715190028981867`*^9}, {3.771519052410822*^9, 
   3.771519054676855*^9}, {3.7715191334142637`*^9, 3.7715192384596043`*^9}, {
   3.771520832576734*^9, 3.771520845941175*^9}, {3.7715209662422743`*^9, 
   3.771520989491671*^9}, {3.771521120726231*^9, 3.771521231130046*^9}, {
   3.771522770020232*^9, 3.7715227849906816`*^9}, {3.771522816223806*^9, 
   3.771522825574028*^9}, {3.7715231836493998`*^9, 3.771523191437427*^9}, {
   3.771523250002348*^9, 3.771523267428891*^9}, {3.771523298317525*^9, 
   3.7715233632213507`*^9}, {3.771523393606127*^9, 3.771523398386807*^9}, {
   3.771523486435623*^9, 3.771523517924951*^9}, {3.771523560753243*^9, 
   3.7715235878137827`*^9}, {3.7715303699940033`*^9, 
   3.7715304245071707`*^9}, {3.77153046136898*^9, 3.77153046278127*^9}, {
   3.771530535532426*^9, 3.771530543041391*^9}, {3.7715307041660852`*^9, 
   3.771530742398994*^9}, {3.77153101546778*^9, 3.771531017863617*^9}, {
   3.771531231140369*^9, 3.771531232873279*^9}, 3.7715464783617573`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"76052049-f00a-4d92-854f-c79404c79474"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tempNet", "=", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
    "NetModel", "[", 
     "\"\<Inception V3 Trained on ImageNet Competition Data\>\"", "]"}], ",", 
    
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "4"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715341309858103`*^9, 3.771534130987647*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"76063e98-4c04-4d6c-a22a-14284e1e3805"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["30", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 80, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 80], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 288, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 448,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 320,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 448,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, "Stride" -> {\
1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 384,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "$Version" -> "12.0.10", "VarianceImage" -> None, 
                    "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "14", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "20", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"global_pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7715341320172663`*^9, 3.771546821514123*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"cc7fff3f-c078-4d7e-84b4-62451334f337"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<pretrainedNet\>\"", "\[Rule]", "tempNet"}], ",", 
      RowBox[{"\"\<linearNew\>\"", "\[Rule]", 
       RowBox[{"LinearLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<softmax\>\"", "\[Rule]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "|>"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Parabola\>\"", ",", "\"\<Hyperbolic\>\""}], "}"}]}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.77153413769165*^9, 3.771534241873061*^9}, {
  3.771546859991941*^9, 3.771546868581746*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"17eb7600-2603-41a4-bce7-015b6bd96645"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "pretrainedNet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 3, 3, 
                    3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 32, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 32, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{80, 64, 1,
                     1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 80, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 80], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{2, 2}, {2, 2}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 48], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 96], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{2, 2}, {2, 2}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 48], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 96], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 256], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{48}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{2, 2}, {2, 2}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 48], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 96], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 288, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 288], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{64}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "ChannelGroups" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 96], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> A\
ssociation["Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 160], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> A\
ssociation["Momentum" -> 0.9, "Epsilon" -> 0.001, "$Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 768], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {3, 3}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{3, 3}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "ChannelGroups" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 1280], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 1280], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{448, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 1280], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{448}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 448, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 448], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 1280], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 2048], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 2048], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{448, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 2048], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{448}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 448, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 448], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {1, 1}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 384], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 384, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "ChannelGroups" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False, 
                    "$WeightsInputChannels" -> 2048], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "$Channels" -> 192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "linearNew" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 2048}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "$Version" -> "12.0.10", "VarianceImage" -> None, 
                    "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"Parabola\"", "\"Hyperbolic\""}, 
                    "InputDepth" -> 1, "Dimensions" -> 2, "$Rank" -> 0, 
                    "$Version" -> "12.0.10"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainedNet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "30", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linearNew\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7715342113638372`*^9, 3.771534243480063*^9}, 
   3.771546824610993*^9, {3.771546874607294*^9, 3.771546877067663*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"61cf887d-d44f-4e18-9455-698eb18552d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"newNet", ",", "TrainSet", ",", 
    RowBox[{"LearningRateMultipliers", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<linearNew\>\"", "\[Rule]", "1"}], ",", 
       RowBox[{"_", "\[Rule]", "0"}]}], "}"}]}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715342536537724`*^9, 3.771534258697884*^9}, {
  3.771546833504127*^9, 3.7715468423373613`*^9}, {3.7715469297180767`*^9, 
  3.771546933786016*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"3b255580-80a3-4e7f-a588-de010e8447e1"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain","trgrestart",
   "\"TargetDevice -> \\\"GPU\\\" requires a restart of your Wolfram Language \
session.\"",2,34,177,26181537614969743268,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771547242670054*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"293ded2c-26e6-4f79-b13e-498ffaca3428"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771534260800108*^9, 3.771546873862011*^9, 
  3.7715469388926697`*^9, 3.7715472426798277`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"75cf7b3d-5d11-48b4-a678-388035280397"]
}, Open  ]],

Cell[BoxData["TrainSet"], "Input",
 CellChangeTimes->{{3.7715348287505007`*^9, 3.771534832179514*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"8b14c7f1-0fda-4a33-b8f5-e40e79681e6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<pretrainedNet\>\"", "\[Rule]", "tempNet"}], ",", 
      RowBox[{"\"\<linearNew\>\"", "\[Rule]", 
       RowBox[{"LinearLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<softmax\>\"", "\[Rule]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "|>"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Parabola\>\"", ",", "\"\<Hyperbolic\>\""}], "}"}]}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771535030548689*^9, 3.7715350767914267`*^9}, {
  3.771538203239134*^9, 3.771538252569951*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"2cf97c19-eea0-4328-b2a9-455333901bad"],

Cell[BoxData[
 TemplateBox[{
  "NetChain","netinvnodes",
   "\"\\!\\(\\*RowBox[{\\\"tempNet\\\"}]\\) is not a layer, a net, or a valid \
specification for one.\"",2,4,170,26181537614969743268,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7715418357593184`*^9},
 CellLabel->
  "During evaluation of \
In[4]:=",ExpressionUUID->"a2bdb0cd-822a-4931-9209-f6fa38010f79"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.771535081491809*^9, {3.7715382459264297`*^9, 3.771538253897705*^9}, 
   3.771541835769733*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"6315fc87-caef-491a-9f4c-886c42b2d655"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"newNet", ",", "TrainSet", ",", 
    RowBox[{"LearningRateMultipliers", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<linearNew\>\"", "\[Rule]", "1"}], ",", 
       RowBox[{"_", "\[Rule]", "0"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7715349986092577`*^9, 3.771535003358724*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"fd9cf00c-dbca-4d11-bfcf-173d9f5f63f3"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain","invnet",
   "\"First argument to NetTrain should be a fully specified net.\"",2,3,165,
   26181537614969743268,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771541830945798*^9},
 CellLabel->
  "During evaluation of \
In[3]:=",ExpressionUUID->"2443c5aa-2859-4157-a3c7-5c99ac62945e"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.771541830956255*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"4bea0ed8-ff71-473c-a3ea-4d7bcbd704f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"trainedNet", ",", "TestSet", ",", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771535182107511*^9, 3.7715351854929934`*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"7e026c58-8fb2-430e-a0e3-12f8bbda3826"],

Cell[BoxData["0.69`"], "Output",
 CellChangeTimes->{3.7715352536101294`*^9, 3.771538469330151*^9, 
  3.771539045015359*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"3d82db7d-5ed9-4d69-b7a7-1bad016d40ac"]
}, Open  ]],

Cell[BoxData["hey"], "Input",
 CellChangeTimes->{{3.771542055943899*^9, 
  3.771542056141651*^9}},ExpressionUUID->"d751e19f-5e58-495c-abce-\
604a9e070803"]
},
WindowSize->{808, 603},
WindowMargins->{{Automatic, 27}, {-25, Automatic}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 156, 3, 30, "Input",ExpressionUUID->"76d4be34-63d6-4aa2-983d-e52a6411252a"],
Cell[717, 25, 143, 2, 52, "Input",ExpressionUUID->"333c99f8-eff1-40c5-9986-12c90ba8ba9c"],
Cell[863, 29, 493, 8, 30, "Input",ExpressionUUID->"abfd504e-e8d5-4d97-a414-b21d0ec357b7"],
Cell[1359, 39, 272, 7, 52, "Input",ExpressionUUID->"bfcb3dd0-0f00-40ab-9c50-8c6e417bbd90"],
Cell[1634, 48, 689, 9, 30, "Input",ExpressionUUID->"642da788-2f4d-4704-942a-ff8da40589d8"],
Cell[CellGroupData[{
Cell[2348, 61, 173, 3, 30, "Input",ExpressionUUID->"8b774887-d267-4e82-a729-bd1b11bc6dc3"],
Cell[2524, 66, 172, 2, 34, "Output",ExpressionUUID->"b243ab96-3e20-4254-b038-944ced36fd23"]
}, Open  ]],
Cell[2711, 71, 261, 7, 30, "Input",ExpressionUUID->"ee861be6-75ab-4e57-9b2d-306f7e70de86"],
Cell[CellGroupData[{
Cell[2997, 82, 1439, 32, 94, "Input",ExpressionUUID->"00285b61-aabc-4268-8629-4b8f38acf214"],
Cell[4439, 116, 40342, 680, 437, "Output",ExpressionUUID->"effd950e-b01b-4db0-b4b3-4ba434353588"]
}, Open  ]],
Cell[44796, 799, 177, 3, 30, "Input",ExpressionUUID->"28fa633e-6c38-4c1e-a45b-e569b1154c71"],
Cell[CellGroupData[{
Cell[44998, 806, 438, 11, 30, "Input",ExpressionUUID->"47e3cf3a-0582-4268-8fb0-8e65e56f7748"],
Cell[45439, 819, 250, 4, 34, "Output",ExpressionUUID->"9ba8e01f-aa31-4c2d-984b-2077742bc9bd"]
}, Open  ]],
Cell[45704, 826, 1794, 39, 75, "Input",ExpressionUUID->"c604dfb9-3b85-48f2-8b7b-b2c24802ba1b"],
Cell[CellGroupData[{
Cell[47523, 869, 134, 3, 30, "Input",ExpressionUUID->"e6e7070d-4ada-4d61-9510-c6cc5a299a7c"],
Cell[47660, 874, 640, 14, 56, "Output",ExpressionUUID->"a6d858e3-35e5-421a-95e5-19d93c31b12a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48337, 893, 134, 3, 30, "Input",ExpressionUUID->"a3b01c4f-7996-4c9d-a6c9-c29efe2ec399"],
Cell[48474, 898, 640, 14, 56, "Output",ExpressionUUID->"68fa6532-5c1e-49ff-a127-345e3dd37164"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49151, 917, 342, 8, 30, "Input",ExpressionUUID->"46861d84-285f-4bb3-ae48-1cde90fcd59c"],
Cell[49496, 927, 364, 8, 34, "Output",ExpressionUUID->"a7bf298f-9bf1-4b7c-acbf-86fed8507b53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49897, 940, 300, 7, 30, "Input",ExpressionUUID->"c7ef3c82-c3e8-4afb-9095-8ef6c884029d"],
Cell[50200, 949, 324, 8, 34, "Output",ExpressionUUID->"17b7bd2f-3eef-4bb6-b9b1-272ef7f5b2e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50561, 962, 1082, 28, 33, "Input",ExpressionUUID->"fbd155e3-6f39-432a-a452-088f56692638"],
Cell[51646, 992, 1086, 20, 56, "Output",ExpressionUUID->"bf032f98-e0d7-459a-ab19-fa189fa0d4f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52769, 1017, 1643, 38, 52, "Input",ExpressionUUID->"b4bc26fc-dbe9-4cd6-9170-438d731be264"],
Cell[54415, 1057, 1474, 40, 77, "Output",ExpressionUUID->"e9bf1dc4-1540-42b6-a39b-b6319c89f439"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55926, 1102, 334, 9, 30, "Input",ExpressionUUID->"65efd0e6-2942-4e1b-856e-22c350667967"],
Cell[56263, 1113, 298, 5, 34, "Output",ExpressionUUID->"645362d9-d9fd-49e9-b8c8-0139278104eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56598, 1123, 274, 7, 30, "Input",ExpressionUUID->"4440b039-2997-46ae-90ac-2cbf59dc0dba"],
Cell[56875, 1132, 4924, 106, 224, "Output",ExpressionUUID->"5ac95765-09fc-4fe2-aa41-a828fc3a0fe7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61836, 1243, 402, 11, 30, "Input",ExpressionUUID->"837db2c0-914d-433e-a300-a46f87d1ca13"],
Cell[62241, 1256, 7574, 207, 287, "Output",ExpressionUUID->"3a232556-1135-4c36-a331-16213372ba69"]
}, Open  ]],
Cell[69830, 1466, 526, 17, 30, "Input",ExpressionUUID->"614174f7-b0b0-46a6-a6e6-681be5efbc85"],
Cell[70359, 1485, 945, 25, 52, "Input",ExpressionUUID->"580c3f36-f4f7-43b6-ad55-70354f63dcef"],
Cell[71307, 1512, 215, 5, 30, "Input",ExpressionUUID->"fdd88d17-3cd2-4962-8d3c-c31b7958aeba"],
Cell[71525, 1519, 213, 4, 30, "Input",ExpressionUUID->"6db4d06a-d5e9-466f-ab82-a963a917febf"],
Cell[71741, 1525, 1173, 31, 52, "Input",ExpressionUUID->"70ae7224-783f-4835-b6b8-aa558b8f3f7d"],
Cell[CellGroupData[{
Cell[72939, 1560, 134, 3, 30, "Input",ExpressionUUID->"7d8ffba1-b6f3-41d9-8732-959767c720f6"],
Cell[73076, 1565, 828, 15, 77, "Output",ExpressionUUID->"21303c8b-69a9-40dc-962c-0eac44dddeae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73941, 1585, 431, 9, 52, "Input",ExpressionUUID->"5712c1e0-d1dc-476b-8767-64def2943c99"],
Cell[74375, 1596, 453, 9, 56, "Output",ExpressionUUID->"1e2e4855-ca28-473c-af19-b44882543fe0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74865, 1610, 444, 9, 30, "Input",ExpressionUUID->"e3472f9d-4892-4c3c-ba7f-162fb6f590ce"],
Cell[75312, 1621, 466, 9, 34, "Output",ExpressionUUID->"22b8d296-f1ce-4867-a31c-db2aa48e358d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75815, 1635, 148, 4, 30, "Input",ExpressionUUID->"48c8499c-5c8b-443b-b57c-6db561b53df0"],
Cell[75966, 1641, 170, 4, 34, "Output",ExpressionUUID->"60f595c3-fa95-4e4a-9a9c-e6e7b25bdaed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76173, 1650, 148, 4, 30, "Input",ExpressionUUID->"b3360980-264b-40df-924d-4d00dd41ba98"],
Cell[76324, 1656, 169, 4, 34, "Output",ExpressionUUID->"a60c4f36-9b58-47ab-96ba-02e095c446ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76530, 1665, 413, 8, 30, "Input",ExpressionUUID->"84fb6b6b-3605-47db-aafd-fa301fcba357"],
Cell[76946, 1675, 1046, 23, 34, "Output",ExpressionUUID->"3d6b1e1f-92a9-406d-ab41-be0b66d73124"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78029, 1703, 302, 6, 30, "Input",ExpressionUUID->"1db3b41f-7b95-4046-a189-e493d8e769e4"],
Cell[78334, 1711, 869, 20, 56, "Output",ExpressionUUID->"5923ff54-a319-4ce7-ba88-be4729dbbf34"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79240, 1736, 506, 13, 30, "Input",ExpressionUUID->"71af4019-1803-4539-a13c-3e4ac63ae732"],
Cell[79749, 1751, 393, 6, 34, "Output",ExpressionUUID->"4da73a81-184a-4528-a251-a6c1a9822b56"]
}, Open  ]],
Cell[80157, 1760, 1016, 28, 30, "Input",ExpressionUUID->"0516a239-adfe-4ac2-a59c-82cffad9f4b0"],
Cell[CellGroupData[{
Cell[81198, 1792, 458, 13, 30, "Input",ExpressionUUID->"076a345a-9eae-4939-a8f1-c110b7c564ed"],
Cell[81659, 1807, 596, 12, 34, "Output",ExpressionUUID->"5dc93b60-5669-4c2b-ad49-361fdd943f9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82292, 1824, 577, 13, 30, "Input",ExpressionUUID->"5b782657-0c50-4dd3-9778-83def3758c83"],
Cell[82872, 1839, 596, 11, 34, "Output",ExpressionUUID->"51089df7-57eb-4cc7-8df5-21457b5fad33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83505, 1855, 502, 11, 30, "Input",ExpressionUUID->"3baf2d2b-ffcc-4742-b1b5-1dc2ea51016b"],
Cell[84010, 1868, 40402, 682, 244, "Output",ExpressionUUID->"f1f2323c-05bb-4641-a184-23fffeb1ce77"]
}, Open  ]],
Cell[124427, 2553, 153, 3, 30, "Input",ExpressionUUID->"e5af9e21-d025-41fb-935e-97f8dddce5b8"],
Cell[CellGroupData[{
Cell[124605, 2560, 843, 22, 30, "Input",ExpressionUUID->"9239faa6-1fdc-4d3f-bebb-d7954ebe0d43"],
Cell[125451, 2584, 1431, 27, 77, "Output",ExpressionUUID->"900ce5d1-c4c2-4f0a-9433-c3fac74d97ad"]
}, Open  ]],
Cell[126897, 2614, 268, 6, 30, "Input",ExpressionUUID->"22493958-3a52-494b-81e9-d786fda5e62b"],
Cell[CellGroupData[{
Cell[127190, 2624, 134, 3, 30, "Input",ExpressionUUID->"2e4f80d3-40c8-463f-80e4-2e4dc808b2eb"],
Cell[127327, 2629, 1096, 23, 77, "Output",ExpressionUUID->"86c97ffc-2708-4e00-9971-5b0d184d3f49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128460, 2657, 215, 4, 30, "Input",ExpressionUUID->"d199a575-5580-4947-9398-08946e80b9f1"],
Cell[128678, 2663, 205, 4, 34, "Output",ExpressionUUID->"24fd7c45-f923-4810-a9a3-e16f2eabdef6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128920, 2672, 395, 9, 30, "Input",ExpressionUUID->"bf49bbdc-609a-4613-9034-c8709f258241"],
Cell[129318, 2683, 1155, 23, 77, "Output",ExpressionUUID->"97b3e801-6986-4fe0-b70a-d4e41c23bd37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130510, 2711, 560, 11, 30, "Input",ExpressionUUID->"25248866-1d2a-459e-81ea-f5ed1ae3bc84"],
Cell[131073, 2724, 1684, 31, 77, "Output",ExpressionUUID->"001c1591-3792-4500-8761-bc0fb308893e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132794, 2760, 459, 11, 30, "Input",ExpressionUUID->"ab32379d-937e-4f79-abc5-a0cb272f5116"],
Cell[133256, 2773, 1442, 28, 77, "Output",ExpressionUUID->"007e4460-bcd9-4486-8dae-37aaddbffd3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134735, 2806, 405, 9, 30, "Input",ExpressionUUID->"41648948-bbd4-4d8d-a97c-2f2ddc224c1a"],
Cell[135143, 2817, 1491, 29, 77, "Output",ExpressionUUID->"9da76644-eb32-4e59-bc6d-5c3d1293e82d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136671, 2851, 455, 9, 30, "Input",ExpressionUUID->"6e40bdf0-8f35-45e8-aa64-a6230b7f9068"],
Cell[137129, 2862, 3561, 89, 161, "Output",ExpressionUUID->"d53593c1-15b2-4aca-93d1-c92ce69dc187"]
}, Open  ]],
Cell[140705, 2954, 152, 3, 30, "Input",ExpressionUUID->"0b548039-df49-4888-917f-64948102f565"],
Cell[CellGroupData[{
Cell[140882, 2961, 1282, 31, 73, "Input",ExpressionUUID->"2ec47477-232d-4d05-981e-c2dfc84acc04"],
Cell[142167, 2994, 1344, 24, 77, "Output",ExpressionUUID->"ab3f8067-745a-4d08-83c8-1f6d8c5b9676"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143548, 3023, 353, 7, 30, "Input",ExpressionUUID->"a754bdb0-c4cc-4081-b4c3-993825bf26e6"],
Cell[143904, 3032, 2379, 62, 119, "Output",ExpressionUUID->"dad07f74-8ed9-4e38-8f86-03157a6f589c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146320, 3099, 275, 6, 30, "Input",ExpressionUUID->"50d9769b-a53b-4f78-bb52-fa468a544920"],
Cell[146598, 3107, 289, 5, 34, "Output",ExpressionUUID->"84537548-d5dc-4550-8523-11840274413c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146924, 3117, 237, 5, 30, "Input",ExpressionUUID->"bbda719f-7e04-438d-b245-76cb62819c8e"],
Cell[147164, 3124, 274, 5, 34, "Output",ExpressionUUID->"75852f1e-f065-4dcc-b105-f9a7e0dcf66f"]
}, Open  ]],
Cell[147453, 3132, 367, 6, 30, "Input",ExpressionUUID->"5a7e2bbd-baef-4be3-9163-1c2e6e4ae719"],
Cell[147823, 3140, 190, 3, 30, "Input",ExpressionUUID->"29677177-0da3-440c-9830-2658ed6f5250"],
Cell[CellGroupData[{
Cell[148038, 3147, 1063, 21, 30, "Input",ExpressionUUID->"879446b4-246f-4f9d-bd81-c77ae2512165"],
Cell[149104, 3170, 1087, 29, 56, "Output",ExpressionUUID->"94619043-0e34-4445-97bf-52d1ecddee6c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150228, 3204, 1040, 18, 94, "Input",ExpressionUUID->"5c09c633-adc7-4c0a-b1f5-d56d8e998277"],
Cell[151271, 3224, 807, 15, 77, "Output",ExpressionUUID->"60ba79ea-4d1a-45a2-84ff-d4dd582bed22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152115, 3244, 352, 8, 30, "Input",ExpressionUUID->"edf915a4-5417-49c9-9c04-17245485060d"],
Cell[152470, 3254, 949, 26, 56, "Output",ExpressionUUID->"f1af2301-ac63-4894-a88a-a9f61f7e1da1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153456, 3285, 233, 5, 30, "Input",ExpressionUUID->"c08beb9b-b2ba-46d5-95d5-0e0a79200454"],
Cell[153692, 3292, 179, 3, 34, "Output",ExpressionUUID->"254cc3b1-b16a-47f2-932e-b05b3ea2b0b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153908, 3300, 2373, 54, 115, "Input",ExpressionUUID->"f7ab4dc6-3c61-4a41-9e88-452790b848d7"],
Cell[156284, 3356, 5082, 95, 539, "Output",ExpressionUUID->"45fedfd6-0524-45f2-8bac-b620d9362b4f"]
}, Open  ]],
Cell[161381, 3454, 237, 5, 30, "Input",ExpressionUUID->"0d3db72e-85e7-41c2-94fb-d58211aecc63"],
Cell[161621, 3461, 350, 7, 30, "Input",ExpressionUUID->"40cb993f-cce3-4aae-b2fe-bebdf4fe9112"],
Cell[161974, 3470, 211, 4, 30, "Input",ExpressionUUID->"83774443-11f2-46f4-8524-b2ffff9ddf9c"],
Cell[CellGroupData[{
Cell[162210, 3478, 214, 4, 30, "Input",ExpressionUUID->"b214b57f-6e01-4ed6-934a-ef4be8a67f02"],
Cell[162427, 3484, 154, 3, 34, "Output",ExpressionUUID->"4938ec1f-fdea-425d-a5a4-887edbaa39b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162618, 3492, 221, 4, 30, "Input",ExpressionUUID->"d5e30755-5105-41ba-8208-8ae079460a7a"],
Cell[162842, 3498, 178, 3, 34, "Output",ExpressionUUID->"fd7d2fec-8c17-4290-8642-5170747c3d83"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163057, 3506, 255, 5, 30, "Input",ExpressionUUID->"8da7b48f-450d-41ac-bd11-d6d8cbf19ea1"],
Cell[163315, 3513, 1556, 46, 122, "Output",ExpressionUUID->"6810bd8a-b249-4e31-b20e-6ba2a2436237"]
}, Open  ]],
Cell[164886, 3562, 201, 4, 30, "Input",ExpressionUUID->"2043f910-8c3c-425b-a543-80db6ce18b9f"],
Cell[CellGroupData[{
Cell[165112, 3570, 181, 3, 30, "Input",ExpressionUUID->"396483f4-04ba-469f-9b99-a51b2d39ff02"],
Cell[165296, 3575, 504, 10, 56, "Output",ExpressionUUID->"e06c8fcc-5a15-4075-974e-89ceeb9f71cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165837, 3590, 152, 3, 30, "Input",ExpressionUUID->"74fd6a26-4b41-4653-b985-f26a96717496"],
Cell[165992, 3595, 861, 16, 76, "Message",ExpressionUUID->"96fb846a-3727-4cd0-89af-966fee3c8d7b"],
Cell[166856, 3613, 1093, 24, 98, "Output",ExpressionUUID->"8da363d4-2d67-4c16-909e-20a954087871"]
}, Open  ]],
Cell[167964, 3640, 212, 4, 30, "Input",ExpressionUUID->"3e05b26a-83ee-4aaa-956f-2a74d78697e6"],
Cell[168179, 3646, 17536, 393, 1215, "Input",ExpressionUUID->"539b9829-d8e8-499f-b237-1170c766f87d"],
Cell[185718, 4041, 129, 3, 30, "Input",ExpressionUUID->"56f98c7e-bf92-47bb-b1c3-79a455e7e512"],
Cell[CellGroupData[{
Cell[185872, 4048, 264, 4, 30, "Input",ExpressionUUID->"6447f852-7a53-434c-b9d0-4d1b8b920d7a"],
Cell[186139, 4054, 233, 5, 24, "Print",ExpressionUUID->"547fbbac-5df6-4566-90d2-63b4a29e3de8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186409, 4064, 679, 17, 52, "Input",ExpressionUUID->"576c8a16-6e09-4877-a16d-3af072808bd9"],
Cell[187091, 4083, 15702, 342, 132, "Output",ExpressionUUID->"016c582e-2e88-40b5-a22a-28443b105193"]
}, Open  ]],
Cell[202808, 4428, 169, 4, 30, "Input",ExpressionUUID->"abef2d62-59f3-4a66-ab34-967f69e583d7"],
Cell[202980, 4434, 169, 4, 30, "Input",ExpressionUUID->"8ce7f0c9-fe3f-423a-8a12-7773c238276a"],
Cell[203152, 4440, 716, 21, 52, "Input",ExpressionUUID->"662f924a-d56d-4ce3-8137-c2e13b12aeac"],
Cell[CellGroupData[{
Cell[203893, 4465, 246, 5, 30, "Input",ExpressionUUID->"3f299b92-e979-47cd-b78f-b680dd085849"],
Cell[204142, 4472, 4038, 90, 132, "Output",ExpressionUUID->"a78847fa-de0b-4589-8ee1-9a53519443be"]
}, Open  ]],
Cell[208195, 4565, 169, 4, 30, "Input",ExpressionUUID->"afe65381-0349-4fbd-a265-88e70a25204b"],
Cell[208367, 4571, 169, 4, 30, "Input",ExpressionUUID->"924b75f0-0480-40c9-8126-272eeb02ca40"],
Cell[CellGroupData[{
Cell[208561, 4579, 608, 16, 30, "Input",ExpressionUUID->"91f61a70-8f2b-43e4-b7b9-0d3e95eaa2a8"],
Cell[209172, 4597, 106183, 1777, 132, "Output",ExpressionUUID->"279e6801-3955-4ebf-87bf-4e5cfe59652b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315392, 6379, 871, 13, 30, "Input",ExpressionUUID->"cca3e3b6-6708-4303-a38e-2aac22bda7a7"],
Cell[316266, 6394, 35163, 597, 231, "Print",ExpressionUUID->"130b250c-d2b4-41c5-be7e-142f5d7614c7"],
Cell[351432, 6993, 2006, 27, 308, "Output",ExpressionUUID->"d7ae55cd-b052-429d-8700-42f3509f39e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353475, 7025, 243, 5, 30, "Input",ExpressionUUID->"e5ac5036-c2a5-421c-84ab-12169714c5e9"],
Cell[353721, 7032, 4054, 91, 132, "Output",ExpressionUUID->"139ee709-7eb0-457b-ae4e-8435c5acedf2"]
}, Open  ]],
Cell[357790, 7126, 235, 6, 30, "Input",ExpressionUUID->"d9a756aa-d141-4425-a3ce-dff8ca7ea061"],
Cell[CellGroupData[{
Cell[358050, 7136, 430, 11, 30, "Input",ExpressionUUID->"f41ed234-f520-4f19-b17e-e6b583fc66f7"],
Cell[358483, 7149, 273752, 4521, 132, "Output",ExpressionUUID->"93d0154d-0eba-45ea-84e1-981d149de404"]
}, Open  ]],
Cell[632250, 11673, 227, 5, 30, "Input",ExpressionUUID->"107f57a4-ed72-4e85-ae85-c829873ac336"],
Cell[CellGroupData[{
Cell[632502, 11682, 1376, 20, 30, "Input",ExpressionUUID->"71d1e208-620e-4608-b066-2019979435d2"],
Cell[633881, 11704, 21444, 372, 235, "Print",ExpressionUUID->"f42a9e53-c649-495e-b450-5e3b326e4c63"],
Cell[655328, 12078, 814, 11, 140, "Output",ExpressionUUID->"38b18bd1-2d9c-486b-b520-ef878d9e7fac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656179, 12094, 240, 4, 30, "Input",ExpressionUUID->"2a81a0e5-97d8-40a8-af7e-4116dea2259d"],
Cell[656422, 12100, 154, 2, 34, "Output",ExpressionUUID->"82d4f242-a161-481f-9038-4ce125548b50"]
}, Open  ]],
Cell[656591, 12105, 483, 12, 30, "Input",ExpressionUUID->"35f69a8f-0918-4224-9863-7ab3063e88b5"],
Cell[657077, 12119, 488, 12, 30, "Input",ExpressionUUID->"922fe8a3-6b46-426c-b61f-71881d4fbc0d"],
Cell[657568, 12133, 603, 13, 30, "Input",ExpressionUUID->"51f859f3-dc58-4fac-82cb-5c8d4abb8b53"],
Cell[658174, 12148, 486, 12, 30, "Input",ExpressionUUID->"dad391d6-7f1c-4fa8-965a-28373874e2e6"],
Cell[658663, 12162, 225, 4, 30, "Input",ExpressionUUID->"28f6415f-c926-4d42-8b7f-78ea4b960586"],
Cell[CellGroupData[{
Cell[658913, 12170, 269, 5, 30, "Input",ExpressionUUID->"13ec4645-4bd9-4d53-8e0e-c5a6f069b197"],
Cell[659185, 12177, 481518, 8751, 75, "Output",ExpressionUUID->"cc2276b8-e6fc-47c9-96f3-8dc3c95c4a4b"]
}, Open  ]],
Cell[1140718, 20931, 524, 12, 52, "Input",ExpressionUUID->"bfe7a582-90d7-4752-95d3-834a20ffd696"],
Cell[1141245, 20945, 480, 12, 52, "Input",ExpressionUUID->"69c57ae4-28d0-4fcf-bbda-69d0f048626e"],
Cell[1141728, 20959, 305, 7, 30, "Input",ExpressionUUID->"620dba13-6649-4dfd-85b3-4f31d6d03067"],
Cell[1142036, 20968, 151, 3, 30, "Input",ExpressionUUID->"cd056fa9-9045-47a6-9fd5-a6f12f47c809"],
Cell[1142190, 20973, 1245, 34, 94, "Input",ExpressionUUID->"08091b7b-9d6a-4381-8470-918b741b8f0d"],
Cell[1143438, 21009, 1462, 36, 94, "Input",ExpressionUUID->"a302113b-174d-43f3-8144-dff6a42c3ab9"],
Cell[1144903, 21047, 263, 7, 30, "Input",ExpressionUUID->"41d36ce1-8333-44b9-aef1-dcc2ad0a8e20"],
Cell[1145169, 21056, 1173, 31, 94, "Input",ExpressionUUID->"a0bc9db6-1d31-4eed-9d11-4038d9699af3"],
Cell[1146345, 21089, 329, 7, 30, "Input",ExpressionUUID->"d7e8a01d-2a67-45b2-b9ed-f07dded389bb"],
Cell[1146677, 21098, 318, 7, 30, "Input",ExpressionUUID->"0a10aa89-e65e-4e4b-8b4f-9ecfe0dd007c"],
Cell[1146998, 21107, 2583, 50, 94, "Input",ExpressionUUID->"76052049-f00a-4d92-854f-c79404c79474"],
Cell[CellGroupData[{
Cell[1149606, 21161, 439, 12, 30, "Input",ExpressionUUID->"76063e98-4c04-4d6c-a22a-14284e1e3805"],
Cell[1150048, 21175, 475721, 8635, 76, "Output",ExpressionUUID->"cc7fff3f-c078-4d7e-84b4-62451334f337"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1625806, 29815, 851, 20, 73, "Input",ExpressionUUID->"17eb7600-2603-41a4-bce7-015b6bd96645"],
Cell[1626660, 29837, 398310, 6628, 75, "Output",ExpressionUUID->"61cf887d-d44f-4e18-9455-698eb18552d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2025007, 36470, 640, 13, 52, "Input",ExpressionUUID->"3b255580-80a3-4e7f-a588-de010e8447e1"],
Cell[2025650, 36485, 375, 9, 24, "Message",ExpressionUUID->"293ded2c-26e6-4f79-b13e-498ffaca3428"],
Cell[2026028, 36496, 228, 3, 34, "Output",ExpressionUUID->"75cf7b3d-5d11-48b4-a678-388035280397"]
}, Open  ]],
Cell[2026271, 36502, 185, 3, 30, "Input",ExpressionUUID->"8b14c7f1-0fda-4a33-b8f5-e40e79681e6f"],
Cell[CellGroupData[{
Cell[2026481, 36509, 853, 20, 73, "Input",ExpressionUUID->"2cf97c19-eea0-4328-b2a9-455333901bad"],
Cell[2027337, 36531, 390, 9, 24, "Message",ExpressionUUID->"a2bdb0cd-822a-4931-9209-f6fa38010f79"],
Cell[2027730, 36542, 231, 4, 34, "Output",ExpressionUUID->"6315fc87-caef-491a-9f4c-886c42b2d655"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2027998, 36551, 475, 10, 30, "Input",ExpressionUUID->"fd9cf00c-dbca-4d11-bfcf-173d9f5f63f3"],
Cell[2028476, 36563, 350, 9, 24, "Message",ExpressionUUID->"2443c5aa-2859-4157-a3c7-5c99ac62945e"],
Cell[2028829, 36574, 154, 2, 34, "Output",ExpressionUUID->"4bea0ed8-ff71-473c-a3ea-4d7bcbd704f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2029020, 36581, 292, 6, 30, "Input",ExpressionUUID->"7e026c58-8fb2-430e-a0e3-12f8bbda3826"],
Cell[2029315, 36589, 206, 4, 34, "Output",ExpressionUUID->"3d82db7d-5ed9-4d69-b7a7-1bad016d40ac"]
}, Open  ]],
Cell[2029536, 36596, 155, 3, 30, "Input",ExpressionUUID->"d751e19f-5e58-495c-abce-604a9e070803"]
}
]
*)

